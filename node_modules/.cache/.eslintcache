[{"C:\\Users\\Admin\\create_grade_quizzes\\src\\index.js":"1","C:\\Users\\Admin\\create_grade_quizzes\\src\\App.js":"2","C:\\Users\\Admin\\create_grade_quizzes\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\create_grade_quizzes\\src\\hooks\\useAuth.js":"4","C:\\Users\\Admin\\create_grade_quizzes\\src\\routes\\privateRoute.js":"5","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuizPage.js":"6","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuestionDialog.js":"7","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\QuestionEntry.js":"8","C:\\Users\\Admin\\create_grade_quizzes\\src\\context\\CreateQuizProvider.js":"9","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\dashboard\\Dashboard.js":"10","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\SettingPage.js":"11","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Footer.js":"12","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Public.js":"13","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\another\\AnotherPage.js":"14","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AuthProvider.js":"15","C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\quizApi.js":"16","C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\axiosClient.js":"17","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\HomePage.js":"18","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\Nav.js":"19","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\RegisterPage.js":"20","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\QuizInfo.js":"21","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\NotFoundQuiz.js":"22","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\quiz_info\\JoinQuizInfo.js":"23","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\StartQuiz.js":"24","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\CustomAlertDialog.js":"25","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\LibraryPage.js":"26","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assigned\\AssignedQuizPage.js":"27","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\AssignedUsers.js":"28","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AdminSettingProvider.js":"29","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\Admin.js":"30","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\SidebarWithHeader.js":"31","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\QuizEditor.js":"32","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizEditProvider.js":"33","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\NewQuestionDialog.js":"34","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\QuizEditDialog.js":"35","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\EditQuestionDialog.js":"36","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportPage.js":"37","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\create_quiz\\CreateNewQuizPage.js":"38","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportDetailPage.js":"39","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\ShareDialog.js":"40","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assign\\Assignment.js":"41","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizProvider.js":"42","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\login\\LoginPage.js":"43","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\QuizService.js":"44","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\VerificationPage.js":"45","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\SubmitReportEntry.js":"46","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\UserService.js":"47","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\AppService.js":"48","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\MyAvatar.js":"49","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\SubjectService.js":"50","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\RemovedQuizzes.js":"51","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\QuizEntry.js":"52","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\index.js":"53","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\App.js":"54","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\reportWebVitals.js":"55","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\QuizProvider.js":"56","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\AuthProvider.js":"57","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\context\\CreateQuizProvider.js":"58","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\AdminSettingProvider.js":"59","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\hooks\\useAuth.js":"60","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\routes\\privateRoute.js":"61","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\Admin.js":"62","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\login\\LoginPage.js":"63","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\register\\VerificationPage.js":"64","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\register\\RegisterPage.js":"65","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\SidebarWithHeader.js":"66","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\QuizEditProvider.js":"67","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\start_quiz\\StartQuiz.js":"68","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\HomePage.js":"69","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\quiz_info\\JoinQuizInfo.js":"70","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\create_quiz\\CreateNewQuizPage.js":"71","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\QuizEditor.js":"72","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\LibraryPage.js":"73","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\report\\ReportDetailPage.js":"74","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\RemovedQuizzes.js":"75","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigned\\AssignedQuizPage.js":"76","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assign\\Assignment.js":"77","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\report\\ReportPage.js":"78","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\api\\axiosClient.js":"79","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\admin\\dashboard\\Dashboard.js":"80","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\admin\\setting\\SettingPage.js":"81","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\api\\quizApi.js":"82","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\CustomAlertDialog.js":"83","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\start_quiz\\SubmitReportEntry.js":"84","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\UserService.js":"85","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\AppService.js":"86","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\QuizService.js":"87","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\QuizEntry.js":"88","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\ShareDialog.js":"89","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\AssignedUsers.js":"90","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\admin\\setting\\MyAvatar.js":"91","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\components\\EditQuestionDialog.js":"92","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\SubjectService.js":"93","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\components\\QuizEditDialog.js":"94","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\components\\NewQuestionDialog.js":"95","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\Nav.js":"96","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\NotFoundQuiz.js":"97","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\public\\Footer.js":"98","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\QuizInfo.js":"99","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigment\\AssignmentQuizzes.js":"100","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigment\\AssignmentReport.js":"101","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\Public.js":"102","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\start_quiz\\StartExamQuiz.js":"103","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigned\\AssignedInfo.js":"104","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\utils\\ApplicationUtils.js":"105","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigment\\EditAssignment.js":"106"},{"size":1162,"mtime":1636613746337,"results":"107","hashOfConfig":"108"},{"size":1263,"mtime":1642342769256,"results":"109","hashOfConfig":"108"},{"size":362,"mtime":499162500000,"results":"110","hashOfConfig":"108"},{"size":350,"mtime":1633938432216,"results":"111","hashOfConfig":"108"},{"size":710,"mtime":1636614258381,"results":"112","hashOfConfig":"108"},{"size":10854,"mtime":1633154003072,"results":"113","hashOfConfig":"114"},{"size":11021,"mtime":1633097921876,"results":"115","hashOfConfig":"114"},{"size":4353,"mtime":1633012880216,"results":"116","hashOfConfig":"114"},{"size":1497,"mtime":1633013607339,"results":"117","hashOfConfig":"108"},{"size":388,"mtime":1642489063573,"results":"118","hashOfConfig":"108"},{"size":8730,"mtime":1642691777570,"results":"119","hashOfConfig":"108"},{"size":3655,"mtime":1632384367018,"results":"120","hashOfConfig":"108"},{"size":822,"mtime":1633587916623,"results":"121","hashOfConfig":"108"},{"size":299,"mtime":1633151233119,"results":"122","hashOfConfig":"114"},{"size":2636,"mtime":1642483467753,"results":"123","hashOfConfig":"108"},{"size":2005,"mtime":1634718833529,"results":"124","hashOfConfig":"108"},{"size":527,"mtime":1633572044756,"results":"125","hashOfConfig":"108"},{"size":8465,"mtime":1642483542753,"results":"126","hashOfConfig":"108"},{"size":12464,"mtime":1633587065096,"results":"127","hashOfConfig":"108"},{"size":6193,"mtime":1642343700610,"results":"128","hashOfConfig":"108"},{"size":2867,"mtime":1642402361408,"results":"129","hashOfConfig":"108"},{"size":1349,"mtime":1633587048084,"results":"130","hashOfConfig":"108"},{"size":4430,"mtime":1642404005759,"results":"131","hashOfConfig":"108"},{"size":15500,"mtime":1642477761448,"results":"132","hashOfConfig":"108"},{"size":1804,"mtime":1633589424554,"results":"133","hashOfConfig":"108"},{"size":14220,"mtime":1642766417224,"results":"134","hashOfConfig":"108"},{"size":4448,"mtime":1633946918383,"results":"135","hashOfConfig":"108"},{"size":4385,"mtime":1633936162358,"results":"136","hashOfConfig":"108"},{"size":1136,"mtime":1642766935739,"results":"137","hashOfConfig":"108"},{"size":2724,"mtime":1642766260819,"results":"138","hashOfConfig":"108"},{"size":9495,"mtime":1642691523038,"results":"139","hashOfConfig":"108"},{"size":19833,"mtime":1642765980763,"results":"140","hashOfConfig":"108"},{"size":1542,"mtime":1642767032594,"results":"141","hashOfConfig":"108"},{"size":8387,"mtime":1634709341574,"results":"142","hashOfConfig":"108"},{"size":3835,"mtime":1642678951431,"results":"143","hashOfConfig":"108"},{"size":10294,"mtime":1634709432045,"results":"144","hashOfConfig":"108"},{"size":6340,"mtime":1635133860108,"results":"145","hashOfConfig":"108"},{"size":9169,"mtime":1642675422662,"results":"146","hashOfConfig":"108"},{"size":8251,"mtime":1635134054845,"results":"147","hashOfConfig":"108"},{"size":8221,"mtime":1635663397468,"results":"148","hashOfConfig":"108"},{"size":8048,"mtime":1642773410588,"results":"149","hashOfConfig":"108"},{"size":776,"mtime":1642335344098,"results":"150","hashOfConfig":"108"},{"size":5745,"mtime":1642335312149,"results":"151","hashOfConfig":"108"},{"size":1496,"mtime":1642689778755,"results":"152","hashOfConfig":"108"},{"size":3239,"mtime":1642343743531,"results":"153","hashOfConfig":"108"},{"size":394,"mtime":1642476273170,"results":"154","hashOfConfig":"108"},{"size":1973,"mtime":1642737143521,"results":"155","hashOfConfig":"108"},{"size":249,"mtime":1642515749993,"results":"156","hashOfConfig":"108"},{"size":449,"mtime":1642506694973,"results":"157","hashOfConfig":"108"},{"size":228,"mtime":1642653175000,"results":"158","hashOfConfig":"108"},{"size":2004,"mtime":1642748891037,"results":"159","hashOfConfig":"108"},{"size":8217,"mtime":1642748444783,"results":"160","hashOfConfig":"108"},{"size":1162,"mtime":1636613746337,"results":"161","hashOfConfig":"162"},{"size":1258,"mtime":1642832195900,"results":"163","hashOfConfig":"162"},{"size":362,"mtime":499162500000,"results":"164","hashOfConfig":"162"},{"size":776,"mtime":1642335344098,"results":"165","hashOfConfig":"162"},{"size":2636,"mtime":1642483467753,"results":"166","hashOfConfig":"162"},{"size":1497,"mtime":1633013607339,"results":"167","hashOfConfig":"162"},{"size":1136,"mtime":1643126958270,"results":"168","hashOfConfig":"162"},{"size":350,"mtime":1633938432216,"results":"169","hashOfConfig":"162"},{"size":710,"mtime":1636614258381,"results":"170","hashOfConfig":"162"},{"size":3879,"mtime":1643196699733,"results":"171","hashOfConfig":"162"},{"size":5745,"mtime":1642335312149,"results":"172","hashOfConfig":"162"},{"size":3239,"mtime":1642343743531,"results":"173","hashOfConfig":"162"},{"size":6193,"mtime":1642343700610,"results":"174","hashOfConfig":"162"},{"size":9439,"mtime":1643127363863,"results":"175","hashOfConfig":"162"},{"size":1542,"mtime":1642767032594,"results":"176","hashOfConfig":"162"},{"size":15664,"mtime":1643125170233,"results":"177","hashOfConfig":"162"},{"size":8535,"mtime":1642832195921,"results":"178","hashOfConfig":"162"},{"size":4616,"mtime":1642832336544,"results":"179","hashOfConfig":"162"},{"size":9169,"mtime":1642675422662,"results":"180","hashOfConfig":"162"},{"size":19746,"mtime":1643102686497,"results":"181","hashOfConfig":"162"},{"size":14402,"mtime":1642822201171,"results":"182","hashOfConfig":"162"},{"size":8251,"mtime":1635134054845,"results":"183","hashOfConfig":"162"},{"size":2004,"mtime":1642748891037,"results":"184","hashOfConfig":"162"},{"size":5382,"mtime":1643190565112,"results":"185","hashOfConfig":"162"},{"size":10185,"mtime":1643194601018,"results":"186","hashOfConfig":"162"},{"size":6340,"mtime":1635133860108,"results":"187","hashOfConfig":"162"},{"size":527,"mtime":1633572044756,"results":"188","hashOfConfig":"162"},{"size":388,"mtime":1642489063573,"results":"189","hashOfConfig":"162"},{"size":8730,"mtime":1642691777570,"results":"190","hashOfConfig":"162"},{"size":2005,"mtime":1634718833529,"results":"191","hashOfConfig":"162"},{"size":1804,"mtime":1633589424554,"results":"192","hashOfConfig":"162"},{"size":394,"mtime":1642476273170,"results":"193","hashOfConfig":"162"},{"size":4325,"mtime":1643178811666,"results":"194","hashOfConfig":"162"},{"size":249,"mtime":1642515749993,"results":"195","hashOfConfig":"162"},{"size":1546,"mtime":1643173400950,"results":"196","hashOfConfig":"162"},{"size":8217,"mtime":1642748444783,"results":"197","hashOfConfig":"162"},{"size":8221,"mtime":1635663397468,"results":"198","hashOfConfig":"162"},{"size":4385,"mtime":1633936162358,"results":"199","hashOfConfig":"162"},{"size":449,"mtime":1642506694973,"results":"200","hashOfConfig":"162"},{"size":10294,"mtime":1634709432045,"results":"201","hashOfConfig":"162"},{"size":228,"mtime":1642653175000,"results":"202","hashOfConfig":"162"},{"size":3835,"mtime":1642678951431,"results":"203","hashOfConfig":"162"},{"size":8387,"mtime":1634709341574,"results":"204","hashOfConfig":"162"},{"size":12464,"mtime":1633587065096,"results":"205","hashOfConfig":"162"},{"size":1349,"mtime":1642831941392,"results":"206","hashOfConfig":"162"},{"size":3655,"mtime":1632384367018,"results":"207","hashOfConfig":"162"},{"size":2867,"mtime":1642402361408,"results":"208","hashOfConfig":"162"},{"size":3640,"mtime":1642830778147,"results":"209","hashOfConfig":"162"},{"size":2791,"mtime":1643194301944,"results":"210","hashOfConfig":"162"},{"size":808,"mtime":1643125170162,"results":"211","hashOfConfig":"162"},{"size":17030,"mtime":1643191287208,"results":"212","hashOfConfig":"162"},{"size":7052,"mtime":1643186118097,"results":"213","hashOfConfig":"162"},{"size":530,"mtime":1643130552937,"results":"214","hashOfConfig":"162"},{"size":1046,"mtime":1643194679024,"results":"215","hashOfConfig":"162"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},"ddbb0k",{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"218"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"218"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"232"},"1c0cccg",{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"236"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"236"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"218"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"218"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"218"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"218"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"218"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"218"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"218"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"218"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"218"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"218"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"218"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"218"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"218"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"218"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"218"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"218"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"218"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"218"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"218"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"218"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"218"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"218"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},"1u4o9k4",{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"353"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"353"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"353"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"353"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"353"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"353"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"353"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"353"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"353"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"353"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"353"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"353"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"353"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"353"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"353"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"353"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"353"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"353"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"353"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"353"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"353"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"353"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"353"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"353"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"353"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"353"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"353"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"353"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"353"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"353"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"353"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"353"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\create_grade_quizzes\\src\\index.js",[],["474","475"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\App.js",["476","477","478","479","480","481","482","483","484","485","486"],"import {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport {useAuth} from \"./hooks/useAuth\";\nimport {useEffect, useState} from \"react\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport LoginPage from \"./pages/public/login/LoginPage\";\nimport Axios from \"axios\";\nimport {PrivateRoute} from \"./routes/privateRoute\";\nimport Public from \"./components/public/Public\";\nimport Admin from \"./pages/admin/Admin\";\nimport AdminSettingProvider from \"./providers/AdminSettingProvider\";\nimport VerificationPage from \"./pages/public/register/VerificationPage\";\n\nfunction App() {\n    const {user} = useAuth();\n    const [inputValue, setinputValue] = useState(\"\");\n    const [quiz, setQuiz] = useState(null);\n\n\n    return (\n        <Switch>\n            <PrivateRoute path={'/admin'}>\n                {/*<AdminSettingProvider>*/}\n                    <Admin/>\n                {/*</AdminSettingProvider>*/}\n            </PrivateRoute>\n            {/*<Route  path='/admin' component={Admin}/>*/}\n            <Route path='/login' component={LoginPage}/>\n            <Route path='/verification' component={VerificationPage}/>\n            <Route path='/' component={Public}/>\n        </Switch>\n    );\n}\n\nexport default App;\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\hooks\\useAuth.js",["487","488","489","490"],"import React, {useState, useContext, createContext, useEffect} from \"react\";\r\nimport {AuthContext} from \"../providers/AuthProvider\";\r\nimport {AdminContext} from \"../providers/AdminSettingProvider\";\r\n\r\n\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n\r\nexport const useAdmin = () => {\r\n    return useContext(AdminContext);\r\n}","C:\\Users\\Admin\\create_grade_quizzes\\src\\routes\\privateRoute.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuizPage.js",["491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515"],"import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Checkbox,\r\n    Container,\r\n    Flex,\r\n    Heading,\r\n    HStack,\r\n    IconButton,\r\n    Image,\r\n    Input,\r\n    Select,\r\n    SimpleGrid,\r\n    Spacer,\r\n    Stack,\r\n    Tag,\r\n    TagLabel,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    ButtonGroup,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    AddIcon,\r\n    ArrowBackIcon,\r\n    CopyIcon,\r\n    DeleteIcon,\r\n    EditIcon,\r\n    TimeIcon,\r\n    ViewIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport { CircularProgress, CircularProgressLabel } from \"@chakra-ui/react\";\r\nimport { AiOutlineTag, BiPen, BsPen } from \"react-icons/all\";\r\nimport EditQuestionDialog from \"./EditQuestionDialog\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\nimport QuestionEntry from \"./QuestionEntry\";\r\nimport axios from \"axios\";\r\nimport { useCreateQuiz } from \"../../context/CreateQuizProvider\";\r\n\r\nconst EditQuizPage = () => {\r\n    const [showCreateQ, setShowCQD] = useState(false);\r\n    const { createdQuiz, setCreatedQuiz } = useCreateQuiz();\r\n\r\n    return (\r\n        <Box bg={\"#F7FAFC\"}>\r\n            {/*  Header with action bar*/}\r\n            {showCreateQ && <EditQuestionDialog setVisible={setShowCQD} />}\r\n\r\n            <HeaderWithActionBar setShowCQD={setShowCQD} />\r\n            {/*   Content with right sidebar*/}\r\n            <Box\r\n                pt={\"150px\"}\r\n                minH={\"100vh\"}\r\n                bg={\"#F7FAFC\"}\r\n                position={\"relative\"}\r\n            >\r\n                <Flex direction={\"column\"} justifyContent=\"center\">\r\n                    {/*  */}\r\n                    <HStack mt={10} w=\"100%\" align=\"center\">\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                    </HStack>\r\n                    {/*QUESTION*/}\r\n                    <Box w={\"100%\"} maxW={\"1000px\"}>\r\n                        <Center>\r\n                            {/*SAVED QUESTIONS*/}\r\n                            <Stack\r\n                                w={\"100%\"}\r\n                                direction={\"column\"}\r\n                                align={\"center\"}\r\n                            >\r\n                                {/* {savedQuestions.length > 0 &&\r\n                                    savedQuestions.map((item, i) => (\r\n                                        <QuestionEntry\r\n                                            key={i}\r\n                                            index={i + 1}\r\n                                            question={item}\r\n                                        />\r\n                                    ))} */}\r\n                                {createdQuiz != null &&\r\n                                    createdQuiz.questions.length > 0 &&\r\n                                    createdQuiz.questions.map((item, i) => (\r\n                                        <QuestionEntry\r\n                                            key={i}\r\n                                            index={i + 1}\r\n                                            question={item}\r\n                                        />\r\n                                    ))}\r\n                            </Stack>\r\n                        </Center>\r\n                    </Box>\r\n                    {/**/}\r\n                    {/* <Box\r\n                        overflowY={\"scroll\"}\r\n                        top={\"150\"}\r\n                        zIndex={10}\r\n                        position={\"sticky\"}\r\n                        bg={\"white\"}\r\n                        boxShadow={\"md\"}\r\n                        minW={\"300px\"}\r\n                        maxW={\"300px\"}\r\n                        minH={\"400px\"}\r\n                        height={\"100%\"}\r\n                    >\r\n                        <Box p={4} mb={100}>\r\n                            <VStack spacing={5}>\r\n                                <Input type={\"file\"} />\r\n                                <HStack>\r\n                                    <Tooltip label={\"Quiz title\"}>\r\n                                        <Heading\r\n                                            fontWeight={\"medium\"}\r\n                                            fontSize={\"25px\"}\r\n                                        >\r\n                                            {createdQuiz != null &&\r\n                                            createdQuiz.title != null\r\n                                                ? createdQuiz.title\r\n                                                : \"\"}\r\n                                        </Heading>\r\n                                    </Tooltip>\r\n                                    <IconButton\r\n                                        colorScheme={\"teal\"}\r\n                                        onClick={() => {}}\r\n                                        icon={<EditIcon />}\r\n                                    />\r\n                                </HStack>\r\n                                <HStack>\r\n                                    <Tooltip\r\n                                        zIndex={100}\r\n                                        label={\r\n                                            \"Public: visible to everyone ;\\n Private: visible to you and shared ones\"\r\n                                        }\r\n                                    >\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            leftIcon={<ViewIcon />}\r\n                                            variant={\"solid\"}\r\n                                            colorScheme={\"white\"}\r\n                                            color={\"blue.400\"}\r\n                                        >\r\n                                            public\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                    <Tooltip\r\n                                        zIndex={100}\r\n                                        label={\"Default time for all questions\"}\r\n                                    >\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            leftIcon={<TimeIcon />}\r\n                                            variant={\"solid\"}\r\n                                            colorScheme={\"white\"}\r\n                                            color={\"blue.400\"}\r\n                                        >\r\n                                            30 secs\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                    </Box>\r\n               \r\n                */}\r\n                </Flex>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default EditQuizPage;\r\n\r\n/*\r\nHEADER\r\n*/\r\nconst HeaderWithActionBar = ({ setShowCQD }) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const onSaveQuiz = async () => {\r\n        setLoading(true);\r\n        // const resp = await axios.post(\r\n        //     `http://localhost:8080/api/v1/public/${createdQuiz.quizId}/question`,\r\n        //     JSON.parse()\r\n        // );\r\n        // let modifiledQuestions = createdQuiz.questions.map((question) => ({\r\n        //     ...question,\r\n        //     options: question.options.map((option) => ({\r\n        //         ...option,\r\n        //         optionId: null,\r\n        //     })),\r\n        // }));\r\n        // setCreatedQuiz((prevState) => ({\r\n        //     ...prevState,\r\n        //     questions: modifiledQuestions,\r\n        // }));\r\n    };\r\n    return (\r\n        <Box\r\n            zIndex={500}\r\n            bg={\"red\"}\r\n            position={\"fixed\"}\r\n            top={0}\r\n            w={\"100%\"}\r\n            bg={\"#F7FAFC\"}\r\n        >\r\n            {/*Header*/}\r\n            <Box bg={\"red\"} maxH={\"60px\"} bg={\"teal.600\"}>\r\n                <Flex\r\n                    align={\"center\"}\r\n                    px={8}\r\n                    py={2}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                >\r\n                    <ArrowBackIcon size={\"md\"} color={\"white\"} />\r\n                    <Text\r\n                        color={\"white\"}\r\n                        fontWeight={\"medium\"}\r\n                        fontStyle={\"italic\"}\r\n                    >\r\n                        Editted 1 minute ago\r\n                    </Text>\r\n                    <ButtonGroup>\r\n                        <Button size={\"sm\"} onClick={onSaveQuiz}>\r\n                            Save\r\n                        </Button>\r\n                        <Button size={\"sm\"}>Publish</Button>\r\n                    </ButtonGroup>\r\n                </Flex>\r\n            </Box>\r\n            {isLoading && (\r\n                <CircularProgress\r\n                    position=\"fixed\"\r\n                    top=\"50%\"\r\n                    right=\"50%\"\r\n                    zIndex={800}\r\n                    value={30}\r\n                    isIndeterminate\r\n                    color=\"orange.400\"\r\n                    thickness=\"12px\"\r\n                />\r\n            )}\r\n            {/*Box*/}\r\n            <Box bg={\"#F7FAFC\"} maxW={\"860px\"}>\r\n                <Box>\r\n                    <Center>\r\n                        <HStack\r\n                            boxShadow={\"md\"}\r\n                            p={4}\r\n                            borderBottomRadius={\"xl\"}\r\n                            spacing={4}\r\n                            bg={\"white\"}\r\n                        >\r\n                            <VStack w={\"400px\"}>\r\n                                <Text alignSelf={\"start\"}>Search</Text>\r\n                                <Input />\r\n                            </VStack>\r\n                            <VStack align={\"end\"} w={\"200px\"}>\r\n                                <Text>New question</Text>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setShowCQD(true);\r\n                                    }}\r\n                                    size={\"md\"}\r\n                                    rightIcon={<AddIcon />}\r\n                                    variant={\"solid\"}\r\n                                    colorScheme={\"teal\"}\r\n                                >\r\n                                    New question\r\n                                </Button>\r\n                            </VStack>\r\n                        </HStack>\r\n                    </Center>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n",["516","517"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuestionDialog.js",["518","519","520","521","522","523"],"import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Checkbox,\r\n    Container,\r\n    HStack,\r\n    Input,\r\n    Select,\r\n    Text,\r\n    Textarea,\r\n    usePrevious,\r\n    VStack,\r\n    IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { MdArrowDropDown } from \"react-icons/all\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\nimport { useCreateQuiz } from \"../../context/CreateQuizProvider\";\r\nimport axios from \"axios\";\r\nimport { DeleteIcon } from \"@chakra-ui/icons\";\r\n\r\nconst EditQuestionDialog = ({ setVisible }) => {\r\n    const toast = useToast();\r\n    const {\r\n        createdQuiz,\r\n        setCreatedQuiz,\r\n        question,\r\n        setQuestion,\r\n        defaultQuestionState,\r\n    } = useCreateQuiz();\r\n    const randomUID = () => {\r\n        return Math.floor((2 + Math.random()) * 0x100000000)\r\n            .toString(16)\r\n            .substring(1);\r\n    };\r\n    // const [question, setQuestion] = useState({\r\n    //     title: \"this is question title\",\r\n    //     options: [\r\n    //         {\r\n    //             content: \"this is option 1\",\r\n    //         },\r\n    //         {\r\n    //             content: \"\",\r\n    //         },\r\n    //         {\r\n    //             content: \"\",\r\n    //         },\r\n    //         {\r\n    //             content: \"\",\r\n    //         },\r\n    //     ],\r\n    // });\r\n\r\n    //on title change\r\n    const onQuizTitleChange = (e) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            title: e.target.value,\r\n        }));\r\n    };\r\n\r\n    //on option in put change\r\n    const onOptionChange = (e, i) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return { ...prevState.options[i], content: e.target.value };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    };\r\n\r\n    //add new option\r\n    const onAddOption = () => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            title: prevState.title,\r\n            options: [...prevState.options, { content: \"\" }],\r\n        }));\r\n    };\r\n\r\n    const onCheckBoxChange = (e, i) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...prevState.options[i],\r\n                        isChecked: e.target.checked,\r\n                    };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    };\r\n\r\n    function onScoreChange(e, i) {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...prevState.options[i],\r\n                        score: e.target.value,\r\n                    };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    }\r\n\r\n    const handleBtnSaveClicked = async () => {\r\n        //modify question to save (remove empty option)\r\n        let questionTmp = {\r\n            ...question,\r\n            options: question.options.filter((item) => item.content.length > 0),\r\n        };\r\n        //\r\n        let score = 0;\r\n        question.options.forEach((item) => {\r\n            if (item.score != null) {\r\n                score += item.score;\r\n            }\r\n        });\r\n\r\n        //check use select true option\r\n        if (score === 0) {\r\n            toast({\r\n                title: \"Please select at least 1 true option and option's score\",\r\n                status: \"error\",\r\n                isClosable: true,\r\n                duration: 1500,\r\n                position: \"bottom-left\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (score > 0) {\r\n            setVisible(false);\r\n            const resp = await axios.post(\r\n                `http://localhost:8080/api/v1/public/quiz/${createdQuiz.quizId}/question`,\r\n                JSON.stringify(questionTmp),\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n            if (resp.status === 200) {\r\n                setCreatedQuiz((prevState) => ({\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, resp.data],\r\n                }));\r\n            }\r\n            setQuestion(defaultQuestionState);\r\n        } else {\r\n            setVisible(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                onClick={() => {\r\n                    console.log(\"HAHHAHA\");\r\n                }}\r\n                position={\"fixed\"}\r\n                // zIndex={1}\r\n                top={0}\r\n                bg={\"gray.300\"}\r\n                align={\"center\"}\r\n                alignItems={\"center\"}\r\n                opacity={0.4}\r\n                justifyContent={\"center\"}\r\n                width={\"100vw\"}\r\n                height={\"100vh\"}\r\n            />\r\n\r\n            <Box\r\n                boxShadow={\"md\"}\r\n                borderRadius={\"md\"}\r\n                position={\"fixed\"}\r\n                zIndex={899}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                minW={\"700px\"}\r\n                bg={\"white\"}\r\n                maxW={\"700px\"}\r\n            >\r\n                <VStack>\r\n                    <HStack bg={\"gray.700\"} p={5} w={\"100%\"}>\r\n                        <Text color={\"white\"} fontWeight={\"medium\"}>\r\n                            Question {createdQuiz.questions.length + 1}\r\n                        </Text>\r\n                    </HStack>\r\n                    {/*QUESTION TITLE*/}\r\n                    <Box p={2} w={\"100%\"}>\r\n                        <Textarea\r\n                            onChange={(e) => onQuizTitleChange(e)}\r\n                            value={question.title}\r\n                            css={{\r\n                                \"&::-webkit-scrollbar\": {\r\n                                    width: \"0px\",\r\n                                    background: \"transparent\",\r\n                                },\r\n                            }}\r\n                            resize={\"none\"}\r\n                            overflow={\"hidden\"}\r\n                            placeholder={\"Type your question here\"}\r\n                        />\r\n                    </Box>\r\n                    <VStack p={4} spacing={4} w={\"100%\"}>\r\n                        {/* {question.options.map((item, i) => ( */}\r\n                        {question.options.map((item, i) => (\r\n                            <HStack key={i} w={\"100%\"}>\r\n                                <Checkbox\r\n                                    onChange={(e) => onCheckBoxChange(e, i)}\r\n                                />\r\n                                <Input\r\n                                    value={question.options[i].content}\r\n                                    onChange={(e) => onOptionChange(e, i)}\r\n                                    wordBreak={\"break-all\"}\r\n                                    wordwrap={\"break-word\"}\r\n                                    // isFullWidth\r\n                                    size={\"md\"}\r\n                                />\r\n                                <Select\r\n                                    bg={\"teal\"}\r\n                                    color={\"gray.800\"}\r\n                                    onChange={(e) => onScoreChange(e, i)}\r\n                                    isDisabled={\r\n                                        item.isChecked == null ||\r\n                                        item.isChecked === false\r\n                                    }\r\n                                    defaultValue={0}\r\n                                    icon={<MdArrowDropDown />}\r\n                                    iconSize={0}\r\n                                    maxW={70}\r\n                                    size=\"xs\"\r\n                                    variant=\"outline\"\r\n                                >\r\n                                    {[\r\n                                        0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75,\r\n                                        2,\r\n                                    ].map((score, index) => (\r\n                                        <option key={index} value={score}>\r\n                                            {score}\r\n                                        </option>\r\n                                    ))}\r\n                                </Select>\r\n                                {/* DELETE ICON */}\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setQuestion((prevState) => ({\r\n                                            ...prevState,\r\n                                            options: prevState.options.filter(\r\n                                                (item, index) => index !== i\r\n                                            ),\r\n                                        }));\r\n                                    }}\r\n                                    color=\"red\"\r\n                                    icon={<DeleteIcon />}\r\n                                />\r\n                            </HStack>\r\n                        ))}\r\n                    </VStack>\r\n                    {/*BUTTON ADD ANSWER*/}\r\n                    <Box align={\"start\"} p={2} w={\"100%\"}>\r\n                        <Button\r\n                            onClick={onAddOption}\r\n                            size={\"sm\"}\r\n                            variant={\"outline\"}\r\n                            alignSelf={\"start\"}\r\n                            colorScheme={\"teal\"}\r\n                        >\r\n                            Add answer option\r\n                        </Button>\r\n                    </Box>\r\n                    {/*BUTTON SAVE*/}\r\n                    <Box w={\"100%\"}>\r\n                        <HStack p={2} bg={\"gray.700\"} justifyContent={\"end\"}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setQuestion(defaultQuestionState);\r\n                                    setVisible(false);\r\n                                }}\r\n                                size={\"sm\"}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={handleBtnSaveClicked} size={\"sm\"}>\r\n                                Save\r\n                            </Button>\r\n                        </HStack>\r\n                    </Box>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;\r\n",["524","525"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\QuestionEntry.js",["526","527"],"import React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    HStack,\r\n    IconButton,\r\n    Select,\r\n    SimpleGrid,\r\n    Spacer,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { AiOutlineTag, BsPen } from \"react-icons/all\";\r\nimport { CopyIcon, DeleteIcon } from \"@chakra-ui/icons\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\nimport { useCreateQuiz } from \"../../context/CreateQuizProvider\";\r\n\r\nconst QuestionEntry = ({ index, question }) => {\r\n    // const { question, setquestion } = useCreateQuiz();\r\n\r\n    // const onDeleteQuestion = () => {\r\n    //     let tmp = question;\r\n    //     tmp = tmp.filter((q) => q.title != question.title);\r\n    //     setquestion(tmp);\r\n    // };\r\n    return (\r\n        <>\r\n            <Box\r\n                boxShadow={\"sm\"}\r\n                my={5}\r\n                borderRadius={\"md\"}\r\n                align={\"start\"}\r\n                textAlign={\"start\"}\r\n                h={\"100%\"}\r\n                bg={\"white\"}\r\n                maxW={\"600px\"}\r\n                minW={\"600px\"}\r\n            >\r\n                {/*Edit bar*/}\r\n                <HStack p={2} bg={\"gray.200\"}>\r\n                    {/*QUESTION INDEX*/}\r\n                    <Text>Question {index}</Text>\r\n                    <Spacer />\r\n                    <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                        <IconButton icon={<BsPen />} />\r\n                    </Tooltip>\r\n                    <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                        <IconButton\r\n                            // onClick={onDeleteQuestion}\r\n                            icon={<DeleteIcon />}\r\n                        />\r\n                    </Tooltip>\r\n                    <Tooltip label={\"duplicate\"}>\r\n                        <IconButton icon={<CopyIcon />} />\r\n                    </Tooltip>\r\n                </HStack>\r\n                <VStack align={\"start\"} p={2} spacing={5}>\r\n                    {/*QUESTION TITLE*/}\r\n                    <Container maxW=\"3xl\">\r\n                        <Box maxW=\"3xl\">\r\n                            <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                        </Box>\r\n                    </Container>\r\n                    <SimpleGrid\r\n                        w={\"100%\"}\r\n                        align={\"start\"}\r\n                        columns={2}\r\n                        spacing={2}\r\n                    >\r\n                        {question.options.map((option, index) => (\r\n                            <Container key={index} maxW=\"xl\" centerContent>\r\n                                <Box\r\n                                    py={4}\r\n                                    w={\"100%\"}\r\n                                    maxW=\"3xl\"\r\n                                    align={\"start\"}\r\n                                >\r\n                                    <Checkbox\r\n                                        w={\"100%\"}\r\n                                        size={\"sm\"}\r\n                                        disabled={true}\r\n                                        isChecked={option.isChecked}\r\n                                    >\r\n                                        {option.content}\r\n                                    </Checkbox>\r\n                                </Box>\r\n                            </Container>\r\n                        ))}\r\n                    </SimpleGrid>\r\n                </VStack>\r\n                <HStack bg={\"gray.200\"} p={1}>\r\n                    <Select\r\n                        size={\"sm\"}\r\n                        maxW={\"100\"}\r\n                        bg={\"white\"}\r\n                        name={\"queston seconds\"}\r\n                    >\r\n                        <option value=\"option1\">30 secs</option>\r\n                        <option value=\"option2\">15 secs</option>\r\n                        <option value=\"option3\">45 secs</option>\r\n                    </Select>\r\n                    <Button\r\n                        size={\"sm\"}\r\n                        colorScheme={\"white\"}\r\n                        variant={\"ghost\"}\r\n                        leftIcon={<AiOutlineTag />}\r\n                    >\r\n                        Tag topics\r\n                    </Button>\r\n                </HStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuestionEntry;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\context\\CreateQuizProvider.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\dashboard\\Dashboard.js",["528","529","530","531"],"import React from \"react\";\r\nimport SidebarWithHeader from \"../../../pages/admin/SidebarWithHeader\";\r\nimport {Heading, Switch} from \"@chakra-ui/react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport SettingPage from \"../setting/SettingPage\";\r\n\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <Heading>\r\n            main\r\n        </Heading>\r\n\r\n\r\n    )\r\n};\r\nexport default Dashboard;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\SettingPage.js",["532","533","534","535","536","537","538"],"import React, {Component, useState} from 'react';\r\nimport {\r\n    Avatar,\r\n    Box, Button,\r\n    Divider,\r\n    Flex,\r\n    FormControl, FormErrorMessage,\r\n    FormHelperText,\r\n    FormLabel,\r\n    Heading,\r\n    HStack, Icon,\r\n    Input, Select,\r\n    Text,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {MdAccountCircle} from \"react-icons/all\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {EditIcon} from \"@chakra-ui/icons\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport AppService from \"../../../service/AppService\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport MyAvatar from \"./MyAvatar\";\r\nimport axios from \"axios\";\r\n\r\nconst SettingPage = () => {\r\n\r\n    const {user, setUser, getUserDetails} = useAuth();\r\n    const [image, setImage] = useState(null);\r\n    const [err, setErr] = useState('');\r\n    const [userTemp, setUserTemp] = useState({});\r\n    const handleEditAvt = async (e) => {\r\n        const file = e.target.files[0];\r\n        const fileType = file['type'];\r\n        console.log(fileType)\r\n        if (fileType === \"image/jpeg\" || fileType === \"image/png\") {\r\n            setImage(file);\r\n            console.log(\"Updating avt...\")\r\n            try {\r\n                const resp = await UserService.updateAvt(file);\r\n                console.log(resp.data.avt);\r\n                setUser((prev) => ({\r\n                    ...prev,\r\n                    avt: resp.data.avt\r\n                }))\r\n            } catch (e) {\r\n                console.log(\"Update avt failed: \", e.response.data.message);\r\n            }\r\n        } else {\r\n            alert(\"Please select image file types: jpeg or png\")\r\n        }\r\n    }\r\n    const validationInput = async (input, value) => {\r\n        if (user.username !== value) {\r\n            console.log('validation input')\r\n            try {\r\n                const url = process.env.REACT_APP_BASE_URL + `/public/validation-input?input=${input}&value=${value}`;\r\n                await axios.get(url);\r\n            } catch (e) {\r\n                console.log(e.response.data)\r\n                setErr(e.response.data.message);\r\n            }\r\n        }\r\n    }\r\n    const handleUpdate = async () => {\r\n        try {\r\n            const data = await UserService.updateUser(userTemp);\r\n            getUserDetails();\r\n        } catch (e) {\r\n            console.log(e.response.data.message);\r\n        }\r\n\r\n    }\r\n    return (\r\n\r\n        <Flex w={'100%'} bg={'gray.100'} justifyContent={'center'} direction={'column'}>\r\n            <Box mb={5} bg={'white'} p={8} align={'start'} w={'630px'}>\r\n                <HStack>\r\n                    <Box position={'relative'}>\r\n                        {/*<Avatar*/}\r\n                        {/*    src={image ? URL.createObjectURL(image) : AppService.getImage(user.avt)}*/}\r\n                        {/*    size={'xl'}*/}\r\n                        {/*    name={user.username}*/}\r\n                        {/*/>*/}\r\n\r\n                        <MyAvatar\r\n                            key={user.avt}\r\n                            file={image}\r\n                            imageName={user.avt}\r\n                            name={user.username}\r\n                        />\r\n                        <FormLabel htmlFor={'avtPicker'}>\r\n                            <Icon\r\n                                position={'absolute'}\r\n                                bottom={0}\r\n                                right={0}\r\n                                as={EditIcon}/>\r\n                            <Input onChange={(e) => handleEditAvt(e)}\r\n                                   id={'avtPicker'} display={'none'} type={'file'}/>\r\n                        </FormLabel>\r\n\r\n                    </Box>\r\n                    <VStack align={'start'} px={'5'}>\r\n                        <Text fontSize={'22px'} fontWeight={'medium'}>{user.username || ''}</Text>\r\n                        <Text fontSize='15px'> {user.fullName || ''}</Text>\r\n                    </VStack>\r\n                </HStack>\r\n            </Box>\r\n            <Box p={8} bg={'white'} align={'start'} minH={'1000px'} w={'630px'}>\r\n\r\n                <VStack align={'start'} spacing={10} align={'start'} w={'100%'}>\r\n                    <Heading fontSize={25}>Setting</Heading>\r\n\r\n                    <VStack align={'start'} w={'100%'}>\r\n                        <HStack>\r\n                            <MdAccountCircle size={20}/>\r\n                            <Text fontWeight={'medium'} fontSize={18}>Account</Text>\r\n                        </HStack>\r\n                        <Divider w={'100%'} colorScheme={'teal'}/>\r\n                    </VStack>\r\n                    <VStack w={'100%'} spacing={5}>\r\n\r\n                        <FormControl id=\"email\">\r\n                            <FormLabel color={'gray.700'}>Email address</FormLabel>\r\n                            <Input\r\n                                isDisabled\r\n                                value={user.email}\r\n                                focusBorderColor={'teal'} colorScheme={'teal'} borderColor={'teal'} type=\"email\"/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                        </FormControl>\r\n\r\n                        <FormControl id=\"username\" isInvalid={err}>\r\n                            <FormLabel color={'gray.700'}>Username</FormLabel>\r\n                            <Input\r\n                                isInvalid={err}\r\n                                onBlur={() => {\r\n                                    validationInput(\"username\", userTemp.username)\r\n                                }}\r\n                                onChange={(e) => {\r\n                                    setUserTemp((prev) => ({\r\n                                        ...prev,\r\n                                        username: e.target.value\r\n                                    }));\r\n                                    setErr('');\r\n                                }}\r\n                                defaultValue={user.username}\r\n                                focusBorderColor={'teal'} type=\"username\"/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                            {\r\n                                err && <FormErrorMessage color={'red'}>{err}</FormErrorMessage>\r\n                            }\r\n                        </FormControl>\r\n\r\n                        <FormControl id=\"fullName\">\r\n                            <FormLabel color={'gray.700'}>Full Name</FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setUserTemp((prev) => ({\r\n                                        ...prev,\r\n                                        fullName: e.target.value\r\n                                    }))\r\n                                }}\r\n                                defaultValue={user.fullName || ''}\r\n                                focusBorderColor={'teal'}/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                        </FormControl>\r\n\r\n                        <FormControl id=\"phone\">\r\n                            <FormLabel color={'gray.700'}>Phone Number</FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setUserTemp((prev) => ({\r\n                                        ...prev,\r\n                                        phone: e.target.value\r\n                                    }))\r\n                                }}\r\n                                defaultValue={user.phone}\r\n                                focusBorderColor={'teal'}/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                        </FormControl>\r\n\r\n\r\n                        <FormControl id=\"school\">\r\n                            <FormLabel>School</FormLabel>\r\n                            <Select placeholder=\"Select school\">\r\n                                <option>Nong Lam University</option>\r\n                                <option>UTE</option>\r\n                                <option>UTH</option>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleUpdate();\r\n                            }}\r\n                            w={'100%'} colorScheme={'teal'}>\r\n                            Save Change\r\n                        </Button>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default SettingPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Footer.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Public.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\another\\AnotherPage.js",[],["539","540"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AuthProvider.js",["541","542"],"import React, {createContext, useEffect, useState} from \"react\";\r\nimport Axios from \"axios\";\r\nimport axios from \"axios\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({children}) => {\r\n\r\n    const [user, setUser] = useState(null);\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    //login\r\n    const login = async (email, password, remember) => {\r\n        const url = \"http://localhost:8080/api/v1/auth/login\";\r\n        const data = {\r\n            \"email\": email,\r\n            \"password\": password\r\n        };\r\n        try {\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\"Content-Type\": \"application/json\"}\r\n            })\r\n            if (resp.status === 200) {\r\n                if (remember) {\r\n                    localStorage.setItem(\"accessToken\", resp.data.accessToken);\r\n                    localStorage.setItem(\"refreshToken\", resp.data.refreshToken);\r\n                }\r\n                return true;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    };\r\n    //logout\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user')\r\n        localStorage.removeItem('accessToken')\r\n        localStorage.removeItem('refreshToken')\r\n    }\r\n    const getUserDetails = async () => {\r\n        let accessToken = localStorage.getItem('accessToken');\r\n        if (accessToken != null) {\r\n            setLoading(true);\r\n            const url = process.env.REACT_APP_BASE_URL + \"/member/users/me\";\r\n            try {\r\n                const resp = await axios.get(url, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${accessToken}`\r\n                    }\r\n                })\r\n                const data = await resp.data.data;\r\n                localStorage.setItem('user', JSON.stringify(data));\r\n                console.log(\"get user detail success\",data);\r\n                setUser(data);\r\n            } catch (e) {\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //create value\r\n    const value = {\r\n        user,\r\n        setUser,\r\n        login,\r\n        logout,\r\n        getUserDetails,\r\n    };\r\n\r\n    useEffect(async () => {\r\n        setLoading(true);\r\n        await getUserDetails();\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !isLoading && <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n            }\r\n        </>\r\n    )\r\n        ;\r\n};","C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\quizApi.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\axiosClient.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\HomePage.js",["543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],"import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Flex,\r\n    Grid,\r\n    GridItem,\r\n    SimpleGrid,\r\n    Input,\r\n    Stack,\r\n    Wrap,\r\n    WrapItem,\r\n    Heading,\r\n    Text,\r\n    HStack,\r\n    Avatar,\r\n    VStack,\r\n    Image,\r\n} from \"@chakra-ui/react\";\r\nimport QuizInfo from \"./QuizInfo\";\r\nimport Footer from \"../../../components/public/Footer\";\r\n\r\nimport {GoFlame} from \"react-icons/all\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport NotFoundQuiz from \"./NotFoundQuiz\";\r\nimport Nav from \"./Nav\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst HomePage = () => {\r\n    const history = useHistory();\r\n    const {user} = useAuth();\r\n    const [code, setCode] = useState(\"8AzAO8\");\r\n    const [found, setFound] = useState(true);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const [quizzes, setQuizzes] = useState(null);\r\n    useEffect(() => {\r\n        /*\r\n        get newest quizzes\r\n         */\r\n        getQuizzes();\r\n\r\n    }, []);\r\n\r\n    const getQuizzes = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await QuizService.getQuizzes();\r\n            console.log(data.data);\r\n            setQuizzes(data.data);\r\n        } catch (e) {\r\n            console.log(\"Get quizzes failed\")\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    /*\r\n    handle find quiz by code \r\n    */\r\n    const handleJoinQuiz = async (e) => {\r\n        // if (code != null && code.length > 0) {\r\n        //     try {\r\n        //         const data = await QuizService.getQuizByCode(code);\r\n        //         console.log(data);\r\n        //         setFound(true);\r\n        //     } catch (e) {\r\n        //         setFound(false);\r\n        //         console.log(e.response.message);\r\n        //     }\r\n        // }\r\n    };\r\n\r\n    const getUserStreaks = () => {\r\n        return user && user.streaks || 0;\r\n    }\r\n    return (\r\n        <Flex\r\n            direction={\"column\"}\r\n            bg={\"#F7FAFC\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={\"center\"}\r\n        >\r\n            <Nav/>\r\n            {/*//Main Content*/}\r\n            <Flex\r\n                pt={8}\r\n                bg={\"#F7FAFC\"}\r\n                // minHeight={'100vh'}\r\n                w={\"100%\"}\r\n                direction={\"column\"}\r\n                alignItems={\"flex-start\"}\r\n            >\r\n                <Flex\r\n                    w={\"100%\"}\r\n                    justifyContent={\"space-around\"}\r\n                    alignItems={\"center\"}\r\n                >\r\n                    {/*Join Code*/}\r\n                    <Box\r\n                        // minW={'800px'}\r\n                        w={[\"100px\", \"500px\", \"800px\"]}\r\n                    >\r\n                        <Stack\r\n\r\n                            boxShadow={\"md\"}\r\n                            borderRadius={\"10px\"}\r\n                            bg={\"white\"}\r\n                            p={[\"10px\", \"50px\", \"100px\"]}\r\n                            minW={\"360px\"}\r\n                            direction={\"row\"}\r\n                        >\r\n                            <Input\r\n                                value={code}\r\n                                onChange={(e) => setCode(e.target.value)}\r\n                                minH={\"50px\"}\r\n                                minW={\"260px\"}\r\n                                placeholder={\"Enter a join code\"}\r\n                            />\r\n                            <Button\r\n                                isDisabled={code.length === 0}\r\n                                onClick={handleJoinQuiz}\r\n                                minH={\"50px\"}\r\n                                minW={\"30px\"}\r\n                                variant={\"solid\"}\r\n                                colorschema={\"teal\"}\r\n                                bg={'teal'}\r\n                                px={5}\r\n                                color={'white'}\r\n                            >\r\n                                Join\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                    {/*Day Streak*/}\r\n                    {!found && <NotFoundQuiz setShow={setFound}/>}\r\n                    <Box\r\n                        boxShadow={\"md\"}\r\n                        borderRadius={\"10px\"}\r\n                        bg={\"white\"}\r\n                        p={[\"10px\", \"50px\"]}\r\n                        align={\"center\"}\r\n                    >\r\n                        <Stack direction={\"column\"}>\r\n                            <Box\r\n                                // bg={\"#EDF2F7\"}\r\n                                bg={'gray.200'}\r\n                                p={1}\r\n                                borderRadius={\"200px\"}\r\n                                minW={\"200px\"}\r\n                            >\r\n                                <HStack>\r\n                                    {/*avt*/}\r\n                                    <Avatar\r\n                                        name={user != null ? user.username : \"\"}\r\n                                        src={\r\n                                  (user && user.avt) ||\r\n                                            \"https://cdn-icons-png.flaticon.com/512/2021/2021646.png\"\r\n                                        }\r\n                                    />\r\n                                    {/*username*/}\r\n                                    <Text\r\n                                        fontSize={\"16px\"}\r\n                                        color={\"#4A5568\"}\r\n                                        fontWeight={\"medium\"}\r\n                                    >\r\n                                        {user != null\r\n                                            ? user.username\r\n                                            : \"Create an account\"}\r\n                                    </Text>\r\n                                </HStack>\r\n                            </Box>\r\n                            <HStack spacing={2} pt={1} pb={1}>\r\n                                <GoFlame color={getUserStreaks() >= 1 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 2 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 3 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 4 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 5 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                            </HStack>\r\n                            <Text\r\n                                color={\"#4A5568\"}\r\n                                fontWeight={\"bold\"}\r\n                                fontSize={\"16px\"}\r\n                            >\r\n                                {getUserStreaks()} day streak\r\n                            </Text>\r\n                            <Text color={\"#718096\"} fontSize={\"14px\"}>\r\n                                Start your streak, play now!\r\n                            </Text>\r\n                        </Stack>\r\n                    </Box>\r\n                </Flex>\r\n            </Flex>\r\n            {/*NEWEST QUIZZES*/}\r\n            <Box py={5} px={10} align={\"start\"} w={'100%'}>\r\n                <VStack align={\"start\"}>\r\n                    <Text\r\n                        fontSize={\"22px\"}\r\n                        letterSpacing={1}\r\n                        fontWeight={\"medium\"}\r\n                    >\r\n                        Newest Quizzes\r\n                    </Text>\r\n                    <Flex direction={['column', 'column', 'row']} pt={5} w={\"100%\"}>\r\n                        {\r\n                            quizzes && quizzes.map((item, index) => (\r\n                                <QuizInfo quizInfo={item} key={index} mr={[0, 2, 4]}/>\r\n                            ))\r\n                        }\r\n\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n            {/*End of RecentActivity*/}\r\n            {/**/}\r\n            <Box minH={\"100px\"}></Box>\r\n            {/*Footer*/}\r\n\r\n            <Footer/>\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\Nav.js",["568","569","570","571","572","573","574","575","576","577","578","579"],"import React, {useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Flex,\r\n    Text,\r\n    IconButton,\r\n    Button,\r\n    Stack,\r\n    Collapse,\r\n    Icon,\r\n    Link,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    useColorModeValue,\r\n    useBreakpointValue,\r\n    useDisclosure, HStack, Heading, VStack, Input, FormControl, FormLabel, FormHelperText, Wrap, WrapItem, Tag,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    HamburgerIcon,\r\n    CloseIcon,\r\n    ChevronDownIcon,\r\n    ChevronRightIcon, AddIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    const {isOpen, onToggle} = useDisclosure();\r\n    const {logout,user} = useAuth();\r\n    const history = useHistory();\r\n    return (\r\n        <Box w={'100%'}>\r\n\r\n            <Flex\r\n                bg={useColorModeValue(\"white\", \"gray.800\")}\r\n                color={useColorModeValue(\"gray.600\", \"white\")}\r\n                minH={\"60px\"}\r\n                py={{base: 2}}\r\n                px={{base: 4}}\r\n                borderBottom={1}\r\n                borderStyle={\"solid\"}\r\n                borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\r\n                align={\"center\"}\r\n            >\r\n                {/*mobile toggle button*/}\r\n                <Flex\r\n                    flex={{base: 1, md: \"auto\"}}\r\n                    ml={{base: -2}}\r\n                    display={{base: \"flex\", md: \"none\"}}\r\n                >\r\n                    <IconButton\r\n                        onClick={onToggle}\r\n                        icon={\r\n                            isOpen ? (\r\n                                <CloseIcon w={3} h={3}/>\r\n                            ) : (\r\n                                <HamburgerIcon w={5} h={5}/>\r\n                            )\r\n                        }\r\n                        variant={\"ghost\"}\r\n                        aria-label={\"Toggle Navigation\"}\r\n                    />\r\n                </Flex>\r\n                <Flex\r\n                    flex={{base: 1}}\r\n                    justify={{base: \"center\", md: \"start\"}}\r\n                >\r\n                    {/*Logo Text*/}\r\n                    <Text\r\n                        textAlign={useBreakpointValue({\r\n                            base: \"center\",\r\n                            md: \"left\",\r\n                        })}\r\n                        fontFamily={\"heading\"}\r\n                        fontSize={20}\r\n                        fontWeight={\"bold\"}\r\n                        color={useColorModeValue(\"gray.800\", \"white\")}\r\n                    >\r\n                        Logo\r\n                    </Text>\r\n\r\n                    {/*Desktop Nav*/}\r\n                    <Flex display={{base: \"none\", md: \"flex\"}} ml={10}>\r\n                        <DesktopNav/>\r\n                    </Flex>\r\n                </Flex>\r\n\r\n\r\n                <Stack\r\n                    flex={{base: 1, md: 0}}\r\n                    justify={\"flex-end\"}\r\n                    direction={\"row\"}\r\n                    spacing={6}\r\n                >\r\n                    {/*Sign In */}\r\n                    {\r\n                       user != null\r\n                            ? (\r\n                                <Button\r\n                                    as={\"a\"}\r\n                                    fontSize={\"sm\"}\r\n                                    fontWeight={400}\r\n                                    variant={\"link\"}\r\n                                    href={\"#\"}\r\n                                    onClick={\r\n                                        async (e) => {\r\n                                            await logout();\r\n                                            history.push('/login');\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    {/*<RRLink to={'/login'}>*/}\r\n                                    Logout\r\n                                    {/*</RRLink>*/}\r\n                                </Button>\r\n                            ) :\r\n                            (\r\n                                <Button\r\n                                    fontSize={\"sm\"}\r\n                                    fontWeight={400}\r\n                                    onClick={\r\n                                        (e) => {\r\n                                            history.push('/login')\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    Sign In\r\n                                </Button>\r\n                            )\r\n                    }\r\n\r\n                    {/*Sign Up*/}\r\n                    {\r\n                     user == null &&\r\n                        <Button\r\n                            display={{base: \"none\", md: \"inline-flex\"}}\r\n                            fontSize={\"sm\"}\r\n                            fontWeight={600}\r\n                            color={\"white\"}\r\n                            bg={\"pink.400\"}\r\n                            _hover={{\r\n                                bg: \"pink.300\",\r\n                            }}\r\n                            onClick={() => history.push('/register')}\r\n                        >\r\n                            Sign Up\r\n                        </Button>}\r\n                </Stack>\r\n            </Flex>\r\n            {/*Mobile Nav*/}\r\n            <Collapse in={isOpen} animateOpacity>\r\n                <MobileNav/>\r\n            </Collapse>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n\r\nconst DesktopNav = () => {\r\n    const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\r\n    const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\r\n    const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\r\n\r\n    return (\r\n        <Stack direction={\"row\"} spacing={4}>\r\n            {NAV_ITEMS.map((navItem) => (\r\n                <Box key={navItem.label}>\r\n                    <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\r\n                        <PopoverTrigger>\r\n                            <Link\r\n                                p={2}\r\n                                href={navItem.href ?? \"#\"}\r\n                                fontSize={\"sm\"}\r\n                                fontWeight={500}\r\n                                color={linkColor}\r\n                                _hover={{\r\n                                    textDecoration: \"none\",\r\n                                    color: linkHoverColor,\r\n                                }}\r\n                            >\r\n                                {navItem.label}\r\n                            </Link>\r\n                        </PopoverTrigger>\r\n\r\n                        {navItem.children && (\r\n                            <PopoverContent\r\n                                border={0}\r\n                                boxShadow={\"xl\"}\r\n                                bg={popoverContentBgColor}\r\n                                p={4}\r\n                                rounded={\"xl\"}\r\n                                minW={\"sm\"}\r\n                            >\r\n                                <Stack>\r\n                                    {navItem.children.map((child) => (\r\n                                        <DesktopSubNav\r\n                                            key={child.label}\r\n                                            {...child}\r\n                                        />\r\n                                    ))}\r\n                                </Stack>\r\n                            </PopoverContent>\r\n                        )}\r\n                    </Popover>\r\n                </Box>\r\n            ))}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nconst DesktopSubNav = ({label, href, subLabel}) => {\r\n    return (\r\n        <Link\r\n            href={href}\r\n            role={\"group\"}\r\n            display={\"block\"}\r\n            p={2}\r\n            rounded={\"md\"}\r\n            _hover={{bg: useColorModeValue(\"pink.50\", \"gray.900\")}}\r\n        >\r\n            <Stack direction={\"row\"} align={\"center\"}>\r\n                <Box>\r\n                    <Text\r\n                        transition={\"all .3s ease\"}\r\n                        _groupHover={{color: \"pink.400\"}}\r\n                        fontWeight={500}\r\n                    >\r\n                        {label}\r\n                    </Text>\r\n                    <Text fontSize={\"sm\"}>{subLabel}</Text>\r\n                </Box>\r\n                <Flex\r\n                    transition={\"all .3s ease\"}\r\n                    transform={\"translateX(-10px)\"}\r\n                    opacity={0}\r\n                    _groupHover={{\r\n                        opacity: \"100%\",\r\n                        transform: \"translateX(0)\",\r\n                    }}\r\n                    justify={\"flex-end\"}\r\n                    align={\"center\"}\r\n                    flex={1}\r\n                >\r\n                    <Icon\r\n                        color={\"pink.400\"}\r\n                        w={5}\r\n                        h={5}\r\n                        as={ChevronRightIcon}\r\n                    />\r\n                </Flex>\r\n            </Stack>\r\n        </Link>\r\n    );\r\n};\r\n\r\nconst MobileNav = () => {\r\n    return (\r\n        <Stack\r\n            bg={useColorModeValue(\"white\", \"gray.800\")}\r\n            p={4}\r\n            display={{md: \"none\"}}\r\n        >\r\n            {NAV_ITEMS.map((navItem) => (\r\n                <MobileNavItem key={navItem.label} {...navItem} />\r\n            ))}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nconst MobileNavItem = ({label, children, href}) => {\r\n    const {isOpen, onToggle} = useDisclosure();\r\n\r\n    return (\r\n        <Stack spacing={4} onClick={children && onToggle}>\r\n            <Flex\r\n                py={2}\r\n                as={Link}\r\n                href={href ?? \"#\"}\r\n                justify={\"space-between\"}\r\n                align={\"center\"}\r\n                _hover={{\r\n                    textDecoration: \"none\",\r\n                }}\r\n            >\r\n                <Text\r\n                    fontWeight={600}\r\n                    color={useColorModeValue(\"gray.600\", \"gray.200\")}\r\n                >\r\n                    {label}\r\n                </Text>\r\n                {children && (\r\n                    <Icon\r\n                        as={ChevronDownIcon}\r\n                        transition={\"all .25s ease-in-out\"}\r\n                        transform={isOpen ? \"rotate(180deg)\" : \"\"}\r\n                        w={6}\r\n                        h={6}\r\n                    />\r\n                )}\r\n            </Flex>\r\n\r\n            <Collapse\r\n                in={isOpen}\r\n                animateOpacity\r\n                style={{marginTop: \"0!important\"}}\r\n            >\r\n                <Stack\r\n                    mt={2}\r\n                    pl={4}\r\n                    borderLeft={1}\r\n                    borderStyle={\"solid\"}\r\n                    borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n                    align={\"start\"}\r\n                >\r\n                    {children &&\r\n                    children.map((child) => (\r\n                        <Link key={child.label} py={2} href={child.href}>\r\n                            {child.label}\r\n                        </Link>\r\n                    ))}\r\n                </Stack>\r\n            </Collapse>\r\n        </Stack>\r\n    );\r\n};\r\n\r\ninterface NavItem {\r\n    label: string;\r\n    subLabel?: string;\r\n    children?: Array<NavItem>;\r\n    href?: string;\r\n}\r\n\r\nconst NAV_ITEMS: Array<NavItem> = [\r\n    {\r\n        label: \"Inspiration\",\r\n        children: [\r\n            {\r\n                label: \"Explore Design Work\",\r\n                subLabel: \"Trending Design to inspire you\",\r\n                href: \"#\",\r\n            },\r\n            {\r\n                label: \"New & Noteworthy\",\r\n                subLabel: \"Up-and-coming Designers\",\r\n                href: \"#\",\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        label: \"Find Work\",\r\n        children: [\r\n            {\r\n                label: \"Job Board\",\r\n                subLabel: \"Find your dream design job\",\r\n                href: \"#\",\r\n            },\r\n            {\r\n                label: \"Freelance Projects\",\r\n                subLabel: \"An exclusive list for contract work\",\r\n                href: \"#\",\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        label: \"Learn Design\",\r\n        href: \"#\",\r\n    },\r\n    {\r\n        label: \"Dasboard\",\r\n        href: \"/admin\",\r\n    },\r\n];\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\RegisterPage.js",["580","581","582","583","584"],"import React, {useState} from 'react';\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {\r\n    Box, Button, Checkbox,\r\n    Flex,\r\n    FormControl, FormHelperText,\r\n    FormLabel,\r\n    Heading,\r\n    Input,\r\n    Link,\r\n    Stack,\r\n    Text,\r\n    useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\n\r\nconst RegisterPage = () => {\r\n    const {login, getUserDetails, setUser} = useAuth();\r\n    const [username, setUsername] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const history = useHistory();\r\n\r\n    const handleSignup = async (e) => {\r\n        e.preventDefault();\r\n        const url = `${process.env.REACT_APP_BASE_URL}/auth/registration`;\r\n        let data = {\r\n            \"username\": username,\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"fullName\":fullName\r\n        };\r\n        try {\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            console.log(\"Registration success!\");\r\n            history.replace('/verification');\r\n        } catch (e) {\r\n            console.log(e.response.data.message);\r\n\r\n            setError(e.response.data.message);\r\n            return;\r\n        }\r\n\r\n\r\n    }\r\n    const validation = async (input, value) => {\r\n        const url = process.env.REACT_APP_BASE_URL + `/public/validation-input?input=${input}&value=${value}`;\r\n        try {\r\n            await axios.get(url);\r\n        } catch (e) {\r\n            const data = e.response.data;\r\n            setError(data.message);\r\n        }\r\n    }\r\n    return (\r\n        <Flex\r\n            minH={\"100vh\"}\r\n            align={\"center\"}\r\n            justify={\"center\"}\r\n            bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n        >\r\n            <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} minW={'lg'} py={12} px={6}>\r\n                <Stack align={\"center\"}>\r\n                    <Heading fontSize={\"4xl\"}>Register Account</Heading>\r\n                    <Text fontSize={\"lg\"} color={\"gray.600\"}>\r\n                        to enjoy all of our cool{\" \"}\r\n                        <Link color={\"blue.400\"}>features</Link> ✌️\r\n                    </Text>\r\n                </Stack>\r\n                <Box\r\n                    rounded={\"lg\"}\r\n                    bg={useColorModeValue(\"white\", \"gray.700\")}\r\n                    boxShadow={\"lg\"}\r\n                    p={8}\r\n                >\r\n                    {/*Form*/}\r\n                    <Stack spacing={4}>\r\n                        {/*Username*/}\r\n                        <FormControl id=\"username\">\r\n                            <FormLabel>Username</FormLabel>\r\n                            <Input\r\n                                onBlur={() => {\r\n                                    validation(\"username\", username);\r\n                                }}\r\n                                value={username}\r\n                                onChange={(e) => {\r\n                                    setError('');\r\n                                    setUsername(e.target.value);\r\n                                }}\r\n                                type='email|text'/>\r\n                            {\r\n                                error.length > 0 &&\r\n                                <FormHelperText color={'crimson'}>\r\n                                    {error}</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        {/*FullName*/}\r\n                        <FormControl id=\"fullName\">\r\n                            <FormLabel>FullName</FormLabel>\r\n                            <Input\r\n\r\n                                value={fullName}\r\n                                onChange={(e) => {\r\n                                    setError('');\r\n                                    setFullName(e.target.value);\r\n                                }}\r\n                                type='text'/>\r\n                        </FormControl>\r\n                        {/*Email*/}\r\n                        <FormControl id=\"email\">\r\n                            <FormLabel>Email address</FormLabel>\r\n                            <Input\r\n                                onBlur={() => {\r\n                                    validation(\"email\", email);\r\n                                }}\r\n                                value={email}\r\n                                onChange={(e) => {\r\n                                    setError('');\r\n                                    setEmail(e.target.value);\r\n                                }}\r\n                                type='email|text'/>\r\n\r\n                        </FormControl>\r\n                        {/*Password*/}\r\n                        <FormControl id=\"password\">\r\n                            <FormLabel>Password</FormLabel>\r\n                            <Input\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                type=\"password\"/>\r\n                        </FormControl>\r\n                        <Stack>\r\n                            <Box minH={5}/>\r\n                            <Button\r\n                                disabled={\r\n                                    (username.length === 0 || password.length === 0 || email.length === 0)\r\n                                }\r\n                                bg={\"blue.400\"}\r\n                                color={\"white\"}\r\n                                _hover={{\r\n                                    bg: \"blue.500\",\r\n                                }}\r\n                                onClick={handleSignup}\r\n                            >\r\n                                Sign up\r\n                            </Button>\r\n\r\n                        </Stack>\r\n                    </Stack>\r\n                </Box>\r\n            </Stack>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\QuizInfo.js",["585","586","587","588"],"import React, {useEffect} from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Center,\r\n    useColorModeValue,\r\n    Heading,\r\n    Text,\r\n    Stack,\r\n    Image, Tag, Badge,\r\n} from '@chakra-ui/react';\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst IMAGE =\r\n    'https://cdn-icons-png.flaticon.com/512/4193/4193243.png';\r\n\r\nconst QuizInfo = ({quizInfo, ...rest}) => {\r\n    const history = useHistory();\r\n\r\n    const handleJoinQuiz = async () => {\r\n        try {\r\n            const data = await QuizService.getQuizByCode(quizInfo.code);\r\n            console.log(data);\r\n            history.push(`/join/quiz/${quizInfo.code}`);\r\n        } catch (e) {\r\n            console.log(e.response.message);\r\n        }\r\n    }\r\n    return (\r\n        <Center {...rest} cursor={'pointer'}>\r\n            <Box\r\n                onClick={() => handleJoinQuiz()}\r\n                minW={'min'}\r\n                boxShadow={'md'}\r\n                role={'group'}\r\n                p={2}\r\n                bg={useColorModeValue('white', 'gray.800')}\r\n                // boxShadow={'2xl'}\r\n                rounded={'lg'}\r\n                pos={'relative'}\r\n                zIndex={1}>\r\n                {/*Image*/}\r\n                <Box\r\n                    rounded={'lg'}\r\n                    pos={'relative'}\r\n\r\n                >\r\n                    <Image\r\n                        p={2}\r\n                        rounded={'lg'}\r\n                        height={160}\r\n                        width={160}\r\n                        objectFit={'cover'}\r\n                        src={IMAGE}\r\n                    />\r\n                </Box>\r\n                {/*End of Image*/}\r\n\r\n                <Stack align={'center'} pb={2}>\r\n                    {/*<Text color={'gray.500'} fontSize={'sm'} textTransform={'uppercase'}>*/}\r\n                    {/*    Brand*/}\r\n                    {/*</Text>*/}\r\n                    <Badge colorScheme={'purple'}>{quizInfo.subject || ''}</Badge>\r\n                    <Heading fontSize={'md'} fontFamily={'body'} fontWeight={500}>\r\n                        {quizInfo.title}\r\n                    </Heading>\r\n                    {/*<Stack direction={'row'} align={'center'}>*/}\r\n                    {/*    <Text fontWeight={800} fontSize={'xl'}>*/}\r\n                    {/*        $57*/}\r\n                    {/*    </Text>*/}\r\n                    {/*    <Text textDecoration={'line-through'} color={'gray.600'}>*/}\r\n                    {/*        $199*/}\r\n                    {/*    </Text>*/}\r\n                    {/*</Stack>*/}\r\n                </Stack>\r\n\r\n                {/*<Box bg={'red'} top={0} left={5} position={'absolute'}>*/}\r\n                {/*    df*/}\r\n                {/*</Box>*/}\r\n            </Box>\r\n        </Center>\r\n    );\r\n};\r\nexport default QuizInfo;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\NotFoundQuiz.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\quiz_info\\JoinQuizInfo.js",["589","590","591","592","593","594","595","596","597"],"import React, {useEffect, useState} from 'react';\r\nimport {Box, Button, ButtonGroup, CircularProgress, Flex, Heading, HStack, Text, VStack} from \"@chakra-ui/react\";\r\nimport {AiOutlineFieldNumber, RiNumbersFill, RiNumbersLine} from \"react-icons/all\";\r\nimport {TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst JoinQuizInfo = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const history = useHistory();\r\n    const {code} = useParams();\r\n    const {foundedQuiz, setFoundedQuiz, setDirectUrl} = useQuiz();\r\n    const {user} = useAuth();\r\n\r\n\r\n    useEffect(async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await QuizService.getQuizByCode(code);\r\n            setFoundedQuiz(data.data);\r\n            console.log(data.data);\r\n\r\n        } catch (e) {\r\n            console.log(e.response.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    //handle button start\r\n    const onStart = async () => {\r\n        try {\r\n            const data = await QuizService.getQuizQuestions(code);\r\n            setFoundedQuiz(prev => ({\r\n                ...prev,\r\n                questions: data.data\r\n            }))\r\n            console.log(foundedQuiz);\r\n            history.push(`/join/quiz/${code}/start`);\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const onCancel = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <Box bg={'blue.100'} minH={'100vh'}>\r\n            {isLoading && <>\r\n                <Box position={'fixed'}\r\n                     top={'50%'}\r\n                     right={'50%'}\r\n                     minH={'100vh'}\r\n                     minW={'100vw'}\r\n                     zIndex={900}\r\n                     opacity={0.5}\r\n                     bg={'gray.100'}\r\n                     transform={\"translate(50%,-50%)\"}/>\r\n                <CircularProgress\r\n                    position={'fixed'}\r\n                    top={'50%'}\r\n                    right={'50%'}\r\n                    isIndeterminate\r\n                    zIndex={901}\r\n                    transform={\"translate(50%,-50%)\"}\r\n                    value={30}\r\n                    color=\"orange.400\" thickness=\"12px\"/>\r\n            </>}\r\n            {!isLoading && <Flex w={'100%'} direction={'column'}>\r\n                <Box>\r\n                    <VStack pt={10}>\r\n                        {/*INFO*/}\r\n                        <Box w={500} minW={200} bg={'white'} p={10} textAlign={'start'}>\r\n                            <VStack alignItems={'start'} textAlign={'start'}>\r\n                                <Box my={4}>\r\n                                    <Heading fontSize={20}>{foundedQuiz.title}</Heading>\r\n                                </Box>\r\n                                <HStack spacing={5}>\r\n                                    <Button leftIcon={<RiNumbersLine/>}>\r\n                                        <Text>{foundedQuiz.numOfQuestions} question</Text>\r\n                                    </Button>\r\n                                    <Button leftIcon={<TimeIcon/>}>\r\n                                        <Text>{foundedQuiz.limitTime} mins </Text>\r\n                                    </Button>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                        {/*  ACTION BUTTONS*/}\r\n                        <VStack w={500} p={10} bg={'white'} minW={'200px'} spacing={8}>\r\n                            <Button\r\n                                onClick={onStart}\r\n                                size={'lg'}\r\n                                w={'100%'}\r\n                                colorScheme={'teal'}>\r\n                                Start\r\n                            </Button>\r\n                            <Button size={'lg'} w={'100%'} colorScheme={'blue'}>Share</Button>\r\n                            <Button onClick={onCancel} size={'lg'} w={'100%'} colorScheme={'gray'}>Cancel</Button>\r\n                        </VStack>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default JoinQuizInfo;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\StartQuiz.js",["598","599","600","601","602","603","604","605","606","607","608","609"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport SubmitReportEntry from \"./SubmitReportEntry\";\r\nimport format from 'dateformat';\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {code} = useParams();\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [report, setReport] = useState(null);\r\n    const cancelRef = useRef();\r\n    const {user} = useAuth();\r\n    const [submitContent, setSubmitContent] = useState({answers: []});\r\n    const history = useHistory();\r\n\r\n    useEffect(async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (!foundedQuiz) {\r\n                    const quizInfo = await getQuizInfo();\r\n                    setFoundedQuiz(quizInfo);\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: quizInfo.id,\r\n                        startTime: new Date()\r\n                    }))\r\n                } else {\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: foundedQuiz.id, startTime: new Date()\r\n\r\n                    }))\r\n                }\r\n                if ((foundedQuiz && !foundedQuiz.questions) || (!foundedQuiz)) {\r\n                    const questions = await getQuizQuestions();\r\n                    setFoundedQuiz(prev => ({\r\n                        ...prev,\r\n                        questions: questions\r\n                    }))\r\n                }\r\n\r\n            } catch (e) {\r\n\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n\r\n            setLoading(false);\r\n        }\r\n        , []);\r\n\r\n\r\n    const getQuizInfo = async () => {\r\n        console.log(\"get quiz info\")\r\n        const data = await QuizService.getQuizByCode(code);\r\n        return data.data;\r\n    }\r\n    const getQuizQuestions = async () => {\r\n        console.log('get quiz\\'s questions')\r\n        const questions = await QuizService.getQuizQuestions(code);\r\n\r\n        return questions.data;\r\n    }\r\n\r\n    const onCheckOption = (e, question, option) => {\r\n        if (e.target.checked) {\r\n            if ((submitContent.answers.filter((item) => item.questionId === question.questionId)).length > 0) {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => item.questionId !== question.questionId ? item : {\r\n                        ...item,\r\n                        options: [\r\n                            ...new Set([...item.options,\r\n                                option.optionId])\r\n                        ]\r\n                    })\r\n                }))\r\n            }\r\n            //\r\n            else {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: [...prev.answers, {\r\n                        questionId: question.questionId,\r\n                        options: [\r\n                            option.optionId\r\n                        ]\r\n                    }]\r\n                }))\r\n            }\r\n        } else {\r\n            setSubmitContent((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => {\r\n                            // item.questionId !== question.questionId ? item : {\r\n                            //     ...item,\r\n                            //     options: [\r\n                            //         ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                            //     ]\r\n                            // }\r\n                            if (item.questionId !== question.questionId) {\r\n                                return item;\r\n                            } else {\r\n                                // let mOptions = item.options.filter(optionId => optionId !== option.optionId);\r\n                                // return {\r\n                                //     ...item,\r\n                                //     options: [\r\n                                //         ...new Set(mOptions)\r\n                                //     ]\r\n                                // }\r\n                                return ({\r\n                                    ...item,\r\n                                    options: [\r\n                                        ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                                    ]\r\n                                })\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const submitAnswers = async () => {\r\n        const data = await QuizService.submissionAnswers(JSON.stringify(submitContent));\r\n        setReport(data.data);\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <Flex direction={'column'} bg={'blue.100'}>\r\n            <CustomAlertDialog\r\n                title={'Submit answers'}\r\n                description={'Are you sure? You can\\'t undo this action afterwards.'}\r\n                isOpen={isOpen}\r\n                setOpen={setOpen}\r\n                cancelRef={cancelRef}\r\n                onSubmit={() => submitAnswers()}\r\n            />\r\n            {/*QUIZ SUBMIT ANSWERS REPORT*/}\r\n            {report && <Box bg={''} mx={'5'} mt={'5'} p={5}>\r\n                <Heading>Submit Report</Heading>\r\n                <SimpleGrid spacing={5} columns={'4'} py={5}>\r\n                    <SubmitReportEntry title={'score'} content={`${report.score}/${report.totalScore}`}/>\r\n                    <SubmitReportEntry title={'questions'}\r\n                                       content={`${report.submitQuestionsCount}/${report.numOfQuestions}`}/>\r\n                    <SubmitReportEntry title={'startTime'} content={`${format(report.startTime, \"dd-mm hh:MM\")}`}/>\r\n                    <SubmitReportEntry title={'finishTime'} content={`${format(report.finishTime, \"dd-mm hh:MM\")}`}/>\r\n                </SimpleGrid>\r\n            </Box>}\r\n\r\n            <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n                 align={'center'}>\r\n                {\r\n                    !isLoading && <Box\r\n                        bg={'white'}\r\n                        borderRadius={'md'}\r\n                        boxShadow={'xl'}\r\n                        minH={'100vh'}\r\n                        maxW={'860px'}\r\n                        p={10}>\r\n                        <VStack position={'relative'}>\r\n\r\n                            {/*\r\n                           QUIZ TITLE\r\n                           */}\r\n                            <Heading\r\n                                pb={10}\r\n                                color={'purple.600'}\r\n                                fontSize={30}>\r\n                                {foundedQuiz != null ? foundedQuiz.title : ''}\r\n                            </Heading>\r\n                            {/*NUMBER OF QUESTIONS*/}\r\n                            <Text\r\n                                fontWeight={'medium'}\r\n                                color={'teal'}\r\n                                letterSpacing={1}\r\n                                fontStyle={'italic'}\r\n                                position={'absolute'}\r\n                                top={0}\r\n                                right={0}\r\n                                m={5}>\r\n                                {foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.length} Questions\r\n                            </Text>\r\n                            {/*QUESTIONS*/}\r\n                            {\r\n                                foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.map((question, i) => (\r\n                                    <VStack\r\n                                        w={'100%'}\r\n                                        align={'start'}\r\n                                        textAlign={'start'} key={i}\r\n                                        p={2}\r\n                                        spacing={5}>\r\n                                        {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                        <Container w={'100%'} maxW=\"4xl\">\r\n                                            <Box maxW=\"4xl\">\r\n                                                <Text fontWeight={'medium'} fontSize={20} color={'purple.900'}>\r\n                                                    {i + 1}. {question.title} \\t QuestionID : {question.questionId}\r\n                                                </Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        {/*OPTIONS*/}\r\n                                        <SimpleGrid\r\n                                            w={'100%'}\r\n                                            columns={2}\r\n                                            spacing={4}\r\n                                            align={'start'}\r\n                                            textAlign={'start'}>\r\n                                            {\r\n                                                question.options.map((option, i) => {\r\n                                                    let filterElement = submitContent.answers.filter(v => v['questionId'] === question.questionId)[0];\r\n                                                    return (\r\n                                                        <Container\r\n                                                            w={'100%'}\r\n                                                            minW={300}\r\n                                                            key={i}\r\n                                                            // maxW=\"xl\"\r\n                                                            align={'start'}\r\n                                                            textAlign={'start'}\r\n                                                            alignItems={'start'}\r\n                                                        >\r\n                                                            <Box\r\n                                                                padding={1}\r\n                                                                // maxW=\"3xl\"\r\n                                                            >\r\n                                                                <Checkbox\r\n                                                                    isDisabled={report !== null}\r\n                                                                    defaultChecked={\r\n                                                                        filterElement &&\r\n                                                                        filterElement.options.filter(o => o === option.optionId)[0]\r\n                                                                    }\r\n                                                                    onChange={(e) => onCheckOption(e, question, option)}\r\n                                                                    value={option.optionId}\r\n                                                                    colorScheme={'teal'}\r\n                                                                    size={'lg'}>\r\n                                                                    {option.content} \\t OptionID : {option.optionId}\r\n                                                                </Checkbox>\r\n                                                            </Box>\r\n                                                        </Container>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                        <Divider/>\r\n                                    </VStack>\r\n                                ))\r\n                            }\r\n                            {/* Submit button*/}\r\n                            <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                <Button\r\n                                    isDisabled={report !== null}\r\n                                    onClick={() => {\r\n                                        setOpen(true)\r\n                                        setSubmitContent((prevState => ({\r\n                                            ...prevState,\r\n                                            finishTime: new Date(),\r\n                                        })))\r\n                                    }}\r\n                                    alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                            </Box>\r\n                        </VStack>\r\n\r\n                        {/* FIXED CONTENTS*/}\r\n                        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                            <Tooltip label={\"Scroll to top\"}>\r\n                                <IconButton\r\n                                    onClick={() => window.scrollTo(0, 0)}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowUpIcon/>}/>\r\n                            </Tooltip>\r\n                            <Tooltip label={\"Scroll to bottom\"}>\r\n                                <IconButton\r\n                                    // aria-label={\"\"}\r\n                                    onClick={() => {\r\n                                        // pageRef.current.scrollIntoView({\r\n                                        //     behavior: \"smooth\",\r\n                                        //     block: \"end\",\r\n                                        //     inline: \"nearest\"\r\n                                        // })\r\n                                    }}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowDownIcon/>}/>\r\n                            </Tooltip>\r\n                        </HStack>\r\n                        {report === null && <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                            <Button\r\n                                isDisabled={report !== null}\r\n                                size={'md'} colorScheme={'teal'} variant={'outline'}\r\n                                leftIcon={<TimeIcon/>}>{foundedQuiz.limitTime || 'No Time Limit'}{' '}\r\n                                left</Button>\r\n                        </Flex>}\r\n                    </Box>\r\n\r\n\r\n                }\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\CustomAlertDialog.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\LibraryPage.js",["610","611","612","613","614","615","616","617","618","619","620","621"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assigned\\AssignedQuizPage.js",["622","623","624"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Badge,\r\n    Box, Button,\r\n    Divider,\r\n    Heading,\r\n    HStack,\r\n    Table,\r\n    TableCaption,\r\n    Tbody,\r\n    Td,\r\n    Text,\r\n    Th,\r\n    Thead, Tooltip,\r\n    Tr\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport dateFormat from 'dateformat';\r\n\r\nconst AssignedQuizPage = () => {\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [assignedQuizzes, setAssignedQuiz] = useState([]);\r\n    useEffect(() => {\r\n        console.log('use effect assign quiz');\r\n        try {\r\n            setLoading(true);\r\n            axios.get('http://localhost:8080/api/v1/member/quizzes/assigned-quizzes', {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\r\n                }\r\n            })\r\n                .then((resp) => {\r\n                    if (resp.status === 200) {\r\n                        console.log(resp.data);\r\n                        setAssignedQuiz(resp.data);\r\n                        setLoading(false);\r\n                    }\r\n                })\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n    const formatDate = (start, end) => {\r\n        const from = dateFormat(start, \"dddd, mmmm, yyyy\");\r\n        const to = dateFormat(end, \"dddd, mmmm, yyyy, h:MM:ss TT\");\r\n        return from + \"\\t-\\t\" + to;\r\n\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Heading textAlign={'center'}>Assigned quizess</Heading>\r\n            <Divider my={5}/>\r\n\r\n            <Table size={'lg'} variant={'striped'} colorScheme={'blue'}>\r\n                <Thead>\r\n                    <Tr>\r\n                        <Th>No</Th>\r\n                        <Th>Quiz Name</Th>\r\n                        <Th>Deadline</Th>\r\n                        <Th>Action</Th>\r\n                    </Tr>\r\n                </Thead>\r\n\r\n                <Tbody>\r\n\r\n                    {\r\n                        assignedQuizzes.length == 0 && <Tr>\r\n                            <Td colSpan={4} py={5} my={5}>\r\n                                Your dont have any assigned quiz\r\n                            </Td>\r\n                        </Tr>\r\n\r\n                    }\r\n                    {\r\n                        assignedQuizzes.length > 0 &&\r\n                        assignedQuizzes.map((assignmentInfo, index) => (\r\n                            <Tr key={index}>\r\n                                <Td>1</Td>\r\n                                <Td>\r\n                                    <HStack>\r\n                                        <Text>        {assignmentInfo.quizDetails.title}  </Text>\r\n                                        <Badge ml=\"1\" colorScheme=\"green\">\r\n                                            New\r\n                                        </Badge>\r\n                                        {/*<Text bg={'teal.700'} px={2} color={'white'} fontSize={'sm'}>new</Text>*/}\r\n                                    </HStack>\r\n                                </Td>\r\n                                <Td>\r\n                                    <Tooltip\r\n                                        label={\r\n                                            // dateFormat(assignmentInfo.finishDate, \"dddd, mmmm, yyyy, h:MM:ss TT\")\r\n                                            formatDate(assignmentInfo.startDate, assignmentInfo.finishDate)\r\n                                        }>\r\n                                        <Text>\r\n                                            {assignmentInfo.finishDate\r\n                                                ? dateFormat(assignmentInfo.finishDate, \"dd, mmmm, yyyy, h:MM TT\")\r\n                                                : \"No Deadline\"\r\n                                            }\r\n                                        </Text>\r\n                                    </Tooltip>\r\n\r\n                                </Td>\r\n\r\n                                <Td>\r\n                                    <Button colorScheme={'blue'}>\r\n                                        Take\r\n                                    </Button>\r\n                                </Td>\r\n\r\n                            </Tr>\r\n                        ))\r\n                    }\r\n\r\n                </Tbody>\r\n                {\r\n                    assignedQuizzes.length > 0 && <TableCaption>Assigned Quizzes</TableCaption>\r\n                }\r\n\r\n            </Table>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignedQuizPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\AssignedUsers.js",["625","626","627","628","629"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Button, Divider, HStack, Icon, IconButton, ListItem,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, OrderedList, Spacer, Text,\r\n    useDisclosure, VStack\r\n} from \"@chakra-ui/react\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport axios from \"axios\";\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\nimport {FaUsers} from \"react-icons/all\";\r\n\r\nconst AssignedUsers = ({isOpen, quizId, setOpen}) => {\r\n\r\n    const [users, setUsers] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.log(\"ASSIGNED \")\r\n        const fetchUsers = async () => {\r\n            console.log(\"get userss\")\r\n            try {\r\n                const resp = await axios.get(`http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/${quizId}/users`, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                    }\r\n                })\r\n                if (resp.status === 200) {\r\n                    setUsers(resp.data);\r\n                    console.log(resp.data);\r\n                }\r\n            } catch (e) {\r\n                console.log(\"Failed to fetch assigned users \", e);\r\n            }\r\n        }\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const onRemoveUser = async (userId) => {\r\n        console.log(\"removing...\")\r\n        try {\r\n            console.log(\"removing...1\")\r\n\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes?uid=${userId}&qid=${quizId}`;\r\n            const response = await axios.delete(url, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                },\r\n\r\n            })\r\n            if (response.status === 200) {\r\n                const filteredList = users.filter(user => user.userId != userId);\r\n                setUsers(filteredList);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Failed to remove assigned user \", e)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Modal size={'md'} onClose={() => {\r\n            }} scrollBehavior={'inside'} closeOnOverlayClick={true} isOpen={isOpen}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader\r\n                        //     style={{\r\n                        //     fontSize:10,\r\n                        // }}\r\n                    >\r\n                        <VStack w={'100%'} align={'start'}>\r\n                            <HStack>\r\n                                <Text fontSize={15} fontWeight={'medium'}>Assigned Users ({users&&users.length})</Text>\r\n                                <FaUsers/>\r\n                            </HStack>\r\n                            <Divider/>\r\n                        </VStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton onClick={() => setOpen(false)}/>\r\n                    <ModalBody>\r\n                        <OrderedList>\r\n                            {\r\n                                users && users.map((user, i) => (\r\n                                    <ListItem key={user.email}>\r\n                                        <HStack w={'100%'}>\r\n                                            <Text>{user.email}</Text>\r\n                                            <Spacer/>\r\n                                            <IconButton\r\n                                                onClick={() => onRemoveUser(user.userId)}\r\n                                                bg={'white'} color={'gray.500'} icon={<DeleteIcon/>}/>\r\n                                        </HStack>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n\r\n                        </OrderedList>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        {/*<Button colorScheme=\"blue\" mr={3}>*/}\r\n                        {/*    Save*/}\r\n                        {/*</Button>*/}\r\n                        <Button onClick={() => setOpen(false)}>Close</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignedUsers;","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AdminSettingProvider.js",["630","631"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\Admin.js",["632","633","634"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\SidebarWithHeader.js",["635","636","637","638","639","640","641","642","643","644","645","646"],"import React, {ReactNode, useContext} from \"react\";\r\nimport {\r\n    IconButton,\r\n    Avatar,\r\n    Box,\r\n    CloseButton,\r\n    Flex,\r\n    HStack,\r\n    VStack,\r\n    Icon,\r\n    useColorModeValue,\r\n    Link,\r\n    Drawer,\r\n    DrawerContent,\r\n    Text,\r\n    useDisclosure,\r\n    BoxProps,\r\n    FlexProps,\r\n    Menu,\r\n    MenuButton,\r\n    MenuDivider,\r\n    MenuItem,\r\n    MenuList, Button, Center,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    FiHome,\r\n    FiTrendingUp,\r\n    FiCompass,\r\n    FiStar,\r\n    FiSettings,\r\n    FiMenu,\r\n    FiBell,\r\n    FiChevronDown,\r\n} from \"react-icons/fi\";\r\nimport {IconType} from \"react-icons\";\r\nimport {ReactText} from \"react\";\r\nimport {AddIcon, PlusSquareIcon} from \"@chakra-ui/icons\";\r\nimport {useHistory, Link as RLink, NavLink} from \"react-router-dom\";\r\nimport {useAdmin, useAuth} from \"../../hooks/useAuth\";\r\nimport {FcLibrary, HiOutlineLibrary} from \"react-icons/all\";\r\nimport {AdminContext} from \"../../providers/AdminSettingProvider\";\r\nimport AppService from \"../../service/AppService\";\r\n\r\n\r\nconst LinkItems = [\r\n    //window.location.pathname\r\n    {name: \"Assigned Quiz\", icon: FiHome, href: \"/admin/assigned\"},\r\n    {name: \"Report\", icon: FiTrendingUp, href: \"/admin/report\"},\r\n    {name: \"Library\", icon: HiOutlineLibrary, href: \"/admin/library\"},\r\n    {name: \"Explore\", icon: FiCompass, href: \"/admin/explore\"},\r\n    {name: \"Favourites\", icon: FiStar, href: \"/admin/favourites\"},\r\n    {name: \"Settings\", icon: FiSettings, href: \"/admin/setting\"},\r\n];\r\n\r\nexport default function SidebarWithHeader({children}) {\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const {user} = useAuth();\r\n    const {fullMode} = useAdmin();\r\n    return (\r\n        <>\r\n\r\n            {\r\n                !fullMode && <Box minH=\"100vh\" bg={'gray.100'}>\r\n                    <SidebarContent\r\n                        onClose={() => onClose}\r\n                        display={{base: \"none\", md: \"block\"}}\r\n                    />\r\n                    <Drawer\r\n                        autoFocus={false}\r\n                        isOpen={isOpen}\r\n                        placement=\"left\"\r\n                        onClose={onClose}\r\n                        returnFocusOnClose={false}\r\n                        onOverlayClick={onClose}\r\n                        size=\"full\"\r\n                    >\r\n                        <DrawerContent>\r\n                            <SidebarContent onClose={onClose}/>\r\n                        </DrawerContent>\r\n                    </Drawer>\r\n                    {/* mobilenav */}\r\n                    <MobileNav onOpen={onOpen} avt={user.avt}/>\r\n                    <Box ml={{base: 0, md: 60}} p=\"4\">\r\n                        {children}\r\n                    </Box>\r\n                </Box>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst SidebarContent = ({onClose, ...rest}) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Box\r\n            transition=\"3s ease\"\r\n            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n            borderRight=\"1px\"\r\n            borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n            w={{base: \"full\", md: 60}}\r\n            pos=\"fixed\"\r\n            h=\"full\"\r\n            {...rest}\r\n        >\r\n            <Flex\r\n                h=\"20\"\r\n                alignItems=\"center\"\r\n                mx=\"8\"\r\n                justifyContent=\"space-between\"\r\n            >\r\n                <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\" cursor={'pointer'} onClick={\r\n                    () => history.replace('/')\r\n                }>\r\n                    Logo\r\n                </Text>\r\n                <CloseButton\r\n                    display={{base: \"flex\", md: \"none\"}}\r\n                    onClick={onClose}\r\n                />\r\n            </Flex>\r\n            {LinkItems.map((link, index) => (\r\n                <NavItem link={link.href} key={index} icon={link.icon}>\r\n                    {link.name}\r\n                </NavItem>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\n\r\nconst NavItem = ({icon, children, link, ...rest}) => {\r\n    return (\r\n        <NavLink\r\n            // href={link}\r\n            activeStyle={{\r\n                color: 'blueviolet',\r\n                fontWeight: 'bold',\r\n                textDecoration: 'underline'\r\n            }}\r\n            activeClassName=\"navUl__active\"\r\n            to={link}\r\n            style={{textDecoration: \"none\"}}>\r\n            <Flex\r\n                // bg={window.location.pathname===link?'teal':'white'}\r\n                align=\"center\"\r\n                p=\"4\"\r\n                mx=\"4\"\r\n                borderRadius=\"lg\"\r\n                role=\"group\"\r\n                cursor=\"pointer\"\r\n                _hover={{\r\n                    bg: \"cyan.400\",\r\n                    color: \"white\",\r\n                }}\r\n                {...rest}\r\n            >\r\n                {icon && (\r\n                    <Icon\r\n                        mr=\"4\"\r\n                        fontSize=\"16\"\r\n                        _groupHover={{\r\n                            color: \"white\",\r\n                        }}\r\n                        as={icon}\r\n                    />\r\n                )}\r\n                {children}\r\n            </Flex>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nconst MobileNav = ({onOpen, avt, ...rest}) => {\r\n    const history = useHistory();\r\n    const {logout, user} = useAuth();\r\n    return (\r\n        <Flex\r\n            ml={{base: 0, md: 60}}\r\n            px={{base: 4, md: 4}}\r\n            height=\"20\"\r\n            alignItems=\"center\"\r\n            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n            borderBottomWidth=\"1px\"\r\n            borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n            justifyContent={{base: \"space-between\", md: \"flex-end\"}}\r\n            {...rest}\r\n        >\r\n            <IconButton\r\n                display={{base: \"flex\", md: \"none\"}}\r\n                onClick={onOpen}\r\n                variant=\"outline\"\r\n                aria-label=\"open menu\"\r\n                icon={<FiMenu/>}\r\n            />\r\n\r\n            <Text\r\n                display={{base: \"flex\", md: \"none\"}}\r\n                fontSize=\"2xl\"\r\n                fontFamily=\"monospace\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                Logo\r\n            </Text>\r\n\r\n            <HStack spacing={{base: \"0\", md: \"6\"}}>\r\n\r\n                <Button\r\n                    onClick={() => {\r\n                        history.push(\"/admin/quiz/new\")\r\n                    }}\r\n                    colorScheme={'teal'} leftIcon={<AddIcon/>}>\r\n                    Create Quiz\r\n                </Button>\r\n                <IconButton\r\n                    size=\"lg\"\r\n                    variant=\"ghost\"\r\n                    aria-label=\"open menu\"\r\n                    icon={<FiBell/>}\r\n                />\r\n                <Flex alignItems={\"center\"}>\r\n                    <Menu>\r\n                        <MenuButton\r\n                            py={2}\r\n                            transition=\"all 0.3s\"\r\n                            _focus={{boxShadow: \"none\"}}\r\n                        >\r\n                            <HStack>\r\n\r\n                                <Avatar\r\n                                    size={\"sm\"}\r\n                                    src={\r\n                                        AppService.getImage(user.avt) || \"https://images.unsplash.com/photo-1619946794135-5bc917a27793?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=b616b2c5b373a80ffc9636ba24f7a4a9\"\r\n                                    }\r\n                                />\r\n                                <VStack\r\n                                    display={{base: \"none\", md: \"flex\"}}\r\n                                    alignItems=\"flex-start\"\r\n                                    spacing=\"1px\"\r\n                                    ml=\"2\"\r\n                                >\r\n                                    {/*USERNAME*/}\r\n                                    <Text fontSize=\"sm\">{user.username}</Text>\r\n                                    {/*ROLE*/}\r\n                                    <Text fontSize=\"xs\" color=\"gray.600\">\r\n                                        {/*{user.roles[0].name === \"ROLE_ADMIN\" ? \"Teacher\" : \"Student\"}*/}\r\n                                        Student\r\n                                    </Text>\r\n                                </VStack>\r\n                                <Box display={{base: \"none\", md: \"flex\"}}>\r\n                                    <FiChevronDown/>\r\n                                </Box>\r\n                            </HStack>\r\n                        </MenuButton>\r\n                        <MenuList\r\n                            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n                            borderColor={useColorModeValue(\r\n                                \"gray.200\",\r\n                                \"gray.700\"\r\n                            )}\r\n                        >\r\n                            <MenuItem>Profile</MenuItem>\r\n                            <MenuItem>Settings</MenuItem>\r\n                            <MenuItem>Billing</MenuItem>\r\n                            <MenuDivider/>\r\n                            <MenuItem onClick={() => {\r\n                                logout();\r\n                                history.replace('/login')\r\n                            }}>Sign out</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </Flex>\r\n            </HStack>\r\n        </Flex>\r\n    );\r\n};\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\QuizEditor.js",["647","648","649","650"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizEditProvider.js",["651"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\NewQuestionDialog.js",["652","653","654"],"import React, {useContext, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\n\r\nconst NewQuestionDialog = ({visible, setVisible, size, setSize}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState({title: '', options: [{}, {}]});\r\n    const [options, setOptions] = useState([{}, {}]);\r\n\r\n    const onTitleChange = (e) => {\r\n        setQuestion((prev) => ({\r\n            ...prev,\r\n            title: e.target.value,\r\n            id: Date.now()\r\n        }))\r\n    }\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === question.options.length - 1 && e.target.value.length > 0) {\r\n            setQuestion((prev) => ({\r\n                ...prev,\r\n                options: [...prev.options, {}]\r\n            }))\r\n        }\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((option, i) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...option,\r\n                        content: e.target.value,\r\n                        id: Date.now()\r\n                    }\r\n                }\r\n                return option;\r\n            })\r\n        }))\r\n    }\r\n    const onSaveOption = async () => {\r\n        //check question have title\r\n        if (!question || !question.title || question.title.length === 0) {\r\n            return toast({\r\n                title: `Your question does not have title!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        //check question have question\r\n        if (!question.options[0] || !question.options[0].content || !question.options[0].content.length === 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 or 2 options!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n\r\n        let score = 0;\r\n        for (const option of question.options) {\r\n            if (option && option.score) {\r\n                score += option.score;\r\n            }\r\n        }\r\n        if (score === 0) {\r\n            return toast({\r\n                title: `Your question must have at least 1 true option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n\r\n        let modifiedQuestion = {\r\n            ...question,\r\n            options: question.options.filter((option) => option.content && option.content.length > 0)\r\n        };\r\n        // //add question to quiz\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            questions: [...prev.questions, modifiedQuestion]\r\n        }))\r\n        setQuestion({\r\n            title: '',\r\n            options: [{}, {}]\r\n        });\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setQuestion({\r\n                    title: '',\r\n                    options: [{}, {}]\r\n                })\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text> New Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n                            {/*QUESTION TITLE INPUT*/}\r\n                            <Textarea\r\n                                // onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                onChange={onTitleChange}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                question.options.map((option, index) => {\r\n                                    let handleScoreChange = (e) => {\r\n                                        setQuestion((prev) => (\r\n                                            {\r\n                                                ...prev,\r\n                                                options: prev.options\r\n                                                    .map((option, i) =>\r\n                                                        i === index ? {\r\n                                                            ...option,\r\n                                                            score: parseFloat(e.target.value)\r\n                                                        } : option)\r\n                                            }\r\n                                        ))\r\n                                    };\r\n                                    return (\r\n                                        <HStack key={index} w={'100%'}>\r\n                                            <Select\r\n                                                onChange={handleScoreChange}\r\n                                                bg={'gray.200'}\r\n                                                // defaultValue={0}\r\n                                                placeholder='score'\r\n                                                maxW={'100px'}>\r\n                                                {\r\n                                                    [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                        <option key={i} value={item}>{item}</option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                            <Input\r\n                                                borderWidth={(option.score && option.score > 0) ? 1.5 : 1}\r\n                                                borderColor={option.score && option.score > 0 && 'green'}\r\n                                                color={option.score && option.score > 0 && 'green'}\r\n                                                focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                                colorScheme={'blue'}\r\n                                                onChange={(e) => onOptionChange(e, index)}\r\n                                                key={index}\r\n                                                placeholder={\"option\"}/>\r\n                                        </HStack>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setQuestion({\r\n                                title: '',\r\n                                options: [{}, {}]\r\n                            })\r\n                        }}>Close</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Add</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewQuestionDialog;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\QuizEditDialog.js",["655","656","657"],"import React, {useContext, useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Button,\r\n    FormControl, FormLabel, Input,\r\n    Modal,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select\r\n} from \"@chakra-ui/react\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport SubjectService from \"../../../../service/SubjectService\";\r\n\r\nconst QuizEditDialog = ({isOpen, setOpen}) => {\r\n\r\n    const {quiz, setQuiz, isLoading, setLoading, handleSaveQuiz} = useContext(QuizEditContext);\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [organizations, setOrganizations] = useState([]);\r\n    const initialRef = useRef();\r\n    const finalRef = useRef();\r\n    useEffect(() => {\r\n        getSubject();\r\n    }, [])\r\n\r\n    const getSubject = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const resp = await SubjectService.getSubjects();\r\n            setSubjects(resp.data);\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const changeSubject = (e) => {\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            subject: {\r\n                title: (e.target.value)\r\n            }\r\n        }))\r\n    }\r\n    const onSaveChange = async (e) => {\r\n        e.preventDefault();\r\n        console.log(quiz.subject.id)\r\n        await handleSaveQuiz();\r\n        setOpen(false);\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                initialFocusRef={initialRef}\r\n                finalFocusRef={finalRef}\r\n                isOpen={isOpen}\r\n                onClose={() => setOpen(false)}\r\n            >\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>Edit Quiz</ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <ModalBody pb={6}>\r\n                        <FormControl>\r\n                            <FormLabel>Quiz title</FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    const value = e.target.value;\r\n                                    setQuiz((prev) => ({\r\n                                            ...prev, title: value\r\n                                        }\r\n                                    ))\r\n                                }}\r\n                                value={quiz.title}\r\n                                ref={initialRef} placeholder=\"Quiz title\"/>\r\n                        </FormControl>\r\n\r\n\r\n                        <FormControl mt={4}>\r\n                            <FormLabel>Subject</FormLabel>\r\n                            <Select\r\n                                onChange={(e) => {\r\n                                    changeSubject(e);\r\n                                }}\r\n                                value={quiz.subject.title}\r\n                                defaultValue={quiz.subject.title}\r\n                                size={'sm'}>\r\n                                {!isLoading && subjects && subjects.map(item => (\r\n                                    <option key={item.id} value={item.title}>{item.title}</option>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button\r\n                            onClick={(e) => onSaveChange(e)}\r\n                            colorScheme=\"blue\" mr={3}>\r\n                            Save\r\n                        </Button>\r\n                        <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuizEditDialog;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\EditQuestionDialog.js",["658","659","660","661","662"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack, IconButton,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen, CgRemove} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst EditQuestionDialog = ({visible, setVisible, size, setSize, selectedQuestion}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState({title: '', options: [{}, {}]});\r\n    const [options, setOptions] = useState([{}, {}]);\r\n    const [removeOptionIds, setRemoveOptionIds] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setQuestion(selectedQuestion);\r\n    }, [])\r\n    const onTitleChange = (e) => {\r\n        setQuestion((prev) => ({\r\n            ...prev,\r\n            title: e.target.value,\r\n        }))\r\n    }\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === question.options.length - 1 && e.target.value.length > 0) {\r\n            setQuestion((prev) => ({\r\n                ...prev,\r\n                options: [...prev.options, {id: Date.now()}]\r\n            }))\r\n        }\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((option, i) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...option,\r\n                        content: e.target.value,\r\n                        id: option.id ? option.id : Date.now()\r\n                    }\r\n                }\r\n                return option;\r\n            })\r\n        }))\r\n    }\r\n    const onSaveOption = async () => {\r\n        //check question have title\r\n        if (!question || !question.title || question.title.length === 0) {\r\n            return toast({\r\n                title: `Your question does not have title!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        //check question have question\r\n        if (!question.options[0] || !question.options[0].content || !question.options[0].content.length === 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 or 2 options!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n\r\n        let score = 0;\r\n        for (const option of question.options) {\r\n            if (option && option.score) {\r\n                score += option.score;\r\n            }\r\n        }\r\n        if (score === 0) {\r\n            return toast({\r\n                title: `Your question must have at least 1 true option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        let modifiedQuestion = {\r\n            ...question,\r\n            options: question.options.filter((option) => option.content && option.content.length > 0)\r\n        };\r\n        console.log(\"DELETE OPTION ID \" + removeOptionIds);\r\n        try {\r\n            for (const removeOptionId of removeOptionIds) {\r\n                const resp = await axios.delete(`http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/questions/options/${removeOptionId}`, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\r\n                    }\r\n                })\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            questions: prev.questions\r\n                .map(item => item.id === selectedQuestion.id ? modifiedQuestion : item)\r\n        }))\r\n\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setQuestion({\r\n                    title: '',\r\n                    options: [{}, {}]\r\n                })\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text>Edit Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n                            {/*QUESTION TITLE INPUT*/}\r\n                            <Textarea\r\n                                value={question && question.title}\r\n                                // onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                onChange={onTitleChange}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                question.options.map((option, index) => {\r\n                                    let handleScoreChange = (e) => {\r\n                                        setQuestion((prev) => (\r\n                                            {\r\n                                                ...prev,\r\n                                                options: prev.options\r\n                                                    .map((option, i) =>\r\n                                                        i === index ? {\r\n                                                            ...option,\r\n                                                            score: parseFloat(e.target.value)\r\n                                                        } : option)\r\n                                            }\r\n                                        ))\r\n                                    };\r\n                                    const handleRemoveOption = async () => {\r\n                                        if (option.id) {\r\n                                            setRemoveOptionIds((prev) => [...prev, option.id]);\r\n                                        }\r\n                                        setQuestion((prev) => ({\r\n                                            ...prev,\r\n                                            options: prev.options.filter((item, i) => i !== index)\r\n                                        }))\r\n                                    }\r\n                                    return (\r\n                                        <HStack key={index} w={'100%'}>\r\n                                            <Select\r\n                                                value={option.score ? option.score : 0}\r\n                                                onChange={handleScoreChange}\r\n                                                bg={'gray.200'}\r\n                                                // defaultValue={0}\r\n                                                placeholder='score'\r\n                                                maxW={'100px'}>\r\n                                                {\r\n                                                    [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                        <option key={i} value={item}>{item}</option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                            <Input\r\n                                                value={option.content && option.content}\r\n                                                borderWidth={(option.score && option.score > 0) ? 1.5 : 1}\r\n                                                borderColor={option.score && option.score > 0 && 'green'}\r\n                                                color={option.score && option.score > 0 && 'green'}\r\n                                                focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                                colorScheme={'blue'}\r\n                                                onChange={(e) => onOptionChange(e, index)}\r\n                                                key={index}\r\n                                                placeholder={\"option\"}/>\r\n                                            <IconButton\r\n                                                onClick={handleRemoveOption}\r\n                                                aria-label={'remove'} icon={<CgRemove/>}/>\r\n                                        </HStack>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setQuestion({\r\n                                title: '',\r\n                                options: [{}, {}]\r\n                            })\r\n                        }}>Cancel</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save as Coppy</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportPage.js",["663","664","665","666","667","668","669","670"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box, Flex,\r\n    Heading,\r\n    HStack, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Select, Spacer,\r\n    Stack,\r\n    Table,\r\n    TableCaption,\r\n    Tbody,\r\n    Td,\r\n    Text,\r\n    Tfoot,\r\n    Th,\r\n    Thead,\r\n    Tr, VStack\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {AiOutlineUser, BiDotsHorizontalRounded} from \"react-icons/all\";\r\nimport {ChevronDownIcon} from \"@chakra-ui/icons\";\r\n\r\nconst ReportPage = () => {\r\n    const [reportData, setData] = useState(null);\r\n    const history = useHistory();\r\n    useEffect(async () => {\r\n        const url = 'http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/report';\r\n        try {\r\n            const resp = await axios.get(url, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                }\r\n            })\r\n            console.log(resp.data);\r\n            setData(resp.data);\r\n        } catch (e) {\r\n            console.log('Failed to get report data ', e)\r\n        }\r\n    }, []);\r\n    return (\r\n        <Box w={'100%'}>\r\n            <VStack w={'100%'}>\r\n\r\n                <Box w={'100%'} mb={10}>\r\n                    <Flex w={'100%'}>\r\n                        <Select bg={'white'} placeholder=\"Select option\">\r\n                            <option value=\"option1\">Option 1</option>\r\n                            <option value=\"option2\">Option 2</option>\r\n                            <option value=\"option3\">Option 3</option>\r\n                        </Select>\r\n                        <Box mx={100}/>\r\n                        <Select bg={'white'} maxW={200} placeholder=\"Select option\">\r\n                            <option value=\"option1\">Option 1</option>\r\n                            <option value=\"option2\">Option 2</option>\r\n                            <option value=\"option3\">Option 3</option>\r\n                        </Select>\r\n                        <Box mx={5}/>\r\n                        <Select bg={'white'} maxW={200} placeholder=\"Select option\">\r\n                            <option value=\"option1\">Option 1</option>\r\n                            <option value=\"option2\">Option 2</option>\r\n                            <option value=\"option3\">Option 3</option>\r\n                        </Select>\r\n                    </Flex>\r\n                </Box>\r\n\r\n                <Table boxShadow={'md'} variant=\"simple\" colorScheme=\"blue\" bg={'white'} p={4}>\r\n                    <TableCaption>Quiz Reporting</TableCaption>\r\n                    <Thead color={'blue'}>\r\n                        <Tr color={'blue'}>\r\n                            <Th py={5} color={'teal'} fontSize={14}>Quiz name</Th>\r\n                            <Th color={'teal'} fontSize={14}>\r\n                                Total participants\r\n                            </Th>\r\n                            <Th color={'teal'} fontSize={14} isNumeric>Avg score</Th>\r\n                            <Th/>\r\n                        </Tr>\r\n                    </Thead>\r\n                    <Tbody>\r\n                        {\r\n                            reportData && reportData.map((item) => {\r\n                                const avgScore = () => {\r\n                                    let rs = 0;\r\n                                    item.participants.forEach((u) => u.score ? rs += u.score : 0);\r\n                                    return rs > 0 ? rs / (item.participants.length) : 0;\r\n                                }\r\n                                return <Tr\r\n                                    key={item.title}>\r\n                                    <Td\r\n                                        cursor={'pointer'}\r\n                                        onClick={() => {\r\n                                            item.id &&\r\n                                            history.push(`/admin/report/${item.quizId}/details`)\r\n                                        }}>{item.title}</Td>\r\n                                    <Td>{item.participants.length}</Td>\r\n                                    <Td isNumeric>{avgScore()}</Td>\r\n                                    <Td onClick={() => {\r\n                                    }}>\r\n                                        <Menu>\r\n                                            <MenuButton\r\n                                                border={'none'}\r\n                                                px={4}\r\n                                                py={2}\r\n                                                transition=\"all 0.2s\"\r\n                                                borderRadius=\"md\"\r\n                                                borderWidth=\"1px\"\r\n                                                _hover={{bg: \"gray.400\"}}\r\n                                                _expanded={{bg: \"blue.400\"}}\r\n                                                _focus={{boxShadow: \"outline\"}}\r\n                                            >\r\n                                                <BiDotsHorizontalRounded/>\r\n                                            </MenuButton>\r\n                                            <MenuList>\r\n                                                <MenuItem>New File</MenuItem>\r\n                                                <MenuItem>New Window</MenuItem>\r\n                                                <MenuDivider/>\r\n                                                <MenuItem>Open...</MenuItem>\r\n                                                <MenuItem>Save File</MenuItem>\r\n                                            </MenuList>\r\n                                        </Menu>\r\n                                    </Td>\r\n                                </Tr>\r\n                            })\r\n                        }\r\n\r\n                    </Tbody>\r\n                    <Tfoot>\r\n                        <Tr>\r\n                            <Th>To convert</Th>\r\n                            <Th>into</Th>\r\n                            <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot>\r\n                </Table>\r\n\r\n            </VStack>\r\n        </Box>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default ReportPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\create_quiz\\CreateNewQuizPage.js",["671","672","673","674","675","676","677","678","679","680","681","682","683","684"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    ButtonGroup,\r\n    FormControl,\r\n    FormHelperText,\r\n    FormLabel,\r\n    HStack,\r\n    Input,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    Text,\r\n    useRadio,\r\n    useRadioGroup,\r\n    VStack,\r\n    Wrap,\r\n    Center,\r\n    WrapItem,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport {MdArrowDropDown} from \"react-icons/all\";\r\nimport axios from \"axios\";\r\nimport {useCreateQuiz} from \"../../../context/CreateQuizProvider\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport SubjectService from \"../../../service/SubjectService\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst CreateNewQuizPage = () => {\r\n\r\n    const {setQuiz} = useContext(QuizEditContext);\r\n    const [savedSubjects, setSubjects] = useState([]);\r\n\r\n    const [quizName, setQuizName] = useState(\"\");\r\n    const [selectedSubject, setSelectedSubject] = useState(\"\");\r\n\r\n    const [quizNameError, setQuizNameError] = useState(null);\r\n    const [subjectError, setSubjectError] = useState(null);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const history = useHistory();\r\n    const {createdQuiz, setCreatedQuiz} = useCreateQuiz();\r\n\r\n    /*\r\n    handle create quiz\r\n    */\r\n    const onNextButtonClicked = async () => {\r\n        if (quizName == null || quizName.length === 0) {\r\n            setQuizNameError(\"Please enter a quiz name\");\r\n            return;\r\n        }\r\n        if (selectedSubject == null || !selectedSubject.title) {\r\n            setSubjectError(\"Please select a selectedSubject\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const resp = await QuizService.saveQuiz({\r\n                title: quizName,\r\n                subject: {\r\n                    id: selectedSubject.id || null,\r\n                    title: selectedSubject.title\r\n                },\r\n            });\r\n            const data = resp.data;\r\n            console.log(data);\r\n            setQuiz(data)\r\n            history.replace(`/admin/quiz/${data.id}/edit`);\r\n        } catch (e) {\r\n            console.log('Failed to create quiz ', e);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        //\r\n        if (createdQuiz != null) {\r\n            setQuizName(createdQuiz.title == null ? \"\" : createdQuiz.title);\r\n            setSelectedSubject(\r\n                createdQuiz.subject == null ? \"\" : createdQuiz.subject\r\n            );\r\n        }\r\n        getSubjects().then((r) => setSubjects(r));\r\n    }, []);\r\n\r\n    const getSubjects = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await SubjectService.getSubjects();\r\n            console.log(data.data);\r\n            return data.data;\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {/* Overlay */}\r\n            <Box\r\n                zIndex={101}\r\n                position={\"fixed\"}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                zIndex=\"100\"\r\n                minH=\"100vh\"\r\n                minW=\"100vw\"\r\n                position=\"fixed\"\r\n                bg=\"gray.200\"\r\n            />\r\n\r\n            {isLoading && (\r\n                <Spinner\r\n                    top=\"50%\"\r\n                    right=\"50%\"\r\n                    position=\"fixed\"\r\n                    zIndex=\"1000\"\r\n                    color=\"red.500\"\r\n                    transform={\"translate(50%,-50%)\"}\r\n                />\r\n            )}\r\n            <Box\r\n                bg={\"gray.100\"}\r\n                // bg={'teal.500'}\r\n                zIndex={101}\r\n                position={\"fixed\"}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                boxShadow={\"xl\"}\r\n                align={\"start\"}\r\n                borderRadius={\"xl\"}\r\n\r\n            >\r\n                <VStack\r\n                    align={\"start\"}\r\n                    p={4}\r\n                    width={\"500px\"}\r\n                    maxW={[\"360px\", \"500px\"]}\r\n                >\r\n                    <HStack align={\"start\"}>\r\n                        <Text fontSize={\"20px\"} fontWeight={\"medium\"}>\r\n                            Create a Quiz\r\n                        </Text>\r\n                    </HStack>\r\n                    <VStack color={\"gray.600\"} align={\"start\"} w={\"100%\"}>\r\n                        <FormControl>\r\n                            <FormLabel fontWeight={\"normal\"}>\r\n                                1. Name this quiz\r\n                            </FormLabel>\r\n                            {/*1. quiz name*/}\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setQuizName(e.target.value);\r\n                                    setQuizNameError(null);\r\n                                }}\r\n                                value={quizName}\r\n                                isInvalid={quizNameError != null}\r\n                                borderColor={\"grey.600\"}\r\n                                width={\"100%\"}\r\n                                variant=\"outline\"\r\n                            />\r\n                            {quizNameError && (\r\n                                <FormHelperText color={\"crimson\"}>\r\n                                    {quizNameError}\r\n                                </FormHelperText>\r\n                            )}\r\n                        </FormControl>\r\n                        {/*2. CHOICE A SUBJECT*/}\r\n                        <VStack w={\"100%\"} align={\"start\"}>\r\n                            <FormLabel fontWeight={\"normal\"}>\r\n                                2. Choose revelant subjects\r\n                            </FormLabel>\r\n                            <Wrap spacing={2}>\r\n                                {!isLoading && savedSubjects.map((item, i) => (\r\n                                    <WrapItem key={i}>\r\n                                        <Button\r\n                                            value={item.title}\r\n                                            onClick={(e) => {\r\n                                                setSelectedSubject(prev => ({\r\n                                                    ...prev,\r\n                                                    title: item.title\r\n                                                }));\r\n                                                setSubjectError(\"\");\r\n                                            }}\r\n                                            bg={\r\n                                                item.title === selectedSubject.title\r\n                                                    ? \"teal\"\r\n                                                    : \"white\"\r\n                                            }\r\n                                            color={\r\n                                                item.title === selectedSubject.title\r\n                                                    ? \"white\"\r\n                                                    : \"gray\"\r\n                                            }\r\n                                            colorScheme={\"gray\"}\r\n                                            role={\"checkbox\"}\r\n                                            // defaultChecked={true}\r\n                                            size={\"xs\"}\r\n                                            variant={\"outline\"}\r\n                                            maxH={\"60\"}\r\n                                            maxW={\"60\"}\r\n                                        >\r\n                                            {item.title}\r\n                                        </Button>\r\n                                    </WrapItem>\r\n                                ))}\r\n                            </Wrap>\r\n                        </VStack>\r\n\r\n                        <Text color=\"red\" fontStyle=\"italic\">\r\n                            {subjectError}\r\n                        </Text>\r\n                        <HStack pt={5} w={\"100%\"} justify={\"end\"}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    history.goBack()\r\n                                }}\r\n                                colorScheme=\"gray\"\r\n                                fontWeight={\"normal\"}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                colorScheme=\"teal\"\r\n                                fontWeight={\"normal\"}\r\n                                onClick={onNextButtonClicked}\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CreateNewQuizPage;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportDetailPage.js",["685","686","687","688","689","690","691","692","693","694","695","696"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Flex,\r\n    Heading,\r\n    HStack,\r\n    Tab, TableCaption,\r\n    TabList,\r\n    TabPanel,\r\n    TabPanels,\r\n    Table,\r\n    Tbody,\r\n    Tfoot,\r\n    Tabs, Tag, TagLabel, TagLeftIcon, Td,\r\n    Text, Th, Thead, Tr,\r\n    VStack, Icon, Tooltip, Container\r\n} from \"@chakra-ui/react\";\r\nimport {CloseIcon} from \"@chakra-ui/icons\";\r\nimport {AiOutlineCheck, BsCheck, FiCheck, IoIosClose, RiCloseLine} from \"react-icons/all\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst ReportDetailPage = () => {\r\n\r\n    //get quiz id\r\n    const {id} = useParams();\r\n    const [data, setData] = useState();\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            console.log('fetch data')\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/${id}/report`;\r\n            const resp = await axios.get(url, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                }\r\n            })\r\n            if (resp.status === 200) {\r\n                console.log(resp.data);\r\n                setData(resp.data);\r\n            }\r\n        } catch (e) {\r\n            console.log('Failed to fetch data', e)\r\n        }\r\n        console.log(id);\r\n    }, []);\r\n    return (\r\n        <Box w={'100%'} bg={'gray.100'}>\r\n            <VStack w={'100%'}>\r\n\r\n                <Box p={5} bg={'white'} w={'100%'}>\r\n                    <HStack w={'100%'} justifyContent={'space-between'}>\r\n                        <VStack align={'start'}>\r\n                            <Text>Quiz title</Text>\r\n                            <Text>Quiz title</Text>\r\n                            <HStack spacing={2}>\r\n                                <Button size={'sm'}>edit</Button>\r\n                                <Button size={'sm'}>edit</Button>\r\n                                <Button size={'sm'}>edit</Button>\r\n                            </HStack>\r\n                        </VStack>\r\n                        <HStack spacing={2}>\r\n                            {/*<Box border={'lg'} maxW={100} maxH={100} borderRadius={'lg'} centerContent>*/}\r\n                            {/*    <Box padding=\"4\" bg=\"gray.100\" maxW=\"xl\">*/}\r\n                            {/*    </Box>*/}\r\n                            {/*</Box>*/}\r\n                        </HStack>\r\n                    </HStack>\r\n\r\n                </Box>\r\n                <Tabs w={'100%'} minH={'100vh'} size={'lg'} variant={\"enclosed\"} colorScheme={'blue'}>\r\n                    <TabList bg={'gray.200'}>\r\n                        <Tab>Participants</Tab>\r\n                        <Tab>Overview</Tab>\r\n                        <Tab>Three</Tab>\r\n                    </TabList>\r\n\r\n                    <TabPanels mt={5} w={'100%'}>\r\n                        <TabPanel p={0} w={'100%'}>\r\n                            {\r\n                                data && data.map((item, i) => (\r\n                                    <Flex px={5} py={2} bg={'white'} key={i} mb={3} w={'100%'}\r\n                                          justifyContent={'space-between'} alignItems={'center'}>\r\n                                        <Text fontWeight={'medium'}>{item.userInfo.username}</Text>\r\n                                        <Text>50%</Text>\r\n                                        <HStack spacing={0}>\r\n                                            <Tag m={0} borderRadius={'0'} size={'sm'} variant={'solid'}\r\n                                                 colorScheme={'green'}>\r\n                                                {/*<TagLeftIcon size={'sm'} as={BsCheck}/>*/}\r\n                                                <TagLabel>3</TagLabel>\r\n                                            </Tag>\r\n                                            <Tag m={0} size={'sm'} borderRadius={'none'} variant={'solid'}\r\n                                                 colorScheme={'red'}>\r\n                                                {/*<TagLeftIcon size={'sm'} as={CloseIcon}/>*/}\r\n                                                <TagLabel>3</TagLabel>\r\n                                            </Tag>\r\n                                        </HStack>\r\n                                        <VStack>\r\n                                            <Text>22% </Text>\r\n                                            <Text>Accuray</Text>\r\n                                        </VStack>\r\n                                        <VStack>\r\n                                            <Text>22% </Text>\r\n                                            <Text>Accuray</Text>\r\n                                        </VStack>\r\n                                    </Flex>\r\n                                ))\r\n                            }\r\n\r\n                        </TabPanel>\r\n                        <TabPanel m={0} p={0}>\r\n                            <Box>\r\n                                <Table colorScheme={'facebook'} variant=\"simple\" bg={'white'}>\r\n                                    <TableCaption>Imperial to metric conversion factors</TableCaption>\r\n                                    <Thead>\r\n                                        <Tr>\r\n                                            <Th>Participant names</Th>\r\n                                            <Th>Score</Th>\r\n                                            {/**/}\r\n                                            <Th maxW={5}>Q1</Th>\r\n                                            <Th maxW={5}>Q1</Th>\r\n                                            <Th maxW={5}>Q1</Th>\r\n                                            {/*<Th isNumeric>multiply by</Th>*/}\r\n                                        </Tr>\r\n                                    </Thead>\r\n                                    <Tbody>\r\n                                        {\r\n                                            [1, 1, 1, 1, 1, 1, 1, 1,].map((item, i) => (\r\n                                                <Tr key={i}>\r\n                                                    <Td>Nguyen Khanh Duy</Td>\r\n                                                    <Td>millimetres (mm)</Td>\r\n                                                    {/**/}\r\n                                                    <Td\r\n                                                        onMouseEnter={() => {\r\n                                                            console.log('mouse enter')\r\n                                                        }}\r\n                                                        onMouseLeave={() => {\r\n                                                            console.log('mouse leave')\r\n                                                        }}\r\n                                                        maxW={5} bg={'red.500'}>\r\n                                                        <RiCloseLine/>\r\n                                                    </Td>\r\n                                                    <Td maxW={5} bg={'green.500'}><FiCheck/></Td>\r\n                                                    <Td maxW={5} bg={'green.500'}><FiCheck/></Td>\r\n                                                    {/*<Td isNumeric>25.4</Td>*/}\r\n                                                </Tr>\r\n                                            ))\r\n                                        }\r\n                                    </Tbody>\r\n                                    {/*<Tfoot>*/}\r\n                                    {/*    <Tr>*/}\r\n                                    {/*        <Th>To convert</Th>*/}\r\n                                    {/*        <Th>into</Th>*/}\r\n                                    {/*        <Th isNumeric>multiply by</Th>*/}\r\n                                    {/*    </Tr>*/}\r\n                                    {/*</Tfoot>*/}\r\n                                </Table>\r\n                            </Box>\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <p>three!</p>\r\n                        </TabPanel>\r\n                    </TabPanels>\r\n                </Tabs>\r\n\r\n            </VStack>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ReportDetailPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\ShareDialog.js",["697","698","699"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    CloseButton,\r\n    Divider,\r\n    HStack,\r\n    IconButton,\r\n    Input,\r\n    Spacer,\r\n    Tag,\r\n    TagCloseButton,\r\n    TagLabel,\r\n    Text,\r\n    useToast,\r\n    VStack,\r\n    Wrap,\r\n    WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport { AiOutlineUsergroupAdd, MdPublic } from \"react-icons/all\";\r\nimport { CopyIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ShareDialog = ({ setVisible, quizId }) => {\r\n    const [emails, setEmails] = useState([]);\r\n    const [email, setEmail] = useState(\"\");\r\n    const toast = useToast();\r\n    useEffect(() => {\r\n        console.log(quizId);\r\n    }, []);\r\n    const onSubmit = async () => {\r\n        console.log(startDate);\r\n        console.log(finishDate);\r\n        try {\r\n            const data = {\r\n                quizId: quizId,\r\n                emails: emails,\r\n                startDate: startDate,\r\n                finishDate: finishDate,\r\n            };\r\n            let url =\r\n                \"http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes\";\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${localStorage.getItem(\r\n                        \"accessToken\"\r\n                    )}`,\r\n                },\r\n            });\r\n            if (resp.status === 200) {\r\n                toast({\r\n                    position: \"bottom-left\",\r\n                    duration: 2000,\r\n                    status: \"success\",\r\n                    render: () => (\r\n                        <Box color=\"white\" p={3} bg=\"blue.500\">\r\n                            Share via emails success!\r\n                        </Box>\r\n                    ),\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Failed to assign quiz to student \", e);\r\n        } finally {\r\n            setVisible(false);\r\n        }\r\n    };\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [finishDate, setFinishDate] = useState(new Date());\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                bg={\"gray.400\"}\r\n                opacity={0.8}\r\n                position={\"fixed\"}\r\n                top={0}\r\n                minH={\"100vh\"}\r\n                right={0}\r\n                onClick={() => setVisible(false)}\r\n                minW={\"100vw\"}\r\n                zIndex={900}\r\n            />\r\n            <Box\r\n                p={5}\r\n                w={500}\r\n                bg={\"white\"}\r\n                borderRadius={\"md\"}\r\n                boxShadow={\"md\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                position={\"fixed\"}\r\n                top={\"40%\"}\r\n                right={\"50%\"}\r\n                height={\"auto\"}\r\n                zIndex={901}\r\n            >\r\n                <VStack spacing={5} w={\"100%\"}>\r\n                    {/*TITLE*/}\r\n                    <HStack w={\"100%\"}>\r\n                        <AiOutlineUsergroupAdd size={\"20\"} />\r\n                        <Text fontSize={\"xl\"} fontWeight={\"medium\"}>\r\n                            Invite\r\n                        </Text>\r\n                        <Spacer />\r\n                        <CloseButton\r\n                            borderRadius={\"100px\"}\r\n                            bg={\"teal\"}\r\n                            color={\"white\"}\r\n                            onClick={() => setVisible(false)}\r\n                            size={\"md\"}\r\n                        />\r\n                    </HStack>\r\n                    {/*DATE*/}\r\n                    <HStack w={\"100%\"} spacing={2}>\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={(date) => setStartDate(date)}\r\n                            timeInputLabel=\"Time:\"\r\n                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                            showTimeInput\r\n                        />\r\n                        <DatePicker\r\n                            selected={finishDate}\r\n                            onChange={(date) => setFinishDate(date)}\r\n                            timeInputLabel=\"Time:\"\r\n                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                            showTimeInput\r\n                        />\r\n                    </HStack>\r\n                    <VStack w={\"100%\"} align={\"start\"}>\r\n                        <Text fontWeight={\"medium\"} color={\"gray.600\"}>\r\n                            Share public link\r\n                        </Text>\r\n                        <HStack w={\"100%\"}>\r\n                            <Input size={\"sm\"} />\r\n                            <IconButton icon={<CopyIcon size={30} />} />\r\n                        </HStack>\r\n                    </VStack>\r\n                    <Divider />\r\n                    {/*SHARE WITH EMAILS*/}\r\n                    <VStack w={\"100%\"} align={\"start\"}>\r\n                        <Text fontWeight={\"medium\"} color={\"gray.600\"}>\r\n                            Share using emails\r\n                        </Text>\r\n                        {/*EMAIL*/}\r\n                        <Wrap w={\"100%\"}>\r\n                            {emails.map((email) => (\r\n                                <WrapItem key={email}>\r\n                                    <Tag\r\n                                        size={\"sm\"}\r\n                                        borderRadius=\"full\"\r\n                                        variant=\"solid\"\r\n                                        colorScheme=\"green\"\r\n                                    >\r\n                                        <TagLabel>{email}</TagLabel>\r\n                                        <TagCloseButton\r\n                                            onClick={() => {\r\n                                                let filteredEmail =\r\n                                                    emails.filter(\r\n                                                        (e) => e != email\r\n                                                    );\r\n                                                setEmails(filteredEmail);\r\n                                            }}\r\n                                        />\r\n                                    </Tag>\r\n                                </WrapItem>\r\n                            ))}\r\n                        </Wrap>\r\n                        {/*INPUT & ADD BUTTOn*/}\r\n                        <HStack w={\"100%\"}>\r\n                            <Input\r\n                                size={\"sm\"}\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                placeholder={\r\n                                    \"Email to share. Ex: test@gmail.com\"\r\n                                }\r\n                            />\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setEmail(\"\");\r\n                                    if (!emails.includes(email)) {\r\n                                        setEmails((prevState) => [\r\n                                            ...prevState,\r\n                                            email,\r\n                                        ]);\r\n                                    }\r\n                                }}\r\n                                isDisabled={email.length === 0}\r\n                                size={\"sm\"}\r\n                                colorScheme={\"purple\"}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </HStack>\r\n\r\n                        <HStack w={\"100%\"} py={5} justifyContent={\"end\"}>\r\n                            <Button onClick={onSubmit} colorScheme={\"teal\"}>\r\n                                Share invite\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShareDialog;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assign\\Assignment.js",["700","701","702","703","704"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizProvider.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\login\\LoginPage.js",["705","706"],"import {\r\n    Flex,\r\n    Box,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    Checkbox,\r\n    Stack,\r\n    Link,\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    useColorModeValue, FormHelperText,\r\n} from \"@chakra-ui/react\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {Link as RRLink, useHistory} from 'react-router-dom';\r\nimport {useState} from \"react\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\n\r\nexport default function LoginPage() {\r\n    const {login, setUser, getUserDetails} = useAuth();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [remember, setRemember] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    const {directUrl, setDirectUrl} = useQuiz();\r\n\r\n    const history = useHistory();\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        const isSuccess = await login(username, password, remember);\r\n        if (isSuccess) {\r\n            await getUserDetails();\r\n            if (directUrl) {\r\n                history.replace(directUrl);\r\n                setDirectUrl(null);\r\n                return;\r\n            }\r\n            history.replace('/')\r\n            return;\r\n        }\r\n        setError(true);\r\n\r\n\r\n    }\r\n    return (\r\n        <Flex\r\n            minH={\"100vh\"}\r\n            align={\"center\"}\r\n            justify={\"center\"}\r\n            bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n        >\r\n            <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\r\n                <Stack align={\"center\"}>\r\n                    <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\r\n                    <Text fontSize={\"lg\"} color={\"gray.600\"}>\r\n                        to enjoy all of our cool{\" \"}\r\n                        <Link color={\"blue.400\"}>features</Link> ✌️\r\n                    </Text>\r\n                </Stack>\r\n                <Box\r\n                    rounded={\"lg\"}\r\n                    bg={useColorModeValue(\"white\", \"gray.700\")}\r\n                    boxShadow={\"lg\"}\r\n                    p={8}\r\n                >\r\n                    {/*Form*/}\r\n                    <Stack spacing={4}>\r\n                        {/*Email*/}\r\n                        <FormControl id=\"email\">\r\n                            <FormLabel>Email address</FormLabel>\r\n                            <Input\r\n                                value={username}\r\n                                isInvalid={error}\r\n                                errorBorderColor=\"crimson\"\r\n                                onChange={(e) => {\r\n                                    setError(false);\r\n                                    setUsername(e.target.value);\r\n                                }}\r\n                                type='email|text'/>\r\n                            {\r\n                                error &&\r\n                                <FormHelperText color={'crimson'}>Username or password is not correct!</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        {/*Password*/}\r\n                        <FormControl id=\"password\">\r\n                            <FormLabel>Password</FormLabel>\r\n                            <Input\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                type=\"password\"/>\r\n                        </FormControl>\r\n                        <Stack>\r\n                            <Stack\r\n                                direction={{base: \"column\", sm: \"row\"}}\r\n                                align={\"start\"}\r\n                                justify={\"space-between\"}\r\n                            >\r\n                                {/*Remember me*/}\r\n\r\n                                <Checkbox\r\n                                    defaultChecked\r\n                                    value={remember}\r\n                                    onChange={(e) => {\r\n                                        setRemember(e.target.checked);\r\n                                    }}>\r\n                                    Remember me\r\n                                </Checkbox>\r\n                                <Link color={\"blue.400\"}>Forgot password?</Link>\r\n                            </Stack>\r\n                            <Box minH={10}></Box>\r\n                            <Button\r\n                                disabled={\r\n                                    (username.length === 0 || password.length === 0)\r\n                                }\r\n                                bg={\"blue.400\"}\r\n                                color={\"white\"}\r\n                                _hover={{\r\n                                    bg: \"blue.500\",\r\n                                }}\r\n                                onClick={(e) => handleLogin(e)}\r\n                            >\r\n                                Sign in\r\n                            </Button>\r\n                            <Button\r\n                                bg={\"purple.400\"}\r\n                                color={\"white\"}\r\n                                _hover={{\r\n                                    bg: \"purple.100\",\r\n                                }}\r\n                                onClick={\r\n                                    () => {\r\n                                        history.replace('/')\r\n                                    }\r\n                                }\r\n                            >\r\n                                Sign in as Guest\r\n                            </Button>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Box>\r\n            </Stack>\r\n        </Flex>\r\n    );\r\n}\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\QuizService.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\VerificationPage.js",["707","708"],"import {\r\n    Button,\r\n    FormControl,\r\n    Flex,\r\n    Heading,\r\n    Input,\r\n    Stack,\r\n    Text,\r\n    useColorModeValue, FormErrorMessage, FormHelperText,\r\n} from '@chakra-ui/react';\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport axiosClient from \"../../../api/axiosClient\";\r\nimport {useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport default function VerificationPage() {\r\n    const [code, setCode] = useState('');\r\n    const [err, setErr] = useState('');\r\n    const {getUserDetails} = useAuth();\r\n    const history = useHistory();\r\n    const verification = async () => {\r\n        const url = `${process.env.REACT_APP_BASE_URL}/auth/verification`;\r\n        try {\r\n            const resp = await axiosClient.get(url, {\r\n                headers: {\r\n                    \"code\": code\r\n                }\r\n            });\r\n            console.log(resp.data);\r\n            localStorage.setItem(\"accessToken\", resp.data.accessToken);\r\n            localStorage.setItem(\"refreshToken\", resp.data.refreshToken);\r\n            history.replace(\"/\");\r\n            window.location.reload();\r\n        } catch (e) {\r\n            console.log(e.response.data.message);\r\n            setErr(e.response.data.message);\r\n        }\r\n    }\r\n    return (\r\n        <Flex\r\n            minH={'100vh'}\r\n            align={'center'}\r\n            justify={'center'}\r\n            bg={useColorModeValue('gray.50', 'gray.800')}>\r\n            <Stack\r\n                spacing={4}\r\n                w={'full'}\r\n                maxW={'md'}\r\n                bg={useColorModeValue('white', 'gray.700')}\r\n                rounded={'xl'}\r\n                boxShadow={'lg'}\r\n                p={6}\r\n                my={12}>\r\n                <Heading lineHeight={1.1} fontSize={{base: '2xl', md: '3xl'}}>\r\n                    Verification Account\r\n                </Heading>\r\n                <Text\r\n                    fontSize={{base: 'sm', sm: 'md'}}\r\n                    color={useColorModeValue('gray.800', 'gray.400')}>\r\n                    You&apos;ll get an code on your mail box\r\n                </Text>\r\n                <FormControl id=\"email\">\r\n                    <Input\r\n\r\n                        isInvalid={err}\r\n                        errorBorderColor={'red'}\r\n                        value={code}\r\n                        onChange={(e) => {\r\n                            setCode(e.target.value)\r\n                            setErr('')\r\n                        }}\r\n                        // placeholder=\"your-email@example.com\"\r\n                        _placeholder={{color: 'gray.500'}}\r\n                        type=\"email\"\r\n                    />\r\n                    {err && <FormHelperText color={'red'}>{err}</FormHelperText>}\r\n                </FormControl>\r\n                <Stack spacing={6}>\r\n                    <Button\r\n                        onClick={() => verification()}\r\n                        bg={'blue.400'}\r\n                        color={'white'}\r\n                        _hover={{\r\n                            bg: 'blue.500',\r\n                        }}>\r\n                        Verification Account\r\n                    </Button>\r\n                </Stack>\r\n            </Stack>\r\n        </Flex>\r\n    );\r\n}","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\SubmitReportEntry.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\UserService.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\AppService.js",["709"],"import axiosClient from \"../api/axiosClient\";\r\n\r\nconst AppService = {\r\n    getImage: (imgName) => {\r\n        console.log('get imaeg');\r\n        return `${process.env.REACT_APP_BASE_URL}/public/files/${imgName}`;\r\n    }\r\n}\r\nexport default AppService;","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\MyAvatar.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\SubjectService.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\RemovedQuizzes.js",["710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\QuizEntry.js",["731","732"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\index.js",[],["733","734"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\App.js",["735","736","737","738","739","740","741","742","743","744","745"],"import {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport {useAuth} from \"./hooks/useAuth\";\nimport {useEffect, useState} from \"react\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport LoginPage from \"./pages/public/login/LoginPage\";\nimport Axios from \"axios\";\nimport {PrivateRoute} from \"./routes/privateRoute\";\nimport Public from \"./pages/public/Public\";\nimport Admin from \"./pages/admin/Admin\";\nimport AdminSettingProvider from \"./providers/AdminSettingProvider\";\nimport VerificationPage from \"./pages/public/register/VerificationPage\";\n\nfunction App() {\n    const {user} = useAuth();\n    const [inputValue, setinputValue] = useState(\"\");\n    const [quiz, setQuiz] = useState(null);\n\n\n    return (\n        <Switch>\n            <PrivateRoute path={'/admin'}>\n                {/*<AdminSettingProvider>*/}\n                    <Admin/>\n                {/*</AdminSettingProvider>*/}\n            </PrivateRoute>\n            {/*<Route  path='/admin' component={Admin}/>*/}\n            <Route path='/login' component={LoginPage}/>\n            <Route path='/verification' component={VerificationPage}/>\n            <Route path='/' component={Public}/>\n        </Switch>\n    );\n}\n\nexport default App;\n","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\QuizProvider.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\AuthProvider.js",["746","747"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\context\\CreateQuizProvider.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\AdminSettingProvider.js",["748","749"],"import React, {createContext, useContext, useState} from 'react';\r\nimport {Box, CircularProgress, Spinner} from \"@chakra-ui/react\";\r\n\r\nexport const AdminContext = createContext();\r\n\r\nconst AdminSettingProvider = ({children}) => {\r\n    const [fullMode, setFullMode] = useState(true);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n\r\n    const value = {\r\n        fullMode,\r\n        setFullMode,\r\n        setLoading\r\n    }\r\n\r\n    return (\r\n        <AdminContext.Provider value={value}>\r\n            <>\r\n                {isLoading &&\r\n                <>\r\n                    <Box bg={'gray.200'} zIndex={'1000000000000'} opacity={.2} position={'fixed'} w={'100vw'}\r\n                         h={'100vh'}/>\r\n                    <Spinner\r\n                        top=\"50%\"\r\n                        right=\"50%\"\r\n                        position=\"fixed\"\r\n                        zIndex=\"1000000000001\"\r\n                        color=\"green\"\r\n                    />\r\n                </>\r\n                }\r\n                {children}\r\n            </>\r\n        </AdminContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AdminSettingProvider;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\hooks\\useAuth.js",["750","751","752","753"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\routes\\privateRoute.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\Admin.js",["754","755","756"],"import React, {Component} from 'react';\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport Dashboard from \"../../components/admin/dashboard/Dashboard\";\r\nimport {Heading} from \"@chakra-ui/react\";\r\nimport SettingPage from \"../../components/admin/setting/SettingPage\";\r\nimport CreateNewQuizPage from \"./create_quiz/CreateNewQuizPage\";\r\nimport QuizEditor from \"./quiz_edit/QuizEditor\";\r\nimport SidebarWithHeader from \"./SidebarWithHeader\";\r\nimport AssignedQuizPage from \"./assigned/AssignedQuizPage\";\r\nimport LibraryPage from \"./library/LibraryPage\";\r\nimport AdminSettingProvider from \"../../providers/AdminSettingProvider\";\r\nimport QuizEditProvider from \"../../providers/QuizEditProvider\";\r\nimport ReportPage from \"./report/ReportPage\";\r\nimport ReportDetailPage from \"./report/ReportDetailPage\";\r\nimport {DragDropContext} from \"react-beautiful-dnd\";\r\nimport Assignment from \"./assign/Assignment\";\r\nimport RemovedQuizzes from \"./library/RemovedQuizzes\";\r\nimport AssignmentQuizzes from \"./assigment/AssignmentQuizzes\";\r\nimport AssignmentReport from \"./assigment/AssignmentReport\";\r\nimport AssignedInfo from \"./assigned/AssignedInfo\";\r\nimport StartExamQuiz from \"../public/start_quiz/StartExamQuiz\";\r\nimport EditAssignment from \"./assigment/EditAssignment\";\r\n\r\nclass Admin extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <AdminSettingProvider>\r\n                    <QuizEditProvider>\r\n                        <SidebarWithHeader>\r\n                            <Switch>\r\n                                <Route exact path={\"/admin\"} component={props => <Dashboard {...props}/>}/>\r\n                                <Route exact path={\"/admin/assigned\"}\r\n                                       component={props => <AssignedQuizPage {...props}/>}/>\r\n                                <Route exact path={\"/admin/assigned/:id/info\"}\r\n                                       component={props => <AssignedInfo {...props}/>}/>\r\n                                <Route exact path={\"/admin/library\"} component={props => <LibraryPage {...props}/>}/>\r\n                                <Route path={\"/admin/setting\"} component={props => <SettingPage {...props}/>}/>\r\n                                <Route path={\"/admin/quiz/:id/assignment\"}\r\n                                       component={props => <Assignment {...props}/>}/>\r\n                                <Route path={\"/admin/report\"} exact component={props => <ReportPage {...props}/>}/>\r\n                                <Route path={\"/admin/report/:id/details\"}\r\n                                       component={props => <ReportDetailPage {...props}/>}/>\r\n\r\n                                <Route path={\"/admin/join/exam/quiz/:code/start\"} component={StartExamQuiz}/>\r\n                                <Route path={\"/admin/quiz/new\"} component={props => <CreateNewQuizPage {...props}/>}/>\r\n                                <Route path={\"/admin/quiz/removed\"} component={props => <RemovedQuizzes {...props}/>}/>\r\n\r\n                                <Route path={\"/admin/quiz/assigment/quizzes/:id\"}\r\n                                       component={props => <EditAssignment {...props}/>}/>\r\n                                <Route exact path={\"/admin/quiz/assigment/quizzes\"}\r\n                                       component={props => <AssignmentQuizzes {...props}/>}/>\r\n                                <Route path={\"/admin/assigment/:id/report\"}\r\n                                       component={props => <AssignmentReport {...props}/>}/>\r\n                                <Route path={\"/admin/quiz/:id/edit\"} component={props => <QuizEditor {...props}/>}/>\r\n\r\n                            </Switch>\r\n                        </SidebarWithHeader>\r\n                    </QuizEditProvider>\r\n                </AdminSettingProvider>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\login\\LoginPage.js",["757","758"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\register\\VerificationPage.js",["759","760"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\register\\RegisterPage.js",["761","762","763","764","765"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\SidebarWithHeader.js",["766","767","768","769","770","771","772","773","774","775","776","777"],"import React, {ReactNode, useContext} from \"react\";\r\nimport {\r\n    IconButton,\r\n    Avatar,\r\n    Box,\r\n    CloseButton,\r\n    Flex,\r\n    HStack,\r\n    VStack,\r\n    Icon,\r\n    useColorModeValue,\r\n    Link,\r\n    Drawer,\r\n    DrawerContent,\r\n    Text,\r\n    useDisclosure,\r\n    BoxProps,\r\n    FlexProps,\r\n    Menu,\r\n    MenuButton,\r\n    MenuDivider,\r\n    MenuItem,\r\n    MenuList, Button, Center,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    FiHome,\r\n    FiTrendingUp,\r\n    FiCompass,\r\n    FiStar,\r\n    FiSettings,\r\n    FiMenu,\r\n    FiBell,\r\n    FiChevronDown,\r\n} from \"react-icons/fi\";\r\nimport {IconType} from \"react-icons\";\r\nimport {ReactText} from \"react\";\r\nimport {AddIcon, PlusSquareIcon} from \"@chakra-ui/icons\";\r\nimport {useHistory, Link as RLink, NavLink} from \"react-router-dom\";\r\nimport {useAdmin, useAuth} from \"../../hooks/useAuth\";\r\nimport {FcLibrary, HiOutlineLibrary} from \"react-icons/all\";\r\nimport {AdminContext} from \"../../providers/AdminSettingProvider\";\r\nimport AppService from \"../../service/AppService\";\r\n\r\n\r\nconst LinkItems = [\r\n    //window.location.pathname\r\n    {name: \"Assigned Quiz\", icon: FiHome, href: \"/admin/assigned\"},\r\n    {name: \"Report\", icon: FiTrendingUp, href: \"/admin/report\"},\r\n    {name: \"Library\", icon: HiOutlineLibrary, href: \"/admin/library\"},\r\n    {name: \"Explore\", icon: FiCompass, href: \"/admin/explore\"},\r\n    {name: \"Favourites\", icon: FiStar, href: \"/admin/favourites\"},\r\n    {name: \"Settings\", icon: FiSettings, href: \"/admin/setting\"},\r\n];\r\n\r\nexport default function SidebarWithHeader({children}) {\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const {user} = useAuth();\r\n    const {fullMode} = useAdmin();\r\n    return (\r\n        <>\r\n\r\n            <Box w={'100%'} minH=\"100vh\" bg={'gray.100'}>\r\n                {fullMode && <SidebarContent\r\n                    onClose={() => onClose}\r\n                    display={{base: \"none\", md: \"block\"}}\r\n                />}\r\n                <Drawer\r\n                    autoFocus={false}\r\n                    isOpen={isOpen}\r\n                    placement=\"left\"\r\n                    onClose={onClose}\r\n                    returnFocusOnClose={false}\r\n                    onOverlayClick={onClose}\r\n                    size=\"full\"\r\n                >\r\n                    <DrawerContent>\r\n                        <SidebarContent onClose={onClose}/>\r\n                    </DrawerContent>\r\n                </Drawer>\r\n                {/* mobilenav */}\r\n                <MobileNav fullMode={fullMode} onOpen={onOpen} avt={user.avt}/>\r\n                <Box ml={{base: 0, md: fullMode && 60}} p=\"4\">\r\n                    {children}\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst SidebarContent = ({onClose, ...rest}) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Box\r\n            transition=\"3s ease\"\r\n            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n            borderRight=\"1px\"\r\n            borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n            w={{base: \"full\", md: 60}}\r\n            pos=\"fixed\"\r\n            h=\"full\"\r\n            {...rest}\r\n        >\r\n            <Flex\r\n                h=\"20\"\r\n                alignItems=\"center\"\r\n                mx=\"8\"\r\n                justifyContent=\"space-between\"\r\n            >\r\n                <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\" cursor={'pointer'} onClick={\r\n                    () => history.replace('/')\r\n                }>\r\n                    Logo\r\n                </Text>\r\n                <CloseButton\r\n                    display={{base: \"flex\", md: \"none\"}}\r\n                    onClick={onClose}\r\n                />\r\n            </Flex>\r\n            {LinkItems.map((link, index) => (\r\n                <NavItem link={link.href} key={index} icon={link.icon}>\r\n                    {link.name}\r\n                </NavItem>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\n\r\nconst NavItem = ({icon, children, link, ...rest}) => {\r\n    return (\r\n        <NavLink\r\n            // href={link}\r\n            activeStyle={{\r\n                color: 'blueviolet',\r\n                fontWeight: 'bold',\r\n                textDecoration: 'underline'\r\n            }}\r\n            activeClassName=\"navUl__active\"\r\n            to={link}\r\n            style={{textDecoration: \"none\"}}>\r\n            <Flex\r\n                // bg={window.location.pathname===link?'teal':'white'}\r\n                align=\"center\"\r\n                p=\"4\"\r\n                mx=\"4\"\r\n                borderRadius=\"lg\"\r\n                role=\"group\"\r\n                cursor=\"pointer\"\r\n                _hover={{\r\n                    bg: \"cyan.400\",\r\n                    color: \"white\",\r\n                }}\r\n                {...rest}\r\n            >\r\n                {icon && (\r\n                    <Icon\r\n                        mr=\"4\"\r\n                        fontSize=\"16\"\r\n                        _groupHover={{\r\n                            color: \"white\",\r\n                        }}\r\n                        as={icon}\r\n                    />\r\n                )}\r\n                {children}\r\n            </Flex>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nconst MobileNav = ({onOpen, avt, fullMode, ...rest}) => {\r\n    const history = useHistory();\r\n    const {logout, user} = useAuth();\r\n    return (\r\n        <Flex\r\n            // ml={{base: 0, md: !fullMode && 60}}\r\n            px={{base: 4, md: 4}}\r\n            height=\"20\"\r\n            alignItems=\"center\"\r\n            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n            borderBottomWidth=\"1px\"\r\n            borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n            justifyContent={{base: \"space-between\", md: \"flex-end\"}}\r\n            {...rest}\r\n        >\r\n            <IconButton\r\n                display={{base: \"flex\", md: \"none\"}}\r\n                onClick={onOpen}\r\n                variant=\"outline\"\r\n                aria-label=\"open menu\"\r\n                icon={<FiMenu/>}\r\n            />\r\n\r\n            <Text\r\n                display={{base: \"flex\", md: \"none\"}}\r\n                fontSize=\"2xl\"\r\n                fontFamily=\"monospace\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                Logo\r\n            </Text>\r\n\r\n            <HStack spacing={{base: \"0\", md: \"6\"}}>\r\n\r\n                <Button\r\n                    onClick={() => {\r\n                        history.push(\"/admin/quiz/new\")\r\n                    }}\r\n                    colorScheme={'teal'} leftIcon={<AddIcon/>}>\r\n                    Create Quiz\r\n                </Button>\r\n                <IconButton\r\n                    size=\"lg\"\r\n                    variant=\"ghost\"\r\n                    aria-label=\"open menu\"\r\n                    icon={<FiBell/>}\r\n                />\r\n                <Flex alignItems={\"center\"}>\r\n                    <Menu>\r\n                        <MenuButton\r\n                            py={2}\r\n                            transition=\"all 0.3s\"\r\n                            _focus={{boxShadow: \"none\"}}\r\n                        >\r\n                            <HStack>\r\n\r\n                                <Avatar\r\n                                    size={\"sm\"}\r\n                                    src={\r\n                                        AppService.getImage(user.avt) || \"https://images.unsplash.com/photo-1619946794135-5bc917a27793?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=b616b2c5b373a80ffc9636ba24f7a4a9\"\r\n                                    }\r\n                                />\r\n                                <VStack\r\n                                    display={{base: \"none\", md: \"flex\"}}\r\n                                    alignItems=\"flex-start\"\r\n                                    spacing=\"1px\"\r\n                                    ml=\"2\"\r\n                                >\r\n                                    {/*USERNAME*/}\r\n                                    <Text fontSize=\"sm\">{user.username}</Text>\r\n                                    {/*ROLE*/}\r\n                                    <Text fontSize=\"xs\" color=\"gray.600\">\r\n                                        {/*{user.roles[0].name === \"ROLE_ADMIN\" ? \"Teacher\" : \"Student\"}*/}\r\n                                        Student\r\n                                    </Text>\r\n                                </VStack>\r\n                                <Box display={{base: \"none\", md: \"flex\"}}>\r\n                                    <FiChevronDown/>\r\n                                </Box>\r\n                            </HStack>\r\n                        </MenuButton>\r\n                        <MenuList\r\n                            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n                            borderColor={useColorModeValue(\r\n                                \"gray.200\",\r\n                                \"gray.700\"\r\n                            )}\r\n                        >\r\n                            <MenuItem>Profile</MenuItem>\r\n                            <MenuItem>Settings</MenuItem>\r\n                            <MenuItem>Billing</MenuItem>\r\n                            <MenuDivider/>\r\n                            <MenuItem onClick={() => {\r\n                                logout();\r\n                                history.replace('/login')\r\n                            }}>Sign out</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </Flex>\r\n            </HStack>\r\n        </Flex>\r\n    );\r\n};\r\n","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\providers\\QuizEditProvider.js",["778"],"import {createContext, useContext, useState} from \"react\";\r\n\r\nimport React from 'react';\r\nimport QuizService from \"../service/QuizService\";\r\nimport UserService from \"../service/UserService\";\r\nimport {AdminContext} from \"./AdminSettingProvider\";\r\n\r\nexport const QuizEditContext = createContext();\r\n\r\nconst QuizEditProvider = ({children}) => {\r\n\r\n    const [quiz, setQuiz] = useState(null);\r\n    const {isLoading, setLoading} = useContext(AdminContext);\r\n\r\n    const getQuizDetail = async (id) => {\r\n        try {\r\n            setLoading(true);\r\n            const resp = await UserService.getUserQuiz(id);\r\n            setQuiz(resp.data);\r\n            return resp.data;\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const handleSaveQuiz = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const resp = await QuizService.saveQuiz(quiz);\r\n            await getQuizDetail(quiz.id);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const value = {\r\n        quiz, setQuiz, isLoading, setLoading, getQuizDetail, handleSaveQuiz\r\n    }\r\n\r\n    return (\r\n\r\n        <QuizEditContext.Provider value={value}>\r\n            {children}\r\n        </QuizEditContext.Provider>\r\n    );\r\n};\r\n\r\nexport default QuizEditProvider;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\start_quiz\\StartQuiz.js",["779","780","781","782","783","784","785","786","787","788","789"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport SubmitReportEntry from \"./SubmitReportEntry\";\r\nimport format from 'dateformat';\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {code} = useParams();\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [report, setReport] = useState(null);\r\n    const cancelRef = useRef();\r\n    const {user} = useAuth();\r\n    const [submitContent, setSubmitContent] = useState({answers: []});\r\n    const history = useHistory();\r\n\r\n    useEffect(async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (!foundedQuiz) {\r\n                    const quizInfo = await getQuizInfo();\r\n                    //check private quiz\r\n                    setFoundedQuiz(quizInfo);\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: quizInfo.id,\r\n                        startTime: new Date()\r\n                    }))\r\n                } else {\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: foundedQuiz.id, startTime: new Date()\r\n\r\n                    }))\r\n                }\r\n                if ((foundedQuiz && !foundedQuiz.questions) || (!foundedQuiz)) {\r\n                    const questions = await getQuizQuestions();\r\n                    setFoundedQuiz(prev => ({\r\n                        ...prev,\r\n                        questions: questions\r\n                    }))\r\n                }\r\n\r\n            } catch (e) {\r\n                history.push('/')\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n\r\n            setLoading(false);\r\n        }\r\n        , []);\r\n\r\n\r\n    const getQuizInfo = async () => {\r\n        console.log(\"get quiz info\")\r\n        const data = await QuizService.getQuizByCode(code);\r\n        return data.data;\r\n    }\r\n    const getQuizQuestions = async () => {\r\n        console.log('get quiz\\'s questions')\r\n        const questions = await QuizService.getQuizQuestions(code);\r\n\r\n        return questions.data;\r\n    }\r\n\r\n    const onCheckOption = (e, question, option) => {\r\n        if (e.target.checked) {\r\n            if ((submitContent.answers.filter((item) => item.questionId === question.questionId)).length > 0) {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => item.questionId !== question.questionId ? item : {\r\n                        ...item,\r\n                        options: [\r\n                            ...new Set([...item.options,\r\n                                option.optionId])\r\n                        ]\r\n                    })\r\n                }))\r\n            }\r\n            //\r\n            else {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: [...prev.answers, {\r\n                        questionId: question.questionId,\r\n                        options: [\r\n                            option.optionId\r\n                        ]\r\n                    }]\r\n                }))\r\n            }\r\n        } else {\r\n            setSubmitContent((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => {\r\n                            // item.questionId !== question.questionId ? item : {\r\n                            //     ...item,\r\n                            //     options: [\r\n                            //         ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                            //     ]\r\n                            // }\r\n                            if (item.questionId !== question.questionId) {\r\n                                return item;\r\n                            } else {\r\n                                // let mOptions = item.options.filter(optionId => optionId !== option.optionId);\r\n                                // return {\r\n                                //     ...item,\r\n                                //     options: [\r\n                                //         ...new Set(mOptions)\r\n                                //     ]\r\n                                // }\r\n                                return ({\r\n                                    ...item,\r\n                                    options: [\r\n                                        ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                                    ]\r\n                                })\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const submitAnswers = async () => {\r\n        const data = await QuizService.submissionAnswers(JSON.stringify(submitContent));\r\n        setReport(data.data);\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <Flex direction={'column'} bg={'blue.100'}>\r\n            <CustomAlertDialog\r\n                title={'Submit answers'}\r\n                description={'Are you sure? You can\\'t undo this action afterwards.'}\r\n                isOpen={isOpen}\r\n                setOpen={setOpen}\r\n                cancelRef={cancelRef}\r\n                onSubmit={() => submitAnswers()}\r\n            />\r\n            {/*QUIZ SUBMIT ANSWERS REPORT*/}\r\n            {report && <Box bg={''} mx={'5'} mt={'5'} p={5}>\r\n                <Heading>Submit Report</Heading>\r\n                <SimpleGrid spacing={5} columns={'4'} py={5}>\r\n                    <SubmitReportEntry title={'score'} content={`${report.score}/${report.quizScore}`}/>\r\n                    <SubmitReportEntry title={'questions'}\r\n                                       content={`${report.submitQuestionsCount}/${report.numOfQuestions}`}/>\r\n                    <SubmitReportEntry title={'startTime'} content={`${format(report.startTime, \"dd-mm hh:MM\")}`}/>\r\n                    <SubmitReportEntry title={'finishTime'} content={`${format(report.finishTime, \"dd-mm hh:MM\")}`}/>\r\n                    <SubmitReportEntry title={'attempt'} content={`${report.attempt}`}/>\r\n                </SimpleGrid>\r\n            </Box>}\r\n\r\n            <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n                 align={'center'}>\r\n                {\r\n                    !isLoading && <Box\r\n                        bg={'white'}\r\n                        borderRadius={'md'}\r\n                        boxShadow={'xl'}\r\n                        minH={'100vh'}\r\n                        maxW={'860px'}\r\n                        p={10}>\r\n                        <VStack position={'relative'}>\r\n\r\n                            {/*\r\n                           QUIZ TITLE\r\n                           */}\r\n                            <Heading\r\n                                pb={10}\r\n                                color={'purple.600'}\r\n                                fontSize={30}>\r\n                                {foundedQuiz != null ? foundedQuiz.title : ''}\r\n                            </Heading>\r\n                            {/*NUMBER OF QUESTIONS*/}\r\n                            <Text\r\n                                fontWeight={'medium'}\r\n                                color={'teal'}\r\n                                letterSpacing={1}\r\n                                fontStyle={'italic'}\r\n                                position={'absolute'}\r\n                                top={0}\r\n                                right={0}\r\n                                m={5}>\r\n                                {foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.length} Questions\r\n                            </Text>\r\n                            {/*QUESTIONS*/}\r\n                            {\r\n                                foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.map((question, i) => (\r\n                                    <VStack\r\n                                        w={'100%'}\r\n                                        align={'start'}\r\n                                        textAlign={'start'} key={i}\r\n                                        p={2}\r\n                                        spacing={5}>\r\n                                        {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                        <Container w={'100%'} maxW=\"4xl\">\r\n                                            <Box maxW=\"4xl\">\r\n                                                <Text fontWeight={'medium'} fontSize={20} color={'purple.900'}>\r\n                                                    {i + 1}. {question.title} \\t QuestionID : {question.questionId}\r\n                                                </Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        {/*OPTIONS*/}\r\n                                        <SimpleGrid\r\n                                            w={'100%'}\r\n                                            columns={2}\r\n                                            spacing={4}\r\n                                            align={'start'}\r\n                                            textAlign={'start'}>\r\n                                            {\r\n                                                question.options.map((option, i) => {\r\n                                                    let filterElement = submitContent.answers.filter(v => v['questionId'] === question.questionId)[0];\r\n                                                    return (\r\n                                                        <Container\r\n                                                            w={'100%'}\r\n                                                            minW={300}\r\n                                                            key={i}\r\n                                                            // maxW=\"xl\"\r\n                                                            align={'start'}\r\n                                                            textAlign={'start'}\r\n                                                            alignItems={'start'}\r\n                                                        >\r\n                                                            <Box\r\n                                                                padding={1}\r\n                                                                // maxW=\"3xl\"\r\n                                                            >\r\n                                                                <Checkbox\r\n                                                                    isDisabled={report !== null}\r\n                                                                    defaultChecked={\r\n                                                                        filterElement &&\r\n                                                                        filterElement.options.filter(o => o === option.optionId)[0]\r\n                                                                    }\r\n                                                                    onChange={(e) => onCheckOption(e, question, option)}\r\n                                                                    value={option.optionId}\r\n                                                                    colorScheme={'teal'}\r\n                                                                    size={'lg'}>\r\n                                                                    {option.content} \\t OptionID : {option.optionId}\r\n                                                                </Checkbox>\r\n                                                            </Box>\r\n                                                        </Container>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                        <Divider/>\r\n                                    </VStack>\r\n                                ))\r\n                            }\r\n                            {/* Submit button*/}\r\n                            <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                <Button\r\n                                    isDisabled={report !== null}\r\n                                    onClick={() => {\r\n                                        setOpen(true)\r\n                                        setSubmitContent((prevState => ({\r\n                                            ...prevState,\r\n                                            finishTime: new Date(),\r\n                                        })))\r\n                                    }}\r\n                                    alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                            </Box>\r\n                        </VStack>\r\n\r\n                        {/* FIXED CONTENTS*/}\r\n                        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                            <Tooltip label={\"Scroll to top\"}>\r\n                                <IconButton\r\n                                    onClick={() => window.scrollTo(0, 0)}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowUpIcon/>}/>\r\n                            </Tooltip>\r\n                            <Tooltip label={\"Scroll to bottom\"}>\r\n                                <IconButton\r\n                                    // aria-label={\"\"}\r\n                                    onClick={() => {\r\n                                        // pageRef.current.scrollIntoView({\r\n                                        //     behavior: \"smooth\",\r\n                                        //     block: \"end\",\r\n                                        //     inline: \"nearest\"\r\n                                        // })\r\n                                    }}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowDownIcon/>}/>\r\n                            </Tooltip>\r\n                        </HStack>\r\n                        {report === null && <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                            <Button\r\n                                isDisabled={report !== null}\r\n                                size={'md'} colorScheme={'teal'} variant={'outline'}\r\n                                leftIcon={<TimeIcon/>}>{foundedQuiz.limitTime || 'No Time Limit'}{' '}\r\n                                left</Button>\r\n                        </Flex>}\r\n                    </Box>\r\n\r\n\r\n                }\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\HomePage.js",["790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812"],"import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Flex,\r\n    Grid,\r\n    GridItem,\r\n    SimpleGrid,\r\n    Input,\r\n    Stack,\r\n    Wrap,\r\n    WrapItem,\r\n    Heading,\r\n    Text,\r\n    HStack,\r\n    Avatar,\r\n    VStack,\r\n    Image,\r\n} from \"@chakra-ui/react\";\r\nimport QuizInfo from \"./QuizInfo\";\r\nimport Footer from \"../../../components/public/Footer\";\r\n\r\nimport {GoFlame} from \"react-icons/all\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport NotFoundQuiz from \"./NotFoundQuiz\";\r\nimport Nav from \"./Nav\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\n\r\nconst HomePage = () => {\r\n    const history = useHistory();\r\n    const {user} = useAuth();\r\n    const [code, setCode] = useState(\"8AzAO8\");\r\n    const [found, setFound] = useState(true);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [quizzes, setQuizzes] = useState(null);\r\n    const {foundedQuiz, setFoundedQuiz, setDirectUrl} = useQuiz();\r\n    useEffect(() => {\r\n        /*\r\n        get newest quizzes\r\n         */\r\n        getQuizzes();\r\n\r\n    }, []);\r\n\r\n    const getQuizzes = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await QuizService.getQuizzes();\r\n            console.log(data.data);\r\n            setQuizzes(data.data);\r\n        } catch (e) {\r\n            console.log(\"Get quizzes failed\")\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    /*\r\n    handle find quiz by code \r\n    */\r\n    const handleFindQuiz = async (e) => {\r\n        if (code != null && code.length > 0) {\r\n            try {\r\n                const resp = await QuizService.getQuizByCode(code);\r\n                console.log(resp);\r\n                setFoundedQuiz(resp.data);\r\n                history.push(`/join/quiz/${code}`);\r\n                setFound(true);\r\n            } catch (e) {\r\n                setFound(false);\r\n                console.log(e.response.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getUserStreaks = () => {\r\n        return user && user.streaks || 0;\r\n    }\r\n    return (\r\n        <Flex\r\n            direction={\"column\"}\r\n            bg={\"#F7FAFC\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={\"center\"}\r\n        >\r\n            <Nav/>\r\n            {/*//Main Content*/}\r\n            <Flex\r\n                pt={8}\r\n                bg={\"#F7FAFC\"}\r\n                // minHeight={'100vh'}\r\n                w={\"100%\"}\r\n                direction={\"column\"}\r\n                alignItems={\"flex-start\"}\r\n            >\r\n                <Flex\r\n                    w={\"100%\"}\r\n                    justifyContent={\"space-around\"}\r\n                    alignItems={\"center\"}\r\n                >\r\n                    {/*Join Code*/}\r\n                    <Box\r\n                        // minW={'800px'}\r\n                        w={[\"100px\", \"500px\", \"800px\"]}\r\n                    >\r\n                        <Stack\r\n\r\n                            boxShadow={\"md\"}\r\n                            borderRadius={\"10px\"}\r\n                            bg={\"white\"}\r\n                            p={[\"10px\", \"50px\", \"100px\"]}\r\n                            minW={\"360px\"}\r\n                            direction={\"row\"}\r\n                        >\r\n                            <Input\r\n                                value={code}\r\n                                onChange={(e) => setCode(e.target.value)}\r\n                                minH={\"50px\"}\r\n                                minW={\"260px\"}\r\n                                placeholder={\"Enter a join code\"}\r\n                            />\r\n                            <Button\r\n                                isDisabled={code.length === 0}\r\n                                onClick={handleFindQuiz}\r\n                                minH={\"50px\"}\r\n                                minW={\"30px\"}\r\n                                variant={\"solid\"}\r\n                                colorschema={\"teal\"}\r\n                                bg={'teal'}\r\n                                px={5}\r\n                                color={'white'}\r\n                            >\r\n                                Join\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                    {/*Day Streak*/}\r\n                    {!found && <NotFoundQuiz setShow={setFound}/>}\r\n                    <Box\r\n                        boxShadow={\"md\"}\r\n                        borderRadius={\"10px\"}\r\n                        bg={\"white\"}\r\n                        p={[\"10px\", \"50px\"]}\r\n                        align={\"center\"}\r\n                    >\r\n                        <Stack direction={\"column\"}>\r\n                            <Box\r\n                                // bg={\"#EDF2F7\"}\r\n                                bg={'gray.200'}\r\n                                p={1}\r\n                                borderRadius={\"200px\"}\r\n                                minW={\"200px\"}\r\n                            >\r\n                                <HStack>\r\n                                    {/*avt*/}\r\n                                    <Avatar\r\n                                        name={user != null ? user.username : \"\"}\r\n                                        src={\r\n                                            (user && user.avt) ||\r\n                                            \"https://cdn-icons-png.flaticon.com/512/2021/2021646.png\"\r\n                                        }\r\n                                    />\r\n                                    {/*username*/}\r\n                                    <Text\r\n                                        fontSize={\"16px\"}\r\n                                        color={\"#4A5568\"}\r\n                                        fontWeight={\"medium\"}\r\n                                    >\r\n                                        {user != null\r\n                                            ? user.username\r\n                                            : \"Create an account\"}\r\n                                    </Text>\r\n                                </HStack>\r\n                            </Box>\r\n                            <HStack spacing={2} pt={1} pb={1}>\r\n                                <GoFlame color={getUserStreaks() >= 1 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 2 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 3 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 4 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 5 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                            </HStack>\r\n                            <Text\r\n                                color={\"#4A5568\"}\r\n                                fontWeight={\"bold\"}\r\n                                fontSize={\"16px\"}\r\n                            >\r\n                                {getUserStreaks()} day streak\r\n                            </Text>\r\n                            <Text color={\"#718096\"} fontSize={\"14px\"}>\r\n                                Start your streak, play now!\r\n                            </Text>\r\n                        </Stack>\r\n                    </Box>\r\n                </Flex>\r\n            </Flex>\r\n            {/*NEWEST QUIZZES*/}\r\n            <Box py={5} px={10} align={\"start\"} w={'100%'}>\r\n                <VStack align={\"start\"}>\r\n                    <Text\r\n                        fontSize={\"22px\"}\r\n                        letterSpacing={1}\r\n                        fontWeight={\"medium\"}\r\n                    >\r\n                        Newest Quizzes\r\n                    </Text>\r\n                    <Flex direction={['column', 'column', 'row']} pt={5} w={\"100%\"}>\r\n                        {\r\n                            quizzes && quizzes.map((item, index) => (\r\n                                <QuizInfo quizInfo={item} key={index} mr={[0, 2, 4]}/>\r\n                            ))\r\n                        }\r\n\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n            {/*End of RecentActivity*/}\r\n            {/**/}\r\n            <Box minH={\"100px\"}></Box>\r\n            {/*Footer*/}\r\n\r\n            <Footer/>\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\quiz_info\\JoinQuizInfo.js",["813","814","815","816","817","818","819"],"import React, {useEffect, useState} from 'react';\r\nimport {Box, Button, ButtonGroup, CircularProgress, Flex, Heading, HStack, Text, VStack} from \"@chakra-ui/react\";\r\nimport {AiOutlineFieldNumber, RiNumbersFill, RiNumbersLine} from \"react-icons/all\";\r\nimport {TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst JoinQuizInfo = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const {user} = useAuth();\r\n    const history = useHistory();\r\n    const {code} = useParams();\r\n    const {foundedQuiz, setFoundedQuiz, setDirectUrl} = useQuiz();\r\n\r\n\r\n    useEffect(async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await QuizService.getQuizByCode(code);\r\n            setFoundedQuiz(data.data);\r\n            console.log(data.data);\r\n\r\n        } catch (e) {\r\n            console.log(e.response.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    //handle button start\r\n    const onStart = async () => {\r\n        if (user == null || !localStorage.getItem('accessToken')) {\r\n            setDirectUrl(`/join/quiz/${code}`);\r\n            history.push(\"/login\")\r\n            return;\r\n        }\r\n        try {\r\n            const data = await QuizService.getQuizQuestions(code);\r\n            setFoundedQuiz(prev => ({\r\n                ...prev,\r\n                questions: data.data\r\n            }))\r\n            console.log(foundedQuiz);\r\n            history.push(`/join/quiz/${code}/start`);\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const onCancel = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <Box bg={'blue.100'} minH={'100vh'}>\r\n            {isLoading && <>\r\n                <Box position={'fixed'}\r\n                     top={'50%'}\r\n                     right={'50%'}\r\n                     minH={'100vh'}\r\n                     minW={'100vw'}\r\n                     zIndex={900}\r\n                     opacity={0.5}\r\n                     bg={'gray.100'}\r\n                     transform={\"translate(50%,-50%)\"}/>\r\n                <CircularProgress\r\n                    position={'fixed'}\r\n                    top={'50%'}\r\n                    right={'50%'}\r\n                    isIndeterminate\r\n                    zIndex={901}\r\n                    transform={\"translate(50%,-50%)\"}\r\n                    value={30}\r\n                    color=\"orange.400\" thickness=\"12px\"/>\r\n            </>}\r\n            {!isLoading && <Flex w={'100%'} direction={'column'}>\r\n                <Box>\r\n                    <VStack pt={10}>\r\n                        {/*INFO*/}\r\n                        <Box w={500} minW={200} bg={'white'} p={10} textAlign={'start'}>\r\n                            <VStack alignItems={'start'} textAlign={'start'}>\r\n                                <Box my={4}>\r\n                                    <Heading fontSize={20}>{foundedQuiz.title}</Heading>\r\n                                </Box>\r\n                                <HStack spacing={5}>\r\n                                    <Button leftIcon={<RiNumbersLine/>}>\r\n                                        <Text>{foundedQuiz.numOfQuestions} question</Text>\r\n                                    </Button>\r\n                                    <Button leftIcon={<TimeIcon/>}>\r\n                                        <Text>{foundedQuiz.limitTime} mins </Text>\r\n                                    </Button>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                        {/*  ACTION BUTTONS*/}\r\n                        <VStack w={500} p={10} bg={'white'} minW={'200px'} spacing={8}>\r\n                            <Button\r\n                                onClick={onStart}\r\n                                size={'lg'}\r\n                                w={'100%'}\r\n                                colorScheme={'teal'}>\r\n                                Start\r\n                            </Button>\r\n                            <Button size={'lg'} w={'100%'} colorScheme={'blue'}>Share</Button>\r\n                            <Button onClick={onCancel} size={'lg'} w={'100%'} colorScheme={'gray'}>Cancel</Button>\r\n                        </VStack>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default JoinQuizInfo;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\create_quiz\\CreateNewQuizPage.js",["820","821","822","823","824","825","826","827","828","829","830","831","832","833"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\QuizEditor.js",["834","835","836","837","838","839"],"import {\r\n    Box,\r\n    Button, Checkbox, CircularProgress, Code,\r\n    Container, Divider, Flex,\r\n    HStack,\r\n    IconButton, Input, InputGroup, InputRightAddon, Select,\r\n    SimpleGrid,\r\n    Spacer, Stack,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport React, {useContext, useEffect, useRef, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon} from \"@chakra-ui/icons\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AiOutlineTag, BiSave, BsPen, HiDocumentDuplicate, MdArrowDropDown, MdEdit} from \"react-icons/all\";\r\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\r\nimport QuizEditDialog from \"./components/QuizEditDialog\";\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\"\r\nimport EditQuestionDialog from \"./components/EditQuestionDialog\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\n\r\nconst QuizEditor = () => {\r\n    const {id} = useParams();\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const {isLoading, setLoading} = useContext(AdminContext);\r\n    const [selectedQuestion, setSelectedQuestion] = useState(null);\r\n    const [sort, setSort] = useState('column');\r\n    //\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\r\n    const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\r\n    const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false);\r\n    //\r\n    const [size, setSize] = useState('full');\r\n    const cancelRef = useRef();\r\n    //fetch quiz details\r\n    const fetchQuizDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await UserService.getUserQuiz(id);\r\n            setQuiz(data.data);\r\n        } catch (e) {\r\n\r\n            console.log(\"Failed to get quiz details with id \" + id);\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        console.log('quiz editor render')\r\n        fetchQuizDetails();\r\n    }, [])\r\n\r\n    const handleSaveQuiz = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const resp = await QuizService.saveQuiz(quiz);\r\n            await fetchQuizDetails();\r\n\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const onRemoveQuestion = async () => {\r\n        try {\r\n            await QuizService.removeQuestion(selectedQuestion.id);\r\n            setQuiz((prev) => ({\r\n                ...prev,\r\n                questions: prev.questions.filter((question) => question.id !== selectedQuestion.id)\r\n            }))\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setSelectedQuestion(null);\r\n            setOpen(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Flex justifyContent={'center'} justifyItems={'center'} alignContent={'center'} direction={'row'}>\r\n                {/*QUESTIONS EDITOR*/}\r\n                <VStack align={'center'} w={'100%'} minH={'100vh'}>\r\n                    <HStack mb={4} align={'start'} alignSelf={'start'} spacing={4}>\r\n\r\n                        <Button size={'sm'} onClick={() => setShowNewQuestionDialog(true)} px={4}\r\n                                colorScheme={'linkedin'}\r\n                                leftIcon={<AddIcon/>}>\r\n                            New Question\r\n                        </Button>\r\n\r\n                        <Select\r\n                            size={'sm'}\r\n                            onChange={(e) => {\r\n                                setSort(e.target.value);\r\n                                const reversed = quiz.questions.reverse();\r\n                                setQuiz((prevState) => ({\r\n                                    ...prevState,\r\n                                    questions: reversed,\r\n                                }))\r\n\r\n                            }}\r\n                            bg=\"tomato\"\r\n                            borderColor=\"tomato\"\r\n                            maxW={100}\r\n                            icon={<MdArrowDropDown/>}\r\n                            // variant=\"filled\"\r\n                            defaultValue={sort}\r\n                            placeholder=\"Sort by\"\r\n                        >\r\n                            <option value={'column'}>Position</option>\r\n                            <option value={'column-reverse'}>Reverse</option>\r\n                        </Select>\r\n                    </HStack>\r\n                    {/*    QUESTIONS*/}\r\n\r\n                    <Stack direction={sort}>\r\n                        {\r\n                            quiz && quiz.questions.map((question, index) => (\r\n                                <Box\r\n                                    key={index}\r\n                                    boxShadow={\"sm\"}\r\n                                    my={5}\r\n                                    borderRadius={\"md\"}\r\n                                    align={\"start\"}\r\n                                    textAlign={\"start\"}\r\n                                    h={\"100%\"}\r\n                                    bg={'white'}\r\n                                    maxW={\"600px\"}\r\n                                    minW={\"600px\"}\r\n                                >\r\n\r\n                                    <HStack p={2} bg={\"gray.700\"} color={'white'}>\r\n                                        {/*QUESTION INDEX*/}\r\n                                        <Text>Question {index + 1}</Text>\r\n                                        <Spacer/>\r\n                                        <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                                            <IconButton\r\n                                                bg={'transparent'}\r\n                                                onClick={() => {\r\n                                                    setSelectedQuestion(question)\r\n                                                    setShowEditQuestionDialog(true)\r\n                                                }}\r\n                                                icon={<BsPen/>} aria-label={'edit'}/>\r\n                                        </Tooltip>\r\n                                        <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                                            <IconButton\r\n                                                aria-label={'remove'}\r\n                                                onClick={() => {\r\n                                                    setOpen(true)\r\n                                                    setSelectedQuestion(question)\r\n\r\n                                                }}\r\n                                                bg={'transparent'}\r\n                                                icon={<DeleteIcon/>}\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip label={\"duplicate\"}>\r\n                                            <IconButton\r\n                                                onClick={() => {\r\n                                                    let q = quiz.questions[index];\r\n                                                    q = {\r\n                                                        title: q.title,\r\n                                                        options: q.options.map((option) => ({\r\n                                                            content: option.content,\r\n                                                            score: option.score,\r\n                                                        }))\r\n                                                    }\r\n                                                    setQuiz((prev) => ({\r\n                                                        ...quiz,\r\n                                                        questions: [...prev.questions, q]\r\n                                                    }))\r\n                                                    console.log(q);\r\n                                                }}\r\n                                                aria-label={'duplicate'}\r\n                                                bg={'transparent'}\r\n                                                icon={<HiDocumentDuplicate/>}/>\r\n                                        </Tooltip>\r\n                                    </HStack>\r\n                                    {/*QUESTION*/}\r\n                                    <VStack align={\"start\"} p={2} spacing={5}>\r\n                                        {/*QUESTION TITLE*/}\r\n                                        <Container maxW=\"3xl\">\r\n                                            <Box maxW=\"3xl\">\r\n                                                <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        <SimpleGrid\r\n                                            w={\"100%\"}\r\n                                            align={\"start\"}\r\n                                            columns={2}\r\n                                            spacing={2}\r\n                                        >\r\n                                            {\r\n                                                question.options.map((option, index) => (\r\n                                                    <Container key={index} maxW=\"xl\" centerContent>\r\n                                                        <Box\r\n                                                            py={4}\r\n                                                            w={\"100%\"}\r\n                                                            maxW=\"3xl\"\r\n                                                            align={\"start\"}\r\n                                                        >\r\n\r\n                                                            <Checkbox\r\n                                                                color={option.score > 0 && 'green'}\r\n                                                                isChecked={option.score > 0 && true}\r\n                                                                colorScheme={option.score > 0 && 'green'}\r\n                                                                key={index}\r\n                                                                w={\"100%\"}\r\n                                                                size={\"md\"}\r\n                                                                // disabled={true}\r\n                                                                // isChecked={option.isChecked}\r\n                                                            >\r\n                                                                {option.content}\r\n                                                            </Checkbox>\r\n                                                        </Box>\r\n                                                    </Container>\r\n                                                ))\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                    </VStack>\r\n                                    <HStack bg={\"gray.200\"} p={1}>\r\n                                        <Select\r\n                                            size={\"sm\"}\r\n                                            maxW={\"100\"}\r\n                                            bg={\"white\"}\r\n                                            name={\"queston seconds\"}\r\n                                        >\r\n                                            <option value=\"option1\">30 secs</option>\r\n                                            <option value=\"option2\">15 secs</option>\r\n                                            <option value=\"option3\">45 secs</option>\r\n                                        </Select>\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            colorScheme={\"white\"}\r\n                                            variant={\"ghost\"}\r\n                                            leftIcon={<AiOutlineTag/>}\r\n                                        >\r\n                                            Tag topics\r\n                                        </Button>\r\n                                    </HStack>\r\n                                </Box>\r\n                            ))\r\n                        }\r\n                    </Stack>\r\n\r\n                </VStack>\r\n\r\n                {/*ACTION SIDEBAR*/}\r\n                <Box minW={'300px'}>\r\n                    <VStack w={'100%'} p={4} bg={'white'} h={'300px'}>\r\n                        {/*PUBLIC*/}\r\n                        <HStack w={'100%'}>\r\n                            <Spacer/>\r\n                            <Select\r\n                                // placeholder={quiz && !quiz.visibility ? 'Visibility' : ''}\r\n                                defaultValue={quiz && quiz.status ? quiz.status : 0}\r\n                                onChange={(e) => setQuiz(prevState => ({\r\n                                    ...prevState,\r\n                                    status: e.target.value\r\n                                }))}\r\n                                value={quiz && quiz.status || 0}\r\n                                size={'sm'} maxW={40}\r\n                                bg={'blue.200'}>\r\n                                <option value=\"0\">Draft</option>\r\n                                <option value=\"1\">Private\r\n                                </option>\r\n                                <option value=\"2\">Public</option>\r\n                            </Select>\r\n                        </HStack>\r\n                        {/*    */}\r\n                        <Button\r\n                            w={'100%'}\r\n                            size={'sm'}\r\n                            onClick={() => {\r\n                                setShowQuickEditQuiz(true)\r\n                            }}\r\n                            colorScheme={'gray'} leftIcon={<MdEdit/>}>\r\n                            {quiz && quiz.title}\r\n                        </Button>\r\n                        <HStack>\r\n                            <Text width={'50%'} fontWeight={'medium'}>Limit Time</Text>\r\n                            <InputGroup size=\"sm\">\r\n                                <Input\r\n                                    type={'number'}\r\n                                    value={quiz && quiz.limitTime ? quiz.limitTime : 'No Limit Time'}\r\n                                    onChange={(e) => setQuiz((prev) => ({\r\n                                        ...prev,\r\n                                        limitTime: e.target.value\r\n                                    }))}\r\n                                    placeholder=\"default no limit\"/>\r\n                                <InputRightAddon children=\"mins\"/>\r\n                            </InputGroup>\r\n                        </HStack>\r\n                        <Divider/>\r\n                        <HStack justifyContent={'space-between'} w={'100%'}>\r\n                            <Text fontWeight={'medium'}>Code</Text>\r\n                            <Code>{quiz && quiz.code}</Code>\r\n                        </HStack>\r\n                        <HStack justifyContent={'space-between'} w={'100%'}>\r\n                            <Text fontWeight={'medium'}>Subject</Text>\r\n                            <Code>{quiz && quiz.subject.title}</Code>\r\n                        </HStack>\r\n                        <Spacer/>\r\n                        <Button\r\n                            onClick={() => handleSaveQuiz()}\r\n                            alignSelf={'end'} leftIcon={<BiSave/>}>Save</Button>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/*DIAlOGS*/\r\n            }\r\n            <NewQuestionDialog size={size} setSize={setSize}\r\n                               visible={showNewQuestionDialog}\r\n                               setVisible={setShowNewQuestionDialog}/>\r\n            {\r\n                showEditQuestionDialog && <EditQuestionDialog size={size} setSize={setSize}\r\n                                                              selectedQuestion={selectedQuestion}\r\n                                                              visible={showEditQuestionDialog}\r\n                                                              setVisible={setShowEditQuestionDialog}/>\r\n            }\r\n            {\r\n                showQuickEditQuiz && <QuizEditDialog isOpen={showQuickEditQuiz} setOpen={setShowQuickEditQuiz}/>\r\n\r\n            }\r\n\r\n            <HStack position={'fixed'} bottom={10} right={'10'} zIndex={800}>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowUpIcon/>}/>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowDownIcon/>}/>\r\n            </HStack>\r\n\r\n            {\r\n                isLoading && <>\r\n                    <Box\r\n                        left={0}\r\n                        position={'fixed'} top={0} minW={'100vw'} minH={'100vh'} zIndex={100000} bg={'gray.100'}\r\n                        opacity={.5}>\r\n\r\n                    </Box>\r\n                    <CircularProgress\r\n                        transform={\r\n                            'translate(50%,-50%)'\r\n                        }\r\n                        position={'fixed'} top={'50%'}\r\n                        left={'50%'}\r\n                        isIndeterminate color=\"green.300\" zIndex={100001} align={'center'}/>\r\n                </>\r\n            }\r\n\r\n            <AlertDialog\r\n                isOpen={isOpen}\r\n                leastDestructiveRef={cancelRef}\r\n                onClose={() => {\r\n                    setOpen(false)\r\n                    setSelectedQuestion(null)\r\n                }}\r\n            >\r\n                <AlertDialogOverlay>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                            Remove Question\r\n                        </AlertDialogHeader>\r\n\r\n                        <AlertDialogBody>\r\n                            Are you sure? You can't undo this action afterwards.\r\n                        </AlertDialogBody>\r\n\r\n                        <AlertDialogFooter>\r\n                            <Button\r\n                                ref={cancelRef}\r\n                                onClick={() => {\r\n                                    setOpen(false)\r\n                                    setSelectedQuestion(null)\r\n                                }}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button colorScheme=\"red\"\r\n                                    onClick={onRemoveQuestion}\r\n                                    ml={3}>\r\n                                Delete\r\n                            </Button>\r\n                        </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                </AlertDialogOverlay>\r\n            </AlertDialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuizEditor;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\LibraryPage.js",["840","841","842","843","844","845","846","847","848","849","850","851"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button, ButtonGroup,\r\n    Flex, FormControl,\r\n    Heading,\r\n    HStack,\r\n    IconButton,\r\n    Image, Input,\r\n    ListIcon,\r\n    Menu,\r\n    MenuButton,\r\n    MenuItem,\r\n    MenuList, Select,\r\n    Text,\r\n    Tooltip,\r\n    useDisclosure,\r\n    VStack,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    AddIcon,\r\n    ChevronDownIcon,\r\n    DeleteIcon,\r\n    EditIcon,\r\n    TimeIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport {BiShare, BsListCheck, BsPlay, MdAssignment} from \"react-icons/all\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport dateFormat from \"dateformat\";\r\nimport AssignedUsers from \"./AssignedUsers\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport ShareDialog from \"./ShareDialog\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\n\r\nconst LibraryPage = () => {\r\n    const [share, setShare] = useState(false);\r\n    const {setLoading} = useContext(AdminContext);\r\n    const [quizzes, setQuizzes] = useState([]);\r\n    const [filteredQuizzes, setFilteredQuizzes] = useState(null);\r\n    const [selectedQuiz, setSelectedQuiz] = useState(null);\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [params, setParams] = useState({\r\n        direction: \"DESC\",\r\n        sortBy: \"create_date\",\r\n        active: 1\r\n    });\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        console.log(\"rendering............\")\r\n        getCreatedQuizzesInfo();\r\n    }, [params, setParams]);\r\n    const getCreatedQuizzesInfo = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await UserService.getUserQuizzes(params);\r\n            setQuizzes(data.data);\r\n            setFilteredQuizzes(data.data);\r\n            console.log(data.data);\r\n        } catch (e) {\r\n            console.log(\"Failed to fetch created quizzes info\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const getStatus = (status) => {\r\n        switch (status) {\r\n            case 0:\r\n                return \"draft\"\r\n            case 1:\r\n                return \"private\"\r\n            case 2 :\r\n                return \"public\"\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Flex w={\"100%\"} bg={\"gray.100\"} direction={\"column\"}>\r\n                <HStack>\r\n                    <RLink to={'/admin/quiz/removed'}>\r\n                        <Text textDecoration={'underline'}>Removed Quizzes</Text>\r\n                    </RLink>\r\n                    <RLink to={'/admin/quiz/assigment/quizzes'}>\r\n                        <Text textDecoration={'underline'}>Assignment Quizzes</Text>\r\n                    </RLink>\r\n                </HStack>\r\n                {/**/}\r\n                <HStack w={'100%'} py={5}>\r\n                    <Text w={'100%'} fontWeight={\"medium\"}>\r\n                        {quizzes && quizzes.length} Quizzes\r\n                    </Text>\r\n                    <FormControl>\r\n                        <Input\r\n                            onChange={(e) => {\r\n                                const value = e.target.value.toLowerCase();\r\n                                if (value && value.length > 0) {\r\n                                    setFilteredQuizzes(quizzes.filter(item => item.title.toLowerCase().includes(value)))\r\n                                } else {\r\n                                    setFilteredQuizzes(quizzes);\r\n                                }\r\n                            }}\r\n                            placeholder={\"enter quiz title\"}/>\r\n                    </FormControl>\r\n                </HStack>\r\n                <HStack alignSelf={'end'}>\r\n                    <Text>Sort</Text>\r\n                    <Select defaultValue={0}\r\n                            onChange={(e) => {\r\n                                const value = parseInt(e.target.value);\r\n                                switch (value) {\r\n                                    case 0: {\r\n                                        setParams(prev => ({\r\n                                            ...prev,\r\n                                            direction: \"DESC\",\r\n                                            active: 1\r\n                                        }))\r\n                                        break\r\n                                    }\r\n\r\n                                    case 1: {\r\n                                        setParams(prev => ({\r\n                                            ...prev,\r\n                                            direction: \"ASC\",\r\n                                            active: 1\r\n                                        }))\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }}\r\n                    >\r\n                        <option value={0}>Create Date - DESC</option>\r\n                        <option value={1}>Create Date - ASC</option>\r\n                    </Select>\r\n\r\n                </HStack>\r\n                {/*CREATED QUIZZES*/}\r\n                {filteredQuizzes &&\r\n                filteredQuizzes.map((item, i) => {\r\n                    const handleEdit = () => {\r\n                        history.push(`/admin/quiz/${item.id}/edit`);\r\n                    };\r\n                    const updateQuizActive = async (active) => {\r\n                        console.log(item.id);\r\n                        try {\r\n                            const resp = await UserService.updateQuizActive(item.id, active);\r\n                            const q = quizzes.filter(quiz => quiz.id !== item.id);\r\n                            setQuizzes(q);\r\n                            setFilteredQuizzes(q);\r\n                            console.log(\"Remove quiz id : \" + item.id + \" success\");\r\n                        } catch (e) {\r\n                            console.log(\"Failed to update quiz active status\", e);\r\n                        }\r\n\r\n                    }\r\n                    const handleAssignment = () => {\r\n                        history.push(`/admin/quiz/${item.id}/assignment`)\r\n                    }\r\n                    return (\r\n                        <Box\r\n                            my={2}\r\n                            key={i}\r\n                            p={5}\r\n                            minW={\"100\"}\r\n                            bg={\"white\"}\r\n                            maxW={600}\r\n                            position={\"relative\"}\r\n                        >\r\n                            <HStack spacing={5}>\r\n                                {/*IMAGE*/}\r\n                                <Box boxSize=\"100px\">\r\n                                    <Image\r\n                                        src=\"https://cdn-icons-png.flaticon.com/512/1205/1205526.png\"\r\n                                        alt=\"Q\"\r\n                                    />\r\n                                </Box>\r\n                                {/*INFO*/}\r\n                                <VStack align={\"start\"}>\r\n                                    {/*STATUS*/}\r\n                                    <HStack>\r\n                                        <Text\r\n                                            color={\"gray.500\"}\r\n                                            fontSize={12}\r\n                                        >\r\n                                            Quiz\r\n                                        </Text>\r\n                                        <Text\r\n                                            bg={\"teal.100\"}\r\n                                            px={2}\r\n                                            color={\"gray.500\"}\r\n                                            fontSize={12}\r\n                                        >\r\n                                            {\r\n                                                getStatus(item.status)\r\n                                            }\r\n                                        </Text>\r\n                                    </HStack>\r\n                                    {/*TITLE*/}\r\n                                    <Text\r\n                                        fontWeight={\"medium\"}\r\n                                        fontSize={18}\r\n                                    >\r\n                                        {item.title}\r\n                                    </Text>\r\n                                    {/*PLAYED*/}\r\n                                    <HStack spacing={4}>\r\n                                        <HStack>\r\n                                            <IconButton\r\n                                                size={\"xs\"}\r\n                                                icon={<BsListCheck/>}\r\n                                            />\r\n                                            <Text fontSize={12}>\r\n                                                {item.numOfQuestions} Q\r\n                                            </Text>\r\n                                        </HStack>\r\n\r\n                                        <HStack>\r\n                                            <IconButton\r\n                                                size={\"xs\"}\r\n                                                icon={<TimeIcon/>}\r\n                                            />\r\n                                            <Text fontSize={12}>\r\n                                                {item.limitTime} mins\r\n                                            </Text>\r\n                                        </HStack>\r\n                                        <HStack>\r\n                                            <IconButton\r\n                                                size={\"xs\"}\r\n                                                icon={<BsPlay/>}\r\n                                            />\r\n                                            <Text fontSize={12}>\r\n                                                Played {item.playedCount} times\r\n                                            </Text>\r\n                                        </HStack>\r\n                                    </HStack>\r\n                                    {/*CREATED DATE*/}\r\n                                    <Text>\r\n                                        Create At {\": \"}\r\n                                        <Tooltip label={\"Created date\"}>\r\n                                            {dateFormat(\r\n                                                item.createDate,\r\n                                                \"dd-mm-yyyy, h:MM TT\"\r\n                                            )}\r\n                                        </Tooltip>\r\n                                    </Text>\r\n\r\n                                </VStack>\r\n                            </HStack>\r\n                            <HStack\r\n                                spacing={5}\r\n                                position={\"absolute\"}\r\n                                top={5}\r\n                                right={5}\r\n                            >\r\n                                <IconButton\r\n                                    onClick={handleEdit}\r\n                                    size={\"sx\"}\r\n                                    icon={<EditIcon/>}\r\n                                />\r\n                                <Menu>\r\n                                    <MenuButton\r\n                                        bg={\"white\"}\r\n                                        size={\"sm\"}\r\n                                        as={Button}\r\n                                        rightIcon={<ChevronDownIcon/>}\r\n                                    >\r\n                                        {/*Actions*/}\r\n                                    </MenuButton>\r\n                                    <MenuList>\r\n                                        <MenuItem\r\n                                            onClick={() => {\r\n                                                setSelectedQuiz(\r\n                                                    item\r\n                                                );\r\n                                                setOpen(true);\r\n                                            }}\r\n                                        >\r\n                                            Assigned users\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            onClick={() => {\r\n                                                setSelectedQuiz(\r\n                                                    item\r\n                                                );\r\n                                                setShare(true)\r\n                                            }}\r\n                                        >\r\n                                            Share\r\n                                        </MenuItem>\r\n                                        <MenuItem onClick={handleEdit}>\r\n                                            Edit\r\n                                        </MenuItem>\r\n                                        <MenuItem onClick={() => {\r\n                                            updateQuizActive(0)\r\n                                        }}>Remove</MenuItem>\r\n                                    </MenuList>\r\n                                </Menu>\r\n                            </HStack>\r\n                            <IconButton\r\n                                onClick={(() => handleAssignment())}\r\n                                position={\"absolute\"}\r\n                                bottom={10}\r\n                                right={5}\r\n                                size={\"md\"}\r\n                                icon={<MdAssignment/>}\r\n                            />\r\n                        </Box>\r\n                        //    END OF QUIZ ENTRY\r\n                    );\r\n                })}\r\n            </Flex>\r\n\r\n            {share && (\r\n                <ShareDialog quizId={selectedQuiz.id} setVisible={setShare}/>\r\n            )}\r\n            {isOpen && (\r\n                <AssignedUsers\r\n                    quizId={selectedQuiz.id}\r\n                    isOpen={isOpen}\r\n                    setOpen={setOpen}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LibraryPage;\r\n","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\report\\ReportDetailPage.js",["852","853","854","855","856","857","858","859","860","861","862","863"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\RemovedQuizzes.js",["864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button, Flex,\r\n    HStack,\r\n    IconButton,\r\n    Image,\r\n    Menu,\r\n    MenuButton, MenuItem,\r\n    MenuList,\r\n    Text,\r\n    Tooltip, useDisclosure,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BsListCheck, BsPlay, MdAssignment} from \"react-icons/all\";\r\nimport {ChevronDownIcon, EditIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport dateFormat from \"dateformat\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport QuizEntry from \"./QuizEntry\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst RemovedQuizzes = ({i, createDate, title, playedCount, limitTime, numOfQuestions}) => {\r\n\r\n    const [quizzes, setQuizzes] = useState([]);\r\n    // const [] =  useDisclosure();\r\n    useEffect(async () => {\r\n        try {\r\n            const data = await UserService.getUserQuizzes({\r\n                active: 0\r\n            })\r\n            console.log('removed quizzes: ', data.data);\r\n            setQuizzes(data.data);\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n\r\n    const recover = async (id) => {\r\n        try {\r\n            const resp = await UserService\r\n                .updateQuizActive(id, 1);\r\n            const q = quizzes.filter(item => item.id !== id);\r\n            setQuizzes(q);\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex direction={'column'} w={'100%'}>\r\n                <HStack>\r\n                    <Text>{quizzes && quizzes.length} Removed Quizzes</Text>\r\n                </HStack>\r\n                {\r\n                    quizzes && quizzes.map((item, i) => (\r\n                        <QuizEntry key={i}\r\n                                   {\r\n                                       ...item\r\n                                   }\r\n                                   recover={recover}\r\n                        />\r\n                    ))\r\n                }\r\n            </Flex>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RemovedQuizzes;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigned\\AssignedQuizPage.js",["885","886","887","888"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assign\\Assignment.js",["889","890","891","892","893"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\report\\ReportPage.js",["894","895","896","897","898","899","900","901"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\api\\axiosClient.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\admin\\dashboard\\Dashboard.js",["902","903","904","905"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\admin\\setting\\SettingPage.js",["906","907","908","909","910","911","912"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\api\\quizApi.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\CustomAlertDialog.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\start_quiz\\SubmitReportEntry.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\UserService.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\AppService.js",["913"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\QuizService.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\QuizEntry.js",["914","915"],"import React, {useRef, useState} from 'react';\r\nimport {\r\n    AlertDialogBody,\r\n    AlertDialogContent, AlertDialogFooter, AlertDialogHeader,\r\n    AlertDialogOverlay,\r\n    Box,\r\n    Button,\r\n    HStack,\r\n    IconButton,\r\n    Image,\r\n    Menu,\r\n    MenuButton, MenuItem,\r\n    MenuList,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog\r\n} from \"@chakra-ui/react\";\r\nimport {BsListCheck, BsPlay, MdAssignment, RiDeviceRecoverLine} from \"react-icons/all\";\r\nimport {ChevronDownIcon, EditIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport dateFormat from \"dateformat\";\r\nimport UserService from \"../../../service/UserService\";\r\n\r\nconst QuizEntry = ({i, createDate, id, title, playedCount, limitTime, numOfQuestions, recover}) => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const onClose = () => setIsOpen(false)\r\n    const cancelRef = useRef()\r\n    return (\r\n        <>\r\n            <Box\r\n                my={2}\r\n                key={i}\r\n                p={5}\r\n                minW={\"100\"}\r\n                bg={\"white\"}\r\n                maxW={800}\r\n                position={\"relative\"}\r\n            >\r\n                <HStack spacing={5}>\r\n                    {/*IMAGE*/}\r\n                    <Box boxSize=\"100px\">\r\n                        <Image\r\n                            src=\"https://cdn-icons-png.flaticon.com/512/1205/1205526.png\"\r\n                            alt=\"Q\"\r\n                        />\r\n                    </Box>\r\n                    {/*INFO*/}\r\n                    <VStack align={\"start\"}>\r\n                        {/*STATUS*/}\r\n                        <HStack>\r\n                            <Text\r\n                                color={\"gray.500\"}\r\n                                fontSize={12}\r\n                            >\r\n                                Quiz\r\n                            </Text>\r\n                            <Text\r\n                                bg={\"teal.100\"}\r\n                                px={2}\r\n                                color={\"gray.500\"}\r\n                                fontSize={12}\r\n                            >\r\n                                {\r\n                                    // getStatus(item.status)\r\n                                }\r\n                            </Text>\r\n                        </HStack>\r\n                        {/*TITLE*/}\r\n                        <Text\r\n                            fontWeight={\"medium\"}\r\n                            fontSize={18}\r\n                        >\r\n                            {title}\r\n                        </Text>\r\n                        {/*PLAYED*/}\r\n                        <HStack spacing={4}>\r\n                            <HStack>\r\n                                <IconButton\r\n                                    size={\"xs\"}\r\n                                    icon={<BsListCheck/>}\r\n                                />\r\n                                <Text fontSize={12}>\r\n                                    {numOfQuestions} Q\r\n                                </Text>\r\n                            </HStack>\r\n\r\n                            <HStack>\r\n                                <IconButton\r\n                                    size={\"xs\"}\r\n                                    icon={<TimeIcon/>}\r\n                                />\r\n                                <Text fontSize={12}>\r\n                                    {limitTime} mins\r\n                                </Text>\r\n                            </HStack>\r\n                            <HStack>\r\n                                <IconButton\r\n                                    size={\"xs\"}\r\n                                    icon={<BsPlay/>}\r\n                                />\r\n                                <Text fontSize={12}>\r\n                                    Played {playedCount} times\r\n                                </Text>\r\n                            </HStack>\r\n                        </HStack>\r\n                        {/*CREATED DATE*/}\r\n                        <Text>\r\n                            Create At {\": \"}\r\n                            <Tooltip label={\"Created date\"}>\r\n                                {dateFormat(\r\n                                    createDate,\r\n                                    \"dd-mm-yyyy, h:MM TT\"\r\n                                )}\r\n                            </Tooltip>\r\n                        </Text>\r\n\r\n                    </VStack>\r\n                </HStack>\r\n                <HStack\r\n                    spacing={5}\r\n                    position={\"absolute\"}\r\n                    top={5}\r\n                    right={5}\r\n                >\r\n                    <IconButton\r\n                        // onClick={handleEdit}\r\n                        size={\"sx\"}\r\n                        icon={<EditIcon/>}\r\n                    />\r\n                    <Menu>\r\n                        <MenuButton\r\n                            bg={\"white\"}\r\n                            size={\"sm\"}\r\n                            as={Button}\r\n                            rightIcon={<ChevronDownIcon/>}\r\n                        >\r\n                            {/*Actions*/}\r\n                        </MenuButton>\r\n                        <MenuList>\r\n                            <MenuItem\r\n                                // onClick={() => {\r\n                                //     setSelectedQuiz(\r\n                                //         item\r\n                                //     );\r\n                                //     setOpen(true);\r\n                                // }}\r\n                            >\r\n                                Assigned users\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                // onClick={() => {\r\n                                //     setSelectedQuiz(\r\n                                //         item\r\n                                //     );\r\n                                //     setShare(true)\r\n                                // }}\r\n                            >\r\n                                Share\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                // onClick={handleEdit}\r\n                            >\r\n                                Edit\r\n                            </MenuItem>\r\n                            <MenuItem onClick={() => {\r\n                                // updateQuizActive(0)\r\n                            }}>Remove</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </HStack>\r\n                <IconButton\r\n                    onClick={() => {\r\n\r\n                        // recover(id);\r\n\r\n                        setIsOpen(true);\r\n                    }}\r\n                    position={\"absolute\"}\r\n                    bottom={10}\r\n                    right={5}\r\n                    size={\"md\"}\r\n                    icon={<RiDeviceRecoverLine/>}\r\n                />\r\n            </Box>\r\n            <AlertDialog\r\n                isOpen={isOpen}\r\n                leastDestructiveRef={cancelRef}\r\n                onClose={onClose}\r\n            >\r\n                <AlertDialogOverlay>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader fontSize='lg' fontWeight='bold'>\r\n                            Recover quiz : {title}\r\n                        </AlertDialogHeader>\r\n\r\n                        <AlertDialogBody>\r\n                            Are you sure to recover quiz : {title}.\r\n                        </AlertDialogBody>\r\n\r\n                        <AlertDialogFooter>\r\n                            <Button ref={cancelRef} onClick={onClose}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button colorScheme='red' onClick={() => {\r\n                                recover(id);\r\n                                onClose();\r\n                            }} ml={3}>\r\n                                Recover\r\n                            </Button>\r\n                        </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                </AlertDialogOverlay>\r\n            </AlertDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuizEntry;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\ShareDialog.js",["916","917","918"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\library\\AssignedUsers.js",["919","920","921","922","923"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\admin\\setting\\MyAvatar.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\components\\EditQuestionDialog.js",["924","925","926","927","928"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\service\\SubjectService.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\components\\QuizEditDialog.js",["929","930","931"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\quiz_edit\\components\\NewQuestionDialog.js",["932","933","934"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\Nav.js",["935","936","937","938","939","940","941","942","943","944","945","946"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\NotFoundQuiz.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\components\\public\\Footer.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\home\\QuizInfo.js",["947","948","949","950"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigment\\AssignmentQuizzes.js",["951"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport {Badge, Flex, HStack, Text, VStack} from \"@chakra-ui/react\";\r\nimport {Link as RLink, useHistory} from 'react-router-dom';\r\nimport dateFormat from \"dateformat\";\r\n\r\nconst AssignmentQuizzes = () => {\r\n    const {isLoading, setLoading} = useContext(AdminContext);\r\n    const history = useHistory();\r\n    const [assignments, setAssignments] = useState();\r\n    useEffect(() => {\r\n        getAssignmentsInfo();\r\n    }, [])\r\n    const getAssignmentsInfo = async () => {\r\n\r\n        try {\r\n            setLoading(true);\r\n            const resp = await UserService.getAssignmentsInfo();\r\n            setAssignments(resp.data);\r\n            console.log(resp);\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Flex direction={'column'}>\r\n                <HStack>\r\n                    <RLink to={'/admin/library'}>\r\n                        <Text textDecoration={'underline'}>Library</Text>\r\n                    </RLink>\r\n                </HStack>\r\n                <HStack py={'5'}>\r\n                    <Text fontSize={'20px'} fontWeight={'medium'}>Assignment Infos</Text>\r\n                </HStack>\r\n                {!isLoading && assignments && (\r\n                    <>\r\n                        <VStack spacing={5}>\r\n                            {\r\n                                assignments.map((a, i) => (\r\n                                    <Flex\r\n                                        onClick={() => {\r\n                                            history.push(`/admin/assigment/${a.id}/report`)\r\n                                        }}\r\n                                        cursor={'pointer'} bg={'teal.100'} p={'2'} w={'100%'} key={i}\r\n                                        alignItems={'center'}\r\n                                        justifyContent={'space-between'}>\r\n                                        <VStack align={'start'} key={i}>\r\n                                            <HStack>\r\n                                                <Text fontWeight={'medium'} fontSize={'20px'}\r\n                                                      textTransform={'uppercase'}>{a.title}\r\n                                                </Text>\r\n                                                {'('}\r\n                                                <Text>{a.quiz.title}</Text>\r\n                                                {')'}\r\n                                            </HStack>\r\n\r\n                                            <Text>{a.description}</Text>\r\n                                        </VStack>\r\n                                        <HStack>\r\n                                            <Badge>\r\n                                                {dateFormat(a.startDate, 'dd-mm-yyyy hh:MM')}\r\n                                            </Badge>\r\n                                            {'-'}\r\n                                            <Badge>\r\n                                                {dateFormat(a.finishDate, 'dd-mm-yyyy hh:MM')}\r\n                                            </Badge>\r\n                                        </HStack>\r\n                                    </Flex>\r\n                                ))\r\n                            }\r\n                        </VStack>\r\n\r\n                    </>\r\n                )}\r\n\r\n            </Flex>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignmentQuizzes;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigment\\AssignmentReport.js",["952"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\Public.js",["953"],"import React, {Component} from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomePage from \"./home/HomePage\";\r\nimport JoinQuizInfo from \"./quiz_info/JoinQuizInfo\";\r\nimport StartQuiz from \"./start_quiz/StartQuiz\";\r\nimport RegisterPage from \"./register/RegisterPage\";\r\nimport StartExamQuiz from \"./start_quiz/StartExamQuiz\";\r\n\r\nclass Public extends Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path={\"/\"} exact component={HomePage}/>\r\n                <Route path={\"/register\"} exact component={RegisterPage}/>\r\n                <Route path={\"/join/quiz/:code\"} exact component={JoinQuizInfo}/>\r\n                <Route path={\"/join/quiz/:code/start\"} component={StartQuiz}/>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Public;","C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\public\\start_quiz\\StartExamQuiz.js",["954","955","956","957","958","959","960","961"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigned\\AssignedInfo.js",["962","963","964","965","966"],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\utils\\ApplicationUtils.js",[],"C:\\Users\\Admin\\Documents\\quiz maker client\\src\\pages\\admin\\assigment\\EditAssignment.js",["967","968","969","970","971","972","973","974","975","976","977"],{"ruleId":"978","replacedBy":"979"},{"ruleId":"980","replacedBy":"981"},{"ruleId":"982","severity":1,"message":"983","line":1,"column":26,"nodeType":"984","messageId":"985","endLine":1,"endColumn":32},{"ruleId":"982","severity":1,"message":"986","line":4,"column":9,"nodeType":"984","messageId":"985","endLine":4,"endColumn":18},{"ruleId":"982","severity":1,"message":"987","line":5,"column":8,"nodeType":"984","messageId":"985","endLine":5,"endColumn":14},{"ruleId":"982","severity":1,"message":"988","line":6,"column":8,"nodeType":"984","messageId":"985","endLine":6,"endColumn":13},{"ruleId":"982","severity":1,"message":"989","line":8,"column":8,"nodeType":"984","messageId":"985","endLine":8,"endColumn":13},{"ruleId":"982","severity":1,"message":"990","line":12,"column":8,"nodeType":"984","messageId":"985","endLine":12,"endColumn":28},{"ruleId":"982","severity":1,"message":"991","line":16,"column":12,"nodeType":"984","messageId":"985","endLine":16,"endColumn":16},{"ruleId":"982","severity":1,"message":"992","line":17,"column":12,"nodeType":"984","messageId":"985","endLine":17,"endColumn":22},{"ruleId":"982","severity":1,"message":"993","line":17,"column":24,"nodeType":"984","messageId":"985","endLine":17,"endColumn":37},{"ruleId":"982","severity":1,"message":"994","line":18,"column":12,"nodeType":"984","messageId":"985","endLine":18,"endColumn":16},{"ruleId":"982","severity":1,"message":"995","line":18,"column":18,"nodeType":"984","messageId":"985","endLine":18,"endColumn":25},{"ruleId":"982","severity":1,"message":"996","line":1,"column":8,"nodeType":"984","messageId":"985","endLine":1,"endColumn":13},{"ruleId":"982","severity":1,"message":"997","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":24},{"ruleId":"982","severity":1,"message":"998","line":1,"column":38,"nodeType":"984","messageId":"985","endLine":1,"endColumn":51},{"ruleId":"982","severity":1,"message":"986","line":1,"column":53,"nodeType":"984","messageId":"985","endLine":1,"endColumn":62},{"ruleId":"982","severity":1,"message":"999","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":13},{"ruleId":"982","severity":1,"message":"1000","line":7,"column":5,"nodeType":"984","messageId":"985","endLine":7,"endColumn":14},{"ruleId":"982","severity":1,"message":"1001","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":12},{"ruleId":"982","severity":1,"message":"1002","line":11,"column":5,"nodeType":"984","messageId":"985","endLine":11,"endColumn":15},{"ruleId":"982","severity":1,"message":"1003","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":10},{"ruleId":"982","severity":1,"message":"1004","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":11},{"ruleId":"982","severity":1,"message":"1005","line":15,"column":5,"nodeType":"984","messageId":"985","endLine":15,"endColumn":15},{"ruleId":"982","severity":1,"message":"1006","line":16,"column":5,"nodeType":"984","messageId":"985","endLine":16,"endColumn":11},{"ruleId":"982","severity":1,"message":"1007","line":18,"column":5,"nodeType":"984","messageId":"985","endLine":18,"endColumn":8},{"ruleId":"982","severity":1,"message":"1008","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":13},{"ruleId":"982","severity":1,"message":"1009","line":21,"column":5,"nodeType":"984","messageId":"985","endLine":21,"endColumn":12},{"ruleId":"982","severity":1,"message":"1010","line":28,"column":5,"nodeType":"984","messageId":"985","endLine":28,"endColumn":13},{"ruleId":"982","severity":1,"message":"1011","line":29,"column":5,"nodeType":"984","messageId":"985","endLine":29,"endColumn":15},{"ruleId":"982","severity":1,"message":"1012","line":30,"column":5,"nodeType":"984","messageId":"985","endLine":30,"endColumn":13},{"ruleId":"982","severity":1,"message":"1013","line":31,"column":5,"nodeType":"984","messageId":"985","endLine":31,"endColumn":13},{"ruleId":"982","severity":1,"message":"1014","line":32,"column":5,"nodeType":"984","messageId":"985","endLine":32,"endColumn":13},{"ruleId":"982","severity":1,"message":"1015","line":34,"column":28,"nodeType":"984","messageId":"985","endLine":34,"endColumn":49},{"ruleId":"982","severity":1,"message":"1016","line":35,"column":10,"nodeType":"984","messageId":"985","endLine":35,"endColumn":22},{"ruleId":"982","severity":1,"message":"1017","line":35,"column":24,"nodeType":"984","messageId":"985","endLine":35,"endColumn":29},{"ruleId":"982","severity":1,"message":"1018","line":35,"column":31,"nodeType":"984","messageId":"985","endLine":35,"endColumn":36},{"ruleId":"982","severity":1,"message":"1019","line":37,"column":10,"nodeType":"984","messageId":"985","endLine":37,"endColumn":17},{"ruleId":"982","severity":1,"message":"1020","line":39,"column":8,"nodeType":"984","messageId":"985","endLine":39,"endColumn":13},{"ruleId":"982","severity":1,"message":"1021","line":44,"column":26,"nodeType":"984","messageId":"985","endLine":44,"endColumn":40},{"ruleId":"1022","severity":1,"message":"1023","line":206,"column":13,"nodeType":"1024","messageId":"1025","endLine":206,"endColumn":27},{"ruleId":"1022","severity":1,"message":"1023","line":209,"column":43,"nodeType":"1024","messageId":"1025","endLine":209,"endColumn":58},{"ruleId":"978","replacedBy":"1026"},{"ruleId":"980","replacedBy":"1027"},{"ruleId":"982","severity":1,"message":"997","line":1,"column":17,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1028","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":11},{"ruleId":"982","severity":1,"message":"1000","line":7,"column":5,"nodeType":"984","messageId":"985","endLine":7,"endColumn":14},{"ruleId":"982","severity":1,"message":"1029","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":16},{"ruleId":"982","severity":1,"message":"1019","line":19,"column":10,"nodeType":"984","messageId":"985","endLine":19,"endColumn":17},{"ruleId":"982","severity":1,"message":"1030","line":33,"column":11,"nodeType":"984","messageId":"985","endLine":33,"endColumn":20},{"ruleId":"978","replacedBy":"1031"},{"ruleId":"980","replacedBy":"1032"},{"ruleId":"982","severity":1,"message":"1019","line":18,"column":10,"nodeType":"984","messageId":"985","endLine":18,"endColumn":17},{"ruleId":"982","severity":1,"message":"1033","line":19,"column":10,"nodeType":"984","messageId":"985","endLine":19,"endColumn":23},{"ruleId":"982","severity":1,"message":"1034","line":2,"column":8,"nodeType":"984","messageId":"985","endLine":2,"endColumn":25},{"ruleId":"982","severity":1,"message":"1035","line":3,"column":18,"nodeType":"984","messageId":"985","endLine":3,"endColumn":24},{"ruleId":"982","severity":1,"message":"1036","line":4,"column":9,"nodeType":"984","messageId":"985","endLine":4,"endColumn":14},{"ruleId":"982","severity":1,"message":"1037","line":5,"column":8,"nodeType":"984","messageId":"985","endLine":5,"endColumn":19},{"ruleId":"982","severity":1,"message":"1038","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1039","line":3,"column":5,"nodeType":"984","messageId":"985","endLine":3,"endColumn":11},{"ruleId":"982","severity":1,"message":"1040","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":19},{"ruleId":"982","severity":1,"message":"1041","line":20,"column":8,"nodeType":"984","messageId":"985","endLine":20,"endColumn":18},{"ruleId":"982","severity":1,"message":"1042","line":21,"column":8,"nodeType":"984","messageId":"985","endLine":21,"endColumn":19},{"ruleId":"982","severity":1,"message":"1043","line":66,"column":19,"nodeType":"984","messageId":"985","endLine":66,"endColumn":23},{"ruleId":"1022","severity":1,"message":"1023","line":110,"column":54,"nodeType":"1024","messageId":"1025","endLine":110,"endColumn":69},{"ruleId":"978","replacedBy":"1044"},{"ruleId":"980","replacedBy":"1045"},{"ruleId":"982","severity":1,"message":"989","line":2,"column":8,"nodeType":"984","messageId":"985","endLine":2,"endColumn":13},{"ruleId":"1046","severity":1,"message":"1047","line":75,"column":15,"nodeType":"1048","endLine":79,"endColumn":6},{"ruleId":"982","severity":1,"message":"1028","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":11},{"ruleId":"982","severity":1,"message":"1049","line":7,"column":5,"nodeType":"984","messageId":"985","endLine":7,"endColumn":9},{"ruleId":"982","severity":1,"message":"1050","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":13},{"ruleId":"982","severity":1,"message":"1005","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":15},{"ruleId":"982","severity":1,"message":"1051","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":9},{"ruleId":"982","severity":1,"message":"1052","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":13},{"ruleId":"982","severity":1,"message":"1001","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":12},{"ruleId":"982","severity":1,"message":"1003","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":10},{"ruleId":"982","severity":1,"message":"1020","line":27,"column":8,"nodeType":"984","messageId":"985","endLine":27,"endColumn":13},{"ruleId":"982","severity":1,"message":"1019","line":28,"column":9,"nodeType":"984","messageId":"985","endLine":28,"endColumn":16},{"ruleId":"982","severity":1,"message":"1053","line":31,"column":8,"nodeType":"984","messageId":"985","endLine":31,"endColumn":15},{"ruleId":"982","severity":1,"message":"1054","line":35,"column":11,"nodeType":"984","messageId":"985","endLine":35,"endColumn":18},{"ruleId":"982","severity":1,"message":"1055","line":39,"column":12,"nodeType":"984","messageId":"985","endLine":39,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":80,"column":21,"nodeType":"1058","messageId":"1059","endLine":80,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":80,"column":37,"nodeType":"1058","messageId":"1059","endLine":80,"endColumn":39},{"ruleId":"1056","severity":1,"message":"1057","line":179,"column":71,"nodeType":"1058","messageId":"1059","endLine":179,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":179,"column":83,"nodeType":"1058","messageId":"1059","endLine":179,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":180,"column":71,"nodeType":"1058","messageId":"1059","endLine":180,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":180,"column":83,"nodeType":"1058","messageId":"1059","endLine":180,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":181,"column":71,"nodeType":"1058","messageId":"1059","endLine":181,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":181,"column":83,"nodeType":"1058","messageId":"1059","endLine":181,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":182,"column":71,"nodeType":"1058","messageId":"1059","endLine":182,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":182,"column":83,"nodeType":"1058","messageId":"1059","endLine":182,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":183,"column":71,"nodeType":"1058","messageId":"1059","endLine":183,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":183,"column":83,"nodeType":"1058","messageId":"1059","endLine":183,"endColumn":85},{"ruleId":"982","severity":1,"message":"997","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":24},{"ruleId":"982","severity":1,"message":"1060","line":17,"column":20,"nodeType":"984","messageId":"985","endLine":17,"endColumn":26},{"ruleId":"982","severity":1,"message":"1001","line":17,"column":28,"nodeType":"984","messageId":"985","endLine":17,"endColumn":35},{"ruleId":"982","severity":1,"message":"1061","line":17,"column":37,"nodeType":"984","messageId":"985","endLine":17,"endColumn":43},{"ruleId":"982","severity":1,"message":"1062","line":17,"column":45,"nodeType":"984","messageId":"985","endLine":17,"endColumn":50},{"ruleId":"982","severity":1,"message":"1063","line":17,"column":52,"nodeType":"984","messageId":"985","endLine":17,"endColumn":63},{"ruleId":"982","severity":1,"message":"1064","line":17,"column":65,"nodeType":"984","messageId":"985","endLine":17,"endColumn":74},{"ruleId":"982","severity":1,"message":"1040","line":17,"column":76,"nodeType":"984","messageId":"985","endLine":17,"endColumn":90},{"ruleId":"982","severity":1,"message":"1051","line":17,"column":92,"nodeType":"984","messageId":"985","endLine":17,"endColumn":96},{"ruleId":"982","severity":1,"message":"1052","line":17,"column":98,"nodeType":"984","messageId":"985","endLine":17,"endColumn":106},{"ruleId":"982","severity":1,"message":"1007","line":17,"column":108,"nodeType":"984","messageId":"985","endLine":17,"endColumn":111},{"ruleId":"982","severity":1,"message":"1065","line":23,"column":23,"nodeType":"984","messageId":"985","endLine":23,"endColumn":30},{"ruleId":"982","severity":1,"message":"999","line":5,"column":18,"nodeType":"984","messageId":"985","endLine":5,"endColumn":26},{"ruleId":"982","severity":1,"message":"1066","line":19,"column":12,"nodeType":"984","messageId":"985","endLine":19,"endColumn":17},{"ruleId":"982","severity":1,"message":"1067","line":19,"column":19,"nodeType":"984","messageId":"985","endLine":19,"endColumn":33},{"ruleId":"982","severity":1,"message":"1068","line":19,"column":35,"nodeType":"984","messageId":"985","endLine":19,"endColumn":42},{"ruleId":"982","severity":1,"message":"1069","line":37,"column":19,"nodeType":"984","messageId":"985","endLine":37,"endColumn":23},{"ruleId":"982","severity":1,"message":"986","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1070","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":9},{"ruleId":"982","severity":1,"message":"1007","line":10,"column":12,"nodeType":"984","messageId":"985","endLine":10,"endColumn":15},{"ruleId":"982","severity":1,"message":"1053","line":12,"column":8,"nodeType":"984","messageId":"985","endLine":12,"endColumn":15},{"ruleId":"982","severity":1,"message":"1071","line":2,"column":22,"nodeType":"984","messageId":"985","endLine":2,"endColumn":33},{"ruleId":"982","severity":1,"message":"1072","line":3,"column":9,"nodeType":"984","messageId":"985","endLine":3,"endColumn":29},{"ruleId":"982","severity":1,"message":"1073","line":3,"column":31,"nodeType":"984","messageId":"985","endLine":3,"endColumn":44},{"ruleId":"982","severity":1,"message":"1020","line":6,"column":8,"nodeType":"984","messageId":"985","endLine":6,"endColumn":13},{"ruleId":"982","severity":1,"message":"1053","line":8,"column":8,"nodeType":"984","messageId":"985","endLine":8,"endColumn":15},{"ruleId":"982","severity":1,"message":"1074","line":16,"column":41,"nodeType":"984","messageId":"985","endLine":16,"endColumn":53},{"ruleId":"982","severity":1,"message":"991","line":17,"column":12,"nodeType":"984","messageId":"985","endLine":17,"endColumn":16},{"ruleId":"1046","severity":1,"message":"1047","line":20,"column":15,"nodeType":"1048","endLine":32,"endColumn":6},{"ruleId":"1046","severity":1,"message":"1075","line":32,"column":8,"nodeType":"1076","endLine":32,"endColumn":10,"suggestions":"1077"},{"ruleId":"982","severity":1,"message":"1078","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":16},{"ruleId":"982","severity":1,"message":"1079","line":15,"column":5,"nodeType":"984","messageId":"985","endLine":15,"endColumn":20},{"ruleId":"982","severity":1,"message":"1080","line":16,"column":5,"nodeType":"984","messageId":"985","endLine":16,"endColumn":22},{"ruleId":"982","severity":1,"message":"1081","line":17,"column":5,"nodeType":"984","messageId":"985","endLine":17,"endColumn":22},{"ruleId":"982","severity":1,"message":"1082","line":18,"column":5,"nodeType":"984","messageId":"985","endLine":18,"endColumn":23},{"ruleId":"982","severity":1,"message":"1083","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":23},{"ruleId":"982","severity":1,"message":"1020","line":23,"column":8,"nodeType":"984","messageId":"985","endLine":23,"endColumn":13},{"ruleId":"982","severity":1,"message":"1053","line":25,"column":8,"nodeType":"984","messageId":"985","endLine":25,"endColumn":15},{"ruleId":"982","severity":1,"message":"991","line":40,"column":12,"nodeType":"984","messageId":"985","endLine":40,"endColumn":16},{"ruleId":"982","severity":1,"message":"1054","line":42,"column":11,"nodeType":"984","messageId":"985","endLine":42,"endColumn":18},{"ruleId":"1046","severity":1,"message":"1047","line":44,"column":15,"nodeType":"1048","endLine":76,"endColumn":10},{"ruleId":"1046","severity":1,"message":"1084","line":77,"column":11,"nodeType":"1076","endLine":77,"endColumn":13,"suggestions":"1085"},{"ruleId":"982","severity":1,"message":"1071","line":4,"column":13,"nodeType":"984","messageId":"985","endLine":4,"endColumn":24},{"ruleId":"982","severity":1,"message":"1001","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":12},{"ruleId":"982","severity":1,"message":"1086","line":10,"column":5,"nodeType":"984","messageId":"985","endLine":10,"endColumn":13},{"ruleId":"982","severity":1,"message":"1087","line":17,"column":5,"nodeType":"984","messageId":"985","endLine":17,"endColumn":18},{"ruleId":"982","severity":1,"message":"1065","line":21,"column":5,"nodeType":"984","messageId":"985","endLine":21,"endColumn":12},{"ruleId":"982","severity":1,"message":"1011","line":23,"column":5,"nodeType":"984","messageId":"985","endLine":23,"endColumn":15},{"ruleId":"982","severity":1,"message":"1088","line":28,"column":9,"nodeType":"984","messageId":"985","endLine":28,"endColumn":16},{"ruleId":"982","severity":1,"message":"1053","line":29,"column":8,"nodeType":"984","messageId":"985","endLine":29,"endColumn":15},{"ruleId":"1046","severity":1,"message":"1089","line":54,"column":8,"nodeType":"1076","endLine":54,"endColumn":27,"suggestions":"1090"},{"ruleId":"1091","severity":1,"message":"1092","line":70,"column":9,"nodeType":"1093","messageId":"1094","endLine":77,"endColumn":10},{"ruleId":"1091","severity":1,"message":"1092","line":110,"column":33,"nodeType":"1093","messageId":"1094","endLine":128,"endColumn":34},{"ruleId":"982","severity":1,"message":"1069","line":145,"column":35,"nodeType":"984","messageId":"985","endLine":145,"endColumn":39},{"ruleId":"982","severity":1,"message":"1095","line":4,"column":5,"nodeType":"984","messageId":"985","endLine":4,"endColumn":8},{"ruleId":"982","severity":1,"message":"1055","line":22,"column":12,"nodeType":"984","messageId":"985","endLine":22,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1097","line":70,"column":48,"nodeType":"1098","messageId":"1099","endLine":70,"endColumn":50},{"ruleId":"982","severity":1,"message":"1100","line":3,"column":30,"nodeType":"984","messageId":"985","endLine":3,"endColumn":34},{"ruleId":"982","severity":1,"message":"1087","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":18},{"ruleId":"982","severity":1,"message":"1053","line":11,"column":8,"nodeType":"984","messageId":"985","endLine":11,"endColumn":15},{"ruleId":"1046","severity":1,"message":"1101","line":40,"column":8,"nodeType":"1076","endLine":40,"endColumn":10,"suggestions":"1102"},{"ruleId":"1096","severity":1,"message":"1103","line":55,"column":71,"nodeType":"1098","messageId":"1099","endLine":55,"endColumn":73},{"ruleId":"982","severity":1,"message":"1104","line":1,"column":31,"nodeType":"984","messageId":"985","endLine":1,"endColumn":41},{"ruleId":"982","severity":1,"message":"1105","line":2,"column":14,"nodeType":"984","messageId":"985","endLine":2,"endColumn":30},{"ruleId":"982","severity":1,"message":"1106","line":2,"column":9,"nodeType":"984","messageId":"985","endLine":2,"endColumn":22},{"ruleId":"982","severity":1,"message":"1001","line":4,"column":9,"nodeType":"984","messageId":"985","endLine":4,"endColumn":16},{"ruleId":"982","severity":1,"message":"1107","line":15,"column":9,"nodeType":"984","messageId":"985","endLine":15,"endColumn":24},{"ruleId":"982","severity":1,"message":"1108","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1104","line":1,"column":27,"nodeType":"984","messageId":"985","endLine":1,"endColumn":37},{"ruleId":"982","severity":1,"message":"1109","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":9},{"ruleId":"982","severity":1,"message":"1110","line":17,"column":5,"nodeType":"984","messageId":"985","endLine":17,"endColumn":13},{"ruleId":"982","severity":1,"message":"1111","line":18,"column":5,"nodeType":"984","messageId":"985","endLine":18,"endColumn":14},{"ruleId":"982","severity":1,"message":"1028","line":23,"column":23,"nodeType":"984","messageId":"985","endLine":23,"endColumn":29},{"ruleId":"982","severity":1,"message":"1112","line":35,"column":9,"nodeType":"984","messageId":"985","endLine":35,"endColumn":17},{"ruleId":"982","severity":1,"message":"1113","line":36,"column":9,"nodeType":"984","messageId":"985","endLine":36,"endColumn":18},{"ruleId":"982","severity":1,"message":"1114","line":37,"column":18,"nodeType":"984","messageId":"985","endLine":37,"endColumn":32},{"ruleId":"982","severity":1,"message":"1115","line":38,"column":29,"nodeType":"984","messageId":"985","endLine":38,"endColumn":34},{"ruleId":"982","severity":1,"message":"1116","line":40,"column":9,"nodeType":"984","messageId":"985","endLine":40,"endColumn":18},{"ruleId":"982","severity":1,"message":"1117","line":41,"column":9,"nodeType":"984","messageId":"985","endLine":41,"endColumn":21},{"ruleId":"982","severity":1,"message":"1010","line":15,"column":46,"nodeType":"984","messageId":"985","endLine":15,"endColumn":54},{"ruleId":"982","severity":1,"message":"1012","line":15,"column":68,"nodeType":"984","messageId":"985","endLine":15,"endColumn":76},{"ruleId":"1046","severity":1,"message":"1118","line":63,"column":8,"nodeType":"1076","endLine":63,"endColumn":10,"suggestions":"1119"},{"ruleId":"982","severity":1,"message":"1069","line":68,"column":19,"nodeType":"984","messageId":"985","endLine":68,"endColumn":23},{"ruleId":"982","severity":1,"message":"1069","line":30,"column":19,"nodeType":"984","messageId":"985","endLine":30,"endColumn":23},{"ruleId":"982","severity":1,"message":"994","line":16,"column":12,"nodeType":"984","messageId":"985","endLine":16,"endColumn":16},{"ruleId":"982","severity":1,"message":"1120","line":19,"column":12,"nodeType":"984","messageId":"985","endLine":19,"endColumn":19},{"ruleId":"982","severity":1,"message":"1121","line":19,"column":21,"nodeType":"984","messageId":"985","endLine":19,"endColumn":31},{"ruleId":"982","severity":1,"message":"1122","line":19,"column":12,"nodeType":"984","messageId":"985","endLine":19,"endColumn":25},{"ruleId":"982","severity":1,"message":"1123","line":19,"column":27,"nodeType":"984","messageId":"985","endLine":19,"endColumn":43},{"ruleId":"1046","severity":1,"message":"1124","line":24,"column":8,"nodeType":"1076","endLine":24,"endColumn":10,"suggestions":"1125"},{"ruleId":"982","severity":1,"message":"994","line":17,"column":12,"nodeType":"984","messageId":"985","endLine":17,"endColumn":16},{"ruleId":"982","severity":1,"message":"1120","line":20,"column":12,"nodeType":"984","messageId":"985","endLine":20,"endColumn":19},{"ruleId":"982","severity":1,"message":"1121","line":20,"column":21,"nodeType":"984","messageId":"985","endLine":20,"endColumn":31},{"ruleId":"1046","severity":1,"message":"1126","line":25,"column":8,"nodeType":"1076","endLine":25,"endColumn":10,"suggestions":"1127"},{"ruleId":"982","severity":1,"message":"1069","line":102,"column":23,"nodeType":"984","messageId":"985","endLine":102,"endColumn":27},{"ruleId":"982","severity":1,"message":"1001","line":4,"column":5,"nodeType":"984","messageId":"985","endLine":4,"endColumn":12},{"ruleId":"982","severity":1,"message":"1060","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":11},{"ruleId":"982","severity":1,"message":"1006","line":5,"column":72,"nodeType":"984","messageId":"985","endLine":5,"endColumn":78},{"ruleId":"982","severity":1,"message":"1128","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":10},{"ruleId":"982","severity":1,"message":"1070","line":11,"column":5,"nodeType":"984","messageId":"985","endLine":11,"endColumn":9},{"ruleId":"982","severity":1,"message":"1129","line":19,"column":9,"nodeType":"984","messageId":"985","endLine":19,"endColumn":22},{"ruleId":"982","severity":1,"message":"1130","line":20,"column":9,"nodeType":"984","messageId":"985","endLine":20,"endColumn":24},{"ruleId":"1046","severity":1,"message":"1047","line":25,"column":15,"nodeType":"1048","endLine":39,"endColumn":6},{"ruleId":"982","severity":1,"message":"1071","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":16},{"ruleId":"982","severity":1,"message":"1131","line":11,"column":5,"nodeType":"984","messageId":"985","endLine":11,"endColumn":10},{"ruleId":"982","severity":1,"message":"1132","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":15},{"ruleId":"982","severity":1,"message":"1004","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":11},{"ruleId":"982","severity":1,"message":"1133","line":15,"column":5,"nodeType":"984","messageId":"985","endLine":15,"endColumn":13},{"ruleId":"982","severity":1,"message":"1134","line":16,"column":5,"nodeType":"984","messageId":"985","endLine":16,"endColumn":18},{"ruleId":"982","severity":1,"message":"1028","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":11},{"ruleId":"982","severity":1,"message":"1019","line":24,"column":9,"nodeType":"984","messageId":"985","endLine":24,"endColumn":16},{"ruleId":"982","severity":1,"message":"1135","line":25,"column":9,"nodeType":"984","messageId":"985","endLine":25,"endColumn":24},{"ruleId":"982","severity":1,"message":"1020","line":26,"column":8,"nodeType":"984","messageId":"985","endLine":26,"endColumn":13},{"ruleId":"982","severity":1,"message":"1021","line":46,"column":25,"nodeType":"984","messageId":"985","endLine":46,"endColumn":39},{"ruleId":"1046","severity":1,"message":"1136","line":86,"column":8,"nodeType":"1076","endLine":86,"endColumn":10,"suggestions":"1137"},{"ruleId":"1022","severity":1,"message":"1023","line":109,"column":17,"nodeType":"1024","messageId":"1025","endLine":109,"endColumn":29},{"ruleId":"1022","severity":1,"message":"1023","line":112,"column":17,"nodeType":"1024","messageId":"1025","endLine":112,"endColumn":33},{"ruleId":"982","severity":1,"message":"1001","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":12},{"ruleId":"982","severity":1,"message":"1138","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":10},{"ruleId":"982","severity":1,"message":"1139","line":15,"column":26,"nodeType":"984","messageId":"985","endLine":15,"endColumn":37},{"ruleId":"982","severity":1,"message":"1100","line":17,"column":13,"nodeType":"984","messageId":"985","endLine":17,"endColumn":17},{"ruleId":"982","severity":1,"message":"1009","line":17,"column":19,"nodeType":"984","messageId":"985","endLine":17,"endColumn":26},{"ruleId":"982","severity":1,"message":"1000","line":17,"column":28,"nodeType":"984","messageId":"985","endLine":17,"endColumn":37},{"ruleId":"982","severity":1,"message":"1140","line":19,"column":9,"nodeType":"984","messageId":"985","endLine":19,"endColumn":18},{"ruleId":"982","severity":1,"message":"1141","line":20,"column":9,"nodeType":"984","messageId":"985","endLine":20,"endColumn":23},{"ruleId":"982","severity":1,"message":"1142","line":20,"column":25,"nodeType":"984","messageId":"985","endLine":20,"endColumn":32},{"ruleId":"982","severity":1,"message":"1143","line":20,"column":43,"nodeType":"984","messageId":"985","endLine":20,"endColumn":53},{"ruleId":"1046","severity":1,"message":"1047","line":30,"column":15,"nodeType":"1048","endLine":47,"endColumn":6},{"ruleId":"1046","severity":1,"message":"1144","line":47,"column":8,"nodeType":"1076","endLine":47,"endColumn":10,"suggestions":"1145"},{"ruleId":"982","severity":1,"message":"1146","line":20,"column":33,"nodeType":"984","messageId":"985","endLine":20,"endColumn":41},{"ruleId":"1046","severity":1,"message":"1101","line":32,"column":8,"nodeType":"1076","endLine":32,"endColumn":10,"suggestions":"1147"},{"ruleId":"1096","severity":1,"message":"1103","line":164,"column":66,"nodeType":"1098","messageId":"1099","endLine":164,"endColumn":68},{"ruleId":"982","severity":1,"message":"1001","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":12},{"ruleId":"982","severity":1,"message":"1148","line":25,"column":12,"nodeType":"984","messageId":"985","endLine":25,"endColumn":18},{"ruleId":"982","severity":1,"message":"1149","line":25,"column":20,"nodeType":"984","messageId":"985","endLine":25,"endColumn":29},{"ruleId":"982","severity":1,"message":"1150","line":32,"column":11,"nodeType":"984","messageId":"985","endLine":32,"endColumn":16},{"ruleId":"1046","severity":1,"message":"1151","line":41,"column":8,"nodeType":"1076","endLine":41,"endColumn":10,"suggestions":"1152"},{"ruleId":"982","severity":1,"message":"1153","line":16,"column":17,"nodeType":"984","messageId":"985","endLine":16,"endColumn":23},{"ruleId":"982","severity":1,"message":"1068","line":21,"column":19,"nodeType":"984","messageId":"985","endLine":21,"endColumn":26},{"ruleId":"982","severity":1,"message":"1154","line":9,"column":24,"nodeType":"984","messageId":"985","endLine":9,"endColumn":40},{"ruleId":"982","severity":1,"message":"1067","line":20,"column":12,"nodeType":"984","messageId":"985","endLine":20,"endColumn":26},{"ruleId":"982","severity":1,"message":"1155","line":1,"column":8,"nodeType":"984","messageId":"985","endLine":1,"endColumn":19},{"ruleId":"982","severity":1,"message":"1095","line":3,"column":5,"nodeType":"984","messageId":"985","endLine":3,"endColumn":8},{"ruleId":"982","severity":1,"message":"1156","line":4,"column":5,"nodeType":"984","messageId":"985","endLine":4,"endColumn":11},{"ruleId":"982","severity":1,"message":"1002","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":15},{"ruleId":"982","severity":1,"message":"1003","line":7,"column":5,"nodeType":"984","messageId":"985","endLine":7,"endColumn":10},{"ruleId":"982","severity":1,"message":"1157","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":9},{"ruleId":"982","severity":1,"message":"1158","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":15},{"ruleId":"982","severity":1,"message":"1159","line":9,"column":17,"nodeType":"984","messageId":"985","endLine":9,"endColumn":25},{"ruleId":"982","severity":1,"message":"1160","line":10,"column":5,"nodeType":"984","messageId":"985","endLine":10,"endColumn":13},{"ruleId":"982","severity":1,"message":"1009","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":12},{"ruleId":"982","severity":1,"message":"1087","line":12,"column":14,"nodeType":"984","messageId":"985","endLine":12,"endColumn":27},{"ruleId":"982","severity":1,"message":"1061","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":11},{"ruleId":"982","severity":1,"message":"1161","line":15,"column":9,"nodeType":"984","messageId":"985","endLine":15,"endColumn":20},{"ruleId":"982","severity":1,"message":"1162","line":15,"column":22,"nodeType":"984","messageId":"985","endLine":15,"endColumn":28},{"ruleId":"982","severity":1,"message":"1163","line":15,"column":30,"nodeType":"984","messageId":"985","endLine":15,"endColumn":42},{"ruleId":"982","severity":1,"message":"1130","line":16,"column":9,"nodeType":"984","messageId":"985","endLine":16,"endColumn":24},{"ruleId":"982","severity":1,"message":"1012","line":16,"column":26,"nodeType":"984","messageId":"985","endLine":16,"endColumn":34},{"ruleId":"982","severity":1,"message":"1013","line":16,"column":36,"nodeType":"984","messageId":"985","endLine":16,"endColumn":44},{"ruleId":"982","severity":1,"message":"1164","line":17,"column":8,"nodeType":"984","messageId":"985","endLine":17,"endColumn":18},{"ruleId":"982","severity":1,"message":"1042","line":20,"column":8,"nodeType":"984","messageId":"985","endLine":20,"endColumn":19},{"ruleId":"1046","severity":1,"message":"1047","line":26,"column":15,"nodeType":"1048","endLine":36,"endColumn":6},{"ruleId":"982","severity":1,"message":"1069","line":40,"column":19,"nodeType":"984","messageId":"985","endLine":40,"endColumn":23},{"ruleId":"982","severity":1,"message":"1163","line":19,"column":30,"nodeType":"984","messageId":"985","endLine":19,"endColumn":42},{"ruleId":"982","severity":1,"message":"1165","line":22,"column":8,"nodeType":"984","messageId":"985","endLine":22,"endColumn":19},{"ruleId":"978","replacedBy":"1166"},{"ruleId":"980","replacedBy":"1167"},{"ruleId":"982","severity":1,"message":"983","line":1,"column":26,"nodeType":"984","messageId":"985","endLine":1,"endColumn":32},{"ruleId":"982","severity":1,"message":"986","line":4,"column":9,"nodeType":"984","messageId":"985","endLine":4,"endColumn":18},{"ruleId":"982","severity":1,"message":"987","line":5,"column":8,"nodeType":"984","messageId":"985","endLine":5,"endColumn":14},{"ruleId":"982","severity":1,"message":"988","line":6,"column":8,"nodeType":"984","messageId":"985","endLine":6,"endColumn":13},{"ruleId":"982","severity":1,"message":"989","line":8,"column":8,"nodeType":"984","messageId":"985","endLine":8,"endColumn":13},{"ruleId":"982","severity":1,"message":"990","line":12,"column":8,"nodeType":"984","messageId":"985","endLine":12,"endColumn":28},{"ruleId":"982","severity":1,"message":"991","line":16,"column":12,"nodeType":"984","messageId":"985","endLine":16,"endColumn":16},{"ruleId":"982","severity":1,"message":"992","line":17,"column":12,"nodeType":"984","messageId":"985","endLine":17,"endColumn":22},{"ruleId":"982","severity":1,"message":"993","line":17,"column":24,"nodeType":"984","messageId":"985","endLine":17,"endColumn":37},{"ruleId":"982","severity":1,"message":"994","line":18,"column":12,"nodeType":"984","messageId":"985","endLine":18,"endColumn":16},{"ruleId":"982","severity":1,"message":"995","line":18,"column":18,"nodeType":"984","messageId":"985","endLine":18,"endColumn":25},{"ruleId":"982","severity":1,"message":"989","line":2,"column":8,"nodeType":"984","messageId":"985","endLine":2,"endColumn":13},{"ruleId":"1046","severity":1,"message":"1047","line":75,"column":15,"nodeType":"1048","endLine":79,"endColumn":6},{"ruleId":"982","severity":1,"message":"1104","line":1,"column":31,"nodeType":"984","messageId":"985","endLine":1,"endColumn":41},{"ruleId":"982","severity":1,"message":"1105","line":2,"column":14,"nodeType":"984","messageId":"985","endLine":2,"endColumn":30},{"ruleId":"982","severity":1,"message":"996","line":1,"column":8,"nodeType":"984","messageId":"985","endLine":1,"endColumn":13},{"ruleId":"982","severity":1,"message":"997","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":24},{"ruleId":"982","severity":1,"message":"998","line":1,"column":38,"nodeType":"984","messageId":"985","endLine":1,"endColumn":51},{"ruleId":"982","severity":1,"message":"986","line":1,"column":53,"nodeType":"984","messageId":"985","endLine":1,"endColumn":62},{"ruleId":"982","severity":1,"message":"1106","line":2,"column":9,"nodeType":"984","messageId":"985","endLine":2,"endColumn":22},{"ruleId":"982","severity":1,"message":"1001","line":4,"column":9,"nodeType":"984","messageId":"985","endLine":4,"endColumn":16},{"ruleId":"982","severity":1,"message":"1107","line":15,"column":9,"nodeType":"984","messageId":"985","endLine":15,"endColumn":24},{"ruleId":"982","severity":1,"message":"1153","line":16,"column":17,"nodeType":"984","messageId":"985","endLine":16,"endColumn":23},{"ruleId":"982","severity":1,"message":"1068","line":21,"column":19,"nodeType":"984","messageId":"985","endLine":21,"endColumn":26},{"ruleId":"982","severity":1,"message":"1154","line":9,"column":24,"nodeType":"984","messageId":"985","endLine":9,"endColumn":40},{"ruleId":"982","severity":1,"message":"1067","line":20,"column":12,"nodeType":"984","messageId":"985","endLine":20,"endColumn":26},{"ruleId":"982","severity":1,"message":"999","line":5,"column":18,"nodeType":"984","messageId":"985","endLine":5,"endColumn":26},{"ruleId":"982","severity":1,"message":"1066","line":19,"column":12,"nodeType":"984","messageId":"985","endLine":19,"endColumn":17},{"ruleId":"982","severity":1,"message":"1067","line":19,"column":19,"nodeType":"984","messageId":"985","endLine":19,"endColumn":33},{"ruleId":"982","severity":1,"message":"1068","line":19,"column":35,"nodeType":"984","messageId":"985","endLine":19,"endColumn":42},{"ruleId":"982","severity":1,"message":"1069","line":37,"column":19,"nodeType":"984","messageId":"985","endLine":37,"endColumn":23},{"ruleId":"982","severity":1,"message":"1108","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1104","line":1,"column":27,"nodeType":"984","messageId":"985","endLine":1,"endColumn":37},{"ruleId":"982","severity":1,"message":"1109","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":9},{"ruleId":"982","severity":1,"message":"1110","line":17,"column":5,"nodeType":"984","messageId":"985","endLine":17,"endColumn":13},{"ruleId":"982","severity":1,"message":"1111","line":18,"column":5,"nodeType":"984","messageId":"985","endLine":18,"endColumn":14},{"ruleId":"982","severity":1,"message":"1028","line":23,"column":23,"nodeType":"984","messageId":"985","endLine":23,"endColumn":29},{"ruleId":"982","severity":1,"message":"1112","line":35,"column":9,"nodeType":"984","messageId":"985","endLine":35,"endColumn":17},{"ruleId":"982","severity":1,"message":"1113","line":36,"column":9,"nodeType":"984","messageId":"985","endLine":36,"endColumn":18},{"ruleId":"982","severity":1,"message":"1114","line":37,"column":18,"nodeType":"984","messageId":"985","endLine":37,"endColumn":32},{"ruleId":"982","severity":1,"message":"1115","line":38,"column":29,"nodeType":"984","messageId":"985","endLine":38,"endColumn":34},{"ruleId":"982","severity":1,"message":"1116","line":40,"column":9,"nodeType":"984","messageId":"985","endLine":40,"endColumn":18},{"ruleId":"982","severity":1,"message":"1117","line":41,"column":9,"nodeType":"984","messageId":"985","endLine":41,"endColumn":21},{"ruleId":"982","severity":1,"message":"1069","line":30,"column":19,"nodeType":"984","messageId":"985","endLine":30,"endColumn":23},{"ruleId":"982","severity":1,"message":"1078","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":16},{"ruleId":"982","severity":1,"message":"1079","line":15,"column":5,"nodeType":"984","messageId":"985","endLine":15,"endColumn":20},{"ruleId":"982","severity":1,"message":"1080","line":16,"column":5,"nodeType":"984","messageId":"985","endLine":16,"endColumn":22},{"ruleId":"982","severity":1,"message":"1081","line":17,"column":5,"nodeType":"984","messageId":"985","endLine":17,"endColumn":22},{"ruleId":"982","severity":1,"message":"1082","line":18,"column":5,"nodeType":"984","messageId":"985","endLine":18,"endColumn":23},{"ruleId":"982","severity":1,"message":"1083","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":23},{"ruleId":"982","severity":1,"message":"1020","line":23,"column":8,"nodeType":"984","messageId":"985","endLine":23,"endColumn":13},{"ruleId":"982","severity":1,"message":"1053","line":25,"column":8,"nodeType":"984","messageId":"985","endLine":25,"endColumn":15},{"ruleId":"982","severity":1,"message":"991","line":40,"column":12,"nodeType":"984","messageId":"985","endLine":40,"endColumn":16},{"ruleId":"1046","severity":1,"message":"1047","line":44,"column":15,"nodeType":"1048","endLine":77,"endColumn":10},{"ruleId":"1046","severity":1,"message":"1168","line":78,"column":11,"nodeType":"1076","endLine":78,"endColumn":13,"suggestions":"1169"},{"ruleId":"982","severity":1,"message":"1028","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":11},{"ruleId":"982","severity":1,"message":"1049","line":7,"column":5,"nodeType":"984","messageId":"985","endLine":7,"endColumn":9},{"ruleId":"982","severity":1,"message":"1050","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":13},{"ruleId":"982","severity":1,"message":"1005","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":15},{"ruleId":"982","severity":1,"message":"1051","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":9},{"ruleId":"982","severity":1,"message":"1052","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":13},{"ruleId":"982","severity":1,"message":"1001","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":12},{"ruleId":"982","severity":1,"message":"1003","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":10},{"ruleId":"982","severity":1,"message":"1055","line":37,"column":12,"nodeType":"984","messageId":"985","endLine":37,"endColumn":21},{"ruleId":"982","severity":1,"message":"1170","line":39,"column":12,"nodeType":"984","messageId":"985","endLine":39,"endColumn":23},{"ruleId":"982","severity":1,"message":"1074","line":39,"column":41,"nodeType":"984","messageId":"985","endLine":39,"endColumn":53},{"ruleId":"1056","severity":1,"message":"1057","line":80,"column":21,"nodeType":"1058","messageId":"1059","endLine":80,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":80,"column":37,"nodeType":"1058","messageId":"1059","endLine":80,"endColumn":39},{"ruleId":"1056","severity":1,"message":"1057","line":179,"column":71,"nodeType":"1058","messageId":"1059","endLine":179,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":179,"column":83,"nodeType":"1058","messageId":"1059","endLine":179,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":180,"column":71,"nodeType":"1058","messageId":"1059","endLine":180,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":180,"column":83,"nodeType":"1058","messageId":"1059","endLine":180,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":181,"column":71,"nodeType":"1058","messageId":"1059","endLine":181,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":181,"column":83,"nodeType":"1058","messageId":"1059","endLine":181,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":182,"column":71,"nodeType":"1058","messageId":"1059","endLine":182,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":182,"column":83,"nodeType":"1058","messageId":"1059","endLine":182,"endColumn":85},{"ruleId":"1056","severity":1,"message":"1057","line":183,"column":71,"nodeType":"1058","messageId":"1059","endLine":183,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":183,"column":83,"nodeType":"1058","messageId":"1059","endLine":183,"endColumn":85},{"ruleId":"982","severity":1,"message":"1071","line":2,"column":22,"nodeType":"984","messageId":"985","endLine":2,"endColumn":33},{"ruleId":"982","severity":1,"message":"1072","line":3,"column":9,"nodeType":"984","messageId":"985","endLine":3,"endColumn":29},{"ruleId":"982","severity":1,"message":"1073","line":3,"column":31,"nodeType":"984","messageId":"985","endLine":3,"endColumn":44},{"ruleId":"982","severity":1,"message":"1020","line":6,"column":8,"nodeType":"984","messageId":"985","endLine":6,"endColumn":13},{"ruleId":"982","severity":1,"message":"1053","line":8,"column":8,"nodeType":"984","messageId":"985","endLine":8,"endColumn":15},{"ruleId":"1046","severity":1,"message":"1047","line":20,"column":15,"nodeType":"1048","endLine":32,"endColumn":6},{"ruleId":"1046","severity":1,"message":"1075","line":32,"column":8,"nodeType":"1076","endLine":32,"endColumn":10,"suggestions":"1171"},{"ruleId":"982","severity":1,"message":"1071","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":16},{"ruleId":"982","severity":1,"message":"1131","line":11,"column":5,"nodeType":"984","messageId":"985","endLine":11,"endColumn":10},{"ruleId":"982","severity":1,"message":"1132","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":15},{"ruleId":"982","severity":1,"message":"1004","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":11},{"ruleId":"982","severity":1,"message":"1133","line":15,"column":5,"nodeType":"984","messageId":"985","endLine":15,"endColumn":13},{"ruleId":"982","severity":1,"message":"1134","line":16,"column":5,"nodeType":"984","messageId":"985","endLine":16,"endColumn":18},{"ruleId":"982","severity":1,"message":"1028","line":19,"column":5,"nodeType":"984","messageId":"985","endLine":19,"endColumn":11},{"ruleId":"982","severity":1,"message":"1019","line":24,"column":9,"nodeType":"984","messageId":"985","endLine":24,"endColumn":16},{"ruleId":"982","severity":1,"message":"1135","line":25,"column":9,"nodeType":"984","messageId":"985","endLine":25,"endColumn":24},{"ruleId":"982","severity":1,"message":"1020","line":26,"column":8,"nodeType":"984","messageId":"985","endLine":26,"endColumn":13},{"ruleId":"982","severity":1,"message":"1021","line":46,"column":25,"nodeType":"984","messageId":"985","endLine":46,"endColumn":39},{"ruleId":"1046","severity":1,"message":"1136","line":86,"column":8,"nodeType":"1076","endLine":86,"endColumn":10,"suggestions":"1172"},{"ruleId":"1022","severity":1,"message":"1023","line":109,"column":17,"nodeType":"1024","messageId":"1025","endLine":109,"endColumn":29},{"ruleId":"1022","severity":1,"message":"1023","line":112,"column":17,"nodeType":"1024","messageId":"1025","endLine":112,"endColumn":33},{"ruleId":"982","severity":1,"message":"1010","line":15,"column":46,"nodeType":"984","messageId":"985","endLine":15,"endColumn":54},{"ruleId":"982","severity":1,"message":"1012","line":15,"column":68,"nodeType":"984","messageId":"985","endLine":15,"endColumn":76},{"ruleId":"1046","severity":1,"message":"1118","line":63,"column":8,"nodeType":"1076","endLine":63,"endColumn":10,"suggestions":"1173"},{"ruleId":"982","severity":1,"message":"1069","line":68,"column":19,"nodeType":"984","messageId":"985","endLine":68,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":278,"column":45,"nodeType":"1058","messageId":"1059","endLine":278,"endColumn":47},{"ruleId":"1056","severity":1,"message":"1057","line":278,"column":60,"nodeType":"1058","messageId":"1059","endLine":278,"endColumn":62},{"ruleId":"982","severity":1,"message":"1071","line":4,"column":13,"nodeType":"984","messageId":"985","endLine":4,"endColumn":24},{"ruleId":"982","severity":1,"message":"1001","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":12},{"ruleId":"982","severity":1,"message":"1086","line":10,"column":5,"nodeType":"984","messageId":"985","endLine":10,"endColumn":13},{"ruleId":"982","severity":1,"message":"1087","line":17,"column":5,"nodeType":"984","messageId":"985","endLine":17,"endColumn":18},{"ruleId":"982","severity":1,"message":"1065","line":21,"column":5,"nodeType":"984","messageId":"985","endLine":21,"endColumn":12},{"ruleId":"982","severity":1,"message":"1011","line":23,"column":5,"nodeType":"984","messageId":"985","endLine":23,"endColumn":15},{"ruleId":"982","severity":1,"message":"1088","line":28,"column":9,"nodeType":"984","messageId":"985","endLine":28,"endColumn":16},{"ruleId":"982","severity":1,"message":"1053","line":29,"column":8,"nodeType":"984","messageId":"985","endLine":29,"endColumn":15},{"ruleId":"1046","severity":1,"message":"1089","line":54,"column":8,"nodeType":"1076","endLine":54,"endColumn":27,"suggestions":"1174"},{"ruleId":"1091","severity":1,"message":"1092","line":70,"column":9,"nodeType":"1093","messageId":"1094","endLine":77,"endColumn":10},{"ruleId":"1091","severity":1,"message":"1092","line":113,"column":33,"nodeType":"1093","messageId":"1094","endLine":131,"endColumn":34},{"ruleId":"982","severity":1,"message":"1069","line":148,"column":35,"nodeType":"984","messageId":"985","endLine":148,"endColumn":39},{"ruleId":"982","severity":1,"message":"1001","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":12},{"ruleId":"982","severity":1,"message":"1138","line":14,"column":5,"nodeType":"984","messageId":"985","endLine":14,"endColumn":10},{"ruleId":"982","severity":1,"message":"1139","line":15,"column":26,"nodeType":"984","messageId":"985","endLine":15,"endColumn":37},{"ruleId":"982","severity":1,"message":"1100","line":17,"column":13,"nodeType":"984","messageId":"985","endLine":17,"endColumn":17},{"ruleId":"982","severity":1,"message":"1009","line":17,"column":19,"nodeType":"984","messageId":"985","endLine":17,"endColumn":26},{"ruleId":"982","severity":1,"message":"1000","line":17,"column":28,"nodeType":"984","messageId":"985","endLine":17,"endColumn":37},{"ruleId":"982","severity":1,"message":"1140","line":19,"column":9,"nodeType":"984","messageId":"985","endLine":19,"endColumn":18},{"ruleId":"982","severity":1,"message":"1141","line":20,"column":9,"nodeType":"984","messageId":"985","endLine":20,"endColumn":23},{"ruleId":"982","severity":1,"message":"1142","line":20,"column":25,"nodeType":"984","messageId":"985","endLine":20,"endColumn":32},{"ruleId":"982","severity":1,"message":"1143","line":20,"column":43,"nodeType":"984","messageId":"985","endLine":20,"endColumn":53},{"ruleId":"1046","severity":1,"message":"1047","line":30,"column":15,"nodeType":"1048","endLine":47,"endColumn":6},{"ruleId":"1046","severity":1,"message":"1144","line":47,"column":8,"nodeType":"1076","endLine":47,"endColumn":10,"suggestions":"1175"},{"ruleId":"982","severity":1,"message":"1095","line":3,"column":5,"nodeType":"984","messageId":"985","endLine":3,"endColumn":8},{"ruleId":"982","severity":1,"message":"1156","line":4,"column":5,"nodeType":"984","messageId":"985","endLine":4,"endColumn":11},{"ruleId":"982","severity":1,"message":"1002","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":15},{"ruleId":"982","severity":1,"message":"1003","line":7,"column":5,"nodeType":"984","messageId":"985","endLine":7,"endColumn":10},{"ruleId":"982","severity":1,"message":"1157","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":9},{"ruleId":"982","severity":1,"message":"1158","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":15},{"ruleId":"982","severity":1,"message":"1159","line":9,"column":17,"nodeType":"984","messageId":"985","endLine":9,"endColumn":25},{"ruleId":"982","severity":1,"message":"1160","line":10,"column":5,"nodeType":"984","messageId":"985","endLine":10,"endColumn":13},{"ruleId":"982","severity":1,"message":"1009","line":12,"column":5,"nodeType":"984","messageId":"985","endLine":12,"endColumn":12},{"ruleId":"982","severity":1,"message":"1087","line":12,"column":14,"nodeType":"984","messageId":"985","endLine":12,"endColumn":27},{"ruleId":"982","severity":1,"message":"1061","line":13,"column":5,"nodeType":"984","messageId":"985","endLine":13,"endColumn":11},{"ruleId":"982","severity":1,"message":"1161","line":15,"column":9,"nodeType":"984","messageId":"985","endLine":15,"endColumn":20},{"ruleId":"982","severity":1,"message":"1162","line":15,"column":22,"nodeType":"984","messageId":"985","endLine":15,"endColumn":28},{"ruleId":"982","severity":1,"message":"1163","line":15,"column":30,"nodeType":"984","messageId":"985","endLine":15,"endColumn":42},{"ruleId":"982","severity":1,"message":"1130","line":16,"column":9,"nodeType":"984","messageId":"985","endLine":16,"endColumn":24},{"ruleId":"982","severity":1,"message":"1012","line":16,"column":26,"nodeType":"984","messageId":"985","endLine":16,"endColumn":34},{"ruleId":"982","severity":1,"message":"1013","line":16,"column":36,"nodeType":"984","messageId":"985","endLine":16,"endColumn":44},{"ruleId":"982","severity":1,"message":"1164","line":17,"column":8,"nodeType":"984","messageId":"985","endLine":17,"endColumn":18},{"ruleId":"982","severity":1,"message":"1042","line":20,"column":8,"nodeType":"984","messageId":"985","endLine":20,"endColumn":19},{"ruleId":"1046","severity":1,"message":"1047","line":26,"column":15,"nodeType":"1048","endLine":36,"endColumn":6},{"ruleId":"982","severity":1,"message":"1069","line":40,"column":19,"nodeType":"984","messageId":"985","endLine":40,"endColumn":23},{"ruleId":"982","severity":1,"message":"1095","line":4,"column":5,"nodeType":"984","messageId":"985","endLine":4,"endColumn":8},{"ruleId":"982","severity":1,"message":"1020","line":17,"column":8,"nodeType":"984","messageId":"985","endLine":17,"endColumn":13},{"ruleId":"1046","severity":1,"message":"1176","line":30,"column":8,"nodeType":"1076","endLine":30,"endColumn":10,"suggestions":"1177"},{"ruleId":"1096","severity":1,"message":"1097","line":79,"column":69,"nodeType":"1098","messageId":"1099","endLine":79,"endColumn":71},{"ruleId":"982","severity":1,"message":"1001","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":12},{"ruleId":"982","severity":1,"message":"1178","line":27,"column":12,"nodeType":"984","messageId":"985","endLine":27,"endColumn":15},{"ruleId":"982","severity":1,"message":"1179","line":27,"column":17,"nodeType":"984","messageId":"985","endLine":27,"endColumn":23},{"ruleId":"1046","severity":1,"message":"1151","line":43,"column":8,"nodeType":"1076","endLine":43,"endColumn":10,"suggestions":"1180"},{"ruleId":"982","severity":1,"message":"1043","line":49,"column":23,"nodeType":"984","messageId":"985","endLine":49,"endColumn":27},{"ruleId":"982","severity":1,"message":"1001","line":4,"column":5,"nodeType":"984","messageId":"985","endLine":4,"endColumn":12},{"ruleId":"982","severity":1,"message":"1060","line":5,"column":5,"nodeType":"984","messageId":"985","endLine":5,"endColumn":11},{"ruleId":"982","severity":1,"message":"1006","line":5,"column":72,"nodeType":"984","messageId":"985","endLine":5,"endColumn":78},{"ruleId":"982","severity":1,"message":"1128","line":6,"column":5,"nodeType":"984","messageId":"985","endLine":6,"endColumn":10},{"ruleId":"982","severity":1,"message":"1070","line":11,"column":5,"nodeType":"984","messageId":"985","endLine":11,"endColumn":9},{"ruleId":"982","severity":1,"message":"1129","line":19,"column":9,"nodeType":"984","messageId":"985","endLine":19,"endColumn":22},{"ruleId":"982","severity":1,"message":"1130","line":20,"column":9,"nodeType":"984","messageId":"985","endLine":20,"endColumn":24},{"ruleId":"1046","severity":1,"message":"1047","line":25,"column":15,"nodeType":"1048","endLine":39,"endColumn":6},{"ruleId":"982","severity":1,"message":"1034","line":2,"column":8,"nodeType":"984","messageId":"985","endLine":2,"endColumn":25},{"ruleId":"982","severity":1,"message":"1035","line":3,"column":18,"nodeType":"984","messageId":"985","endLine":3,"endColumn":24},{"ruleId":"982","severity":1,"message":"1036","line":4,"column":9,"nodeType":"984","messageId":"985","endLine":4,"endColumn":14},{"ruleId":"982","severity":1,"message":"1037","line":5,"column":8,"nodeType":"984","messageId":"985","endLine":5,"endColumn":19},{"ruleId":"982","severity":1,"message":"1038","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1039","line":3,"column":5,"nodeType":"984","messageId":"985","endLine":3,"endColumn":11},{"ruleId":"982","severity":1,"message":"1040","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":19},{"ruleId":"982","severity":1,"message":"1041","line":20,"column":8,"nodeType":"984","messageId":"985","endLine":20,"endColumn":18},{"ruleId":"982","severity":1,"message":"1042","line":21,"column":8,"nodeType":"984","messageId":"985","endLine":21,"endColumn":19},{"ruleId":"982","severity":1,"message":"1043","line":66,"column":19,"nodeType":"984","messageId":"985","endLine":66,"endColumn":23},{"ruleId":"1022","severity":1,"message":"1023","line":110,"column":54,"nodeType":"1024","messageId":"1025","endLine":110,"endColumn":69},{"ruleId":"982","severity":1,"message":"1155","line":1,"column":8,"nodeType":"984","messageId":"985","endLine":1,"endColumn":19},{"ruleId":"982","severity":1,"message":"1163","line":19,"column":30,"nodeType":"984","messageId":"985","endLine":19,"endColumn":42},{"ruleId":"982","severity":1,"message":"1165","line":22,"column":8,"nodeType":"984","messageId":"985","endLine":22,"endColumn":19},{"ruleId":"982","severity":1,"message":"1146","line":20,"column":33,"nodeType":"984","messageId":"985","endLine":20,"endColumn":41},{"ruleId":"1046","severity":1,"message":"1101","line":32,"column":8,"nodeType":"1076","endLine":32,"endColumn":10,"suggestions":"1181"},{"ruleId":"1096","severity":1,"message":"1103","line":164,"column":66,"nodeType":"1098","messageId":"1099","endLine":164,"endColumn":68},{"ruleId":"982","severity":1,"message":"1100","line":3,"column":30,"nodeType":"984","messageId":"985","endLine":3,"endColumn":34},{"ruleId":"982","severity":1,"message":"1087","line":9,"column":5,"nodeType":"984","messageId":"985","endLine":9,"endColumn":18},{"ruleId":"982","severity":1,"message":"1053","line":11,"column":8,"nodeType":"984","messageId":"985","endLine":11,"endColumn":15},{"ruleId":"1046","severity":1,"message":"1101","line":40,"column":8,"nodeType":"1076","endLine":40,"endColumn":10,"suggestions":"1182"},{"ruleId":"1096","severity":1,"message":"1103","line":55,"column":71,"nodeType":"1098","messageId":"1099","endLine":55,"endColumn":73},{"ruleId":"982","severity":1,"message":"994","line":17,"column":12,"nodeType":"984","messageId":"985","endLine":17,"endColumn":16},{"ruleId":"982","severity":1,"message":"1120","line":20,"column":12,"nodeType":"984","messageId":"985","endLine":20,"endColumn":19},{"ruleId":"982","severity":1,"message":"1121","line":20,"column":21,"nodeType":"984","messageId":"985","endLine":20,"endColumn":31},{"ruleId":"1046","severity":1,"message":"1126","line":25,"column":8,"nodeType":"1076","endLine":25,"endColumn":10,"suggestions":"1183"},{"ruleId":"982","severity":1,"message":"1069","line":102,"column":23,"nodeType":"984","messageId":"985","endLine":102,"endColumn":27},{"ruleId":"982","severity":1,"message":"1122","line":19,"column":12,"nodeType":"984","messageId":"985","endLine":19,"endColumn":25},{"ruleId":"982","severity":1,"message":"1123","line":19,"column":27,"nodeType":"984","messageId":"985","endLine":19,"endColumn":43},{"ruleId":"1046","severity":1,"message":"1124","line":24,"column":8,"nodeType":"1076","endLine":24,"endColumn":10,"suggestions":"1184"},{"ruleId":"982","severity":1,"message":"994","line":16,"column":12,"nodeType":"984","messageId":"985","endLine":16,"endColumn":16},{"ruleId":"982","severity":1,"message":"1120","line":19,"column":12,"nodeType":"984","messageId":"985","endLine":19,"endColumn":19},{"ruleId":"982","severity":1,"message":"1121","line":19,"column":21,"nodeType":"984","messageId":"985","endLine":19,"endColumn":31},{"ruleId":"982","severity":1,"message":"997","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":24},{"ruleId":"982","severity":1,"message":"1060","line":17,"column":20,"nodeType":"984","messageId":"985","endLine":17,"endColumn":26},{"ruleId":"982","severity":1,"message":"1001","line":17,"column":28,"nodeType":"984","messageId":"985","endLine":17,"endColumn":35},{"ruleId":"982","severity":1,"message":"1061","line":17,"column":37,"nodeType":"984","messageId":"985","endLine":17,"endColumn":43},{"ruleId":"982","severity":1,"message":"1062","line":17,"column":45,"nodeType":"984","messageId":"985","endLine":17,"endColumn":50},{"ruleId":"982","severity":1,"message":"1063","line":17,"column":52,"nodeType":"984","messageId":"985","endLine":17,"endColumn":63},{"ruleId":"982","severity":1,"message":"1064","line":17,"column":65,"nodeType":"984","messageId":"985","endLine":17,"endColumn":74},{"ruleId":"982","severity":1,"message":"1040","line":17,"column":76,"nodeType":"984","messageId":"985","endLine":17,"endColumn":90},{"ruleId":"982","severity":1,"message":"1051","line":17,"column":92,"nodeType":"984","messageId":"985","endLine":17,"endColumn":96},{"ruleId":"982","severity":1,"message":"1052","line":17,"column":98,"nodeType":"984","messageId":"985","endLine":17,"endColumn":106},{"ruleId":"982","severity":1,"message":"1007","line":17,"column":108,"nodeType":"984","messageId":"985","endLine":17,"endColumn":111},{"ruleId":"982","severity":1,"message":"1065","line":23,"column":23,"nodeType":"984","messageId":"985","endLine":23,"endColumn":30},{"ruleId":"982","severity":1,"message":"986","line":1,"column":16,"nodeType":"984","messageId":"985","endLine":1,"endColumn":25},{"ruleId":"982","severity":1,"message":"1070","line":8,"column":5,"nodeType":"984","messageId":"985","endLine":8,"endColumn":9},{"ruleId":"982","severity":1,"message":"1007","line":10,"column":12,"nodeType":"984","messageId":"985","endLine":10,"endColumn":15},{"ruleId":"982","severity":1,"message":"1053","line":12,"column":8,"nodeType":"984","messageId":"985","endLine":12,"endColumn":15},{"ruleId":"1046","severity":1,"message":"1185","line":14,"column":8,"nodeType":"1076","endLine":14,"endColumn":10,"suggestions":"1186"},{"ruleId":"1046","severity":1,"message":"1187","line":15,"column":8,"nodeType":"1076","endLine":15,"endColumn":10,"suggestions":"1188"},{"ruleId":"982","severity":1,"message":"1189","line":7,"column":8,"nodeType":"984","messageId":"985","endLine":7,"endColumn":21},{"ruleId":"982","severity":1,"message":"1019","line":22,"column":9,"nodeType":"984","messageId":"985","endLine":22,"endColumn":16},{"ruleId":"982","severity":1,"message":"1020","line":23,"column":8,"nodeType":"984","messageId":"985","endLine":23,"endColumn":13},{"ruleId":"982","severity":1,"message":"1053","line":25,"column":8,"nodeType":"984","messageId":"985","endLine":25,"endColumn":15},{"ruleId":"982","severity":1,"message":"1042","line":28,"column":8,"nodeType":"984","messageId":"985","endLine":28,"endColumn":19},{"ruleId":"982","severity":1,"message":"991","line":42,"column":12,"nodeType":"984","messageId":"985","endLine":42,"endColumn":16},{"ruleId":"982","severity":1,"message":"1054","line":44,"column":11,"nodeType":"984","messageId":"985","endLine":44,"endColumn":18},{"ruleId":"1046","severity":1,"message":"1047","line":51,"column":15,"nodeType":"1048","endLine":82,"endColumn":10},{"ruleId":"1046","severity":1,"message":"1190","line":83,"column":11,"nodeType":"1076","endLine":83,"endColumn":13,"suggestions":"1191"},{"ruleId":"1046","severity":1,"message":"1192","line":27,"column":12,"nodeType":"1076","endLine":27,"endColumn":14,"suggestions":"1193"},{"ruleId":"1096","severity":1,"message":"1097","line":92,"column":55,"nodeType":"1098","messageId":"1099","endLine":92,"endColumn":57},{"ruleId":"1056","severity":1,"message":"1057","line":92,"column":60,"nodeType":"1058","messageId":"1059","endLine":92,"endColumn":62},{"ruleId":"1056","severity":1,"message":"1057","line":92,"column":90,"nodeType":"1058","messageId":"1059","endLine":92,"endColumn":92},{"ruleId":"1096","severity":1,"message":"1097","line":92,"column":106,"nodeType":"1098","messageId":"1099","endLine":92,"endColumn":108},{"ruleId":"982","severity":1,"message":"1165","line":5,"column":8,"nodeType":"984","messageId":"985","endLine":5,"endColumn":19},{"ruleId":"982","severity":1,"message":"994","line":8,"column":27,"nodeType":"984","messageId":"985","endLine":8,"endColumn":31},{"ruleId":"982","severity":1,"message":"1055","line":9,"column":12,"nodeType":"984","messageId":"985","endLine":9,"endColumn":21},{"ruleId":"982","severity":1,"message":"1194","line":9,"column":23,"nodeType":"984","messageId":"985","endLine":9,"endColumn":33},{"ruleId":"982","severity":1,"message":"1195","line":11,"column":12,"nodeType":"984","messageId":"985","endLine":11,"endColumn":17},{"ruleId":"982","severity":1,"message":"1196","line":11,"column":19,"nodeType":"984","messageId":"985","endLine":11,"endColumn":27},{"ruleId":"982","severity":1,"message":"1178","line":12,"column":12,"nodeType":"984","messageId":"985","endLine":12,"endColumn":15},{"ruleId":"982","severity":1,"message":"1179","line":12,"column":17,"nodeType":"984","messageId":"985","endLine":12,"endColumn":23},{"ruleId":"982","severity":1,"message":"1197","line":13,"column":12,"nodeType":"984","messageId":"985","endLine":13,"endColumn":22},{"ruleId":"982","severity":1,"message":"1198","line":13,"column":24,"nodeType":"984","messageId":"985","endLine":13,"endColumn":37},{"ruleId":"1046","severity":1,"message":"1199","line":24,"column":8,"nodeType":"1076","endLine":24,"endColumn":10,"suggestions":"1200"},"no-native-reassign",["1201"],"no-negated-in-lhs",["1202"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'SockJS' is defined but never used.","'Stomp' is defined but never used.","'Axios' is defined but never used.","'AdminSettingProvider' is defined but never used.","'user' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setinputValue' is assigned a value but never used.","'quiz' is assigned a value but never used.","'setQuiz' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'createContext' is defined but never used.","'Checkbox' is defined but never used.","'Container' is defined but never used.","'Heading' is defined but never used.","'IconButton' is defined but never used.","'Image' is defined but never used.","'Select' is defined but never used.","'SimpleGrid' is defined but never used.","'Spacer' is defined but never used.","'Tag' is defined but never used.","'TagLabel' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'EditIcon' is defined but never used.","'TimeIcon' is defined but never used.","'ViewIcon' is defined but never used.","'CircularProgressLabel' is defined but never used.","'AiOutlineTag' is defined but never used.","'BiPen' is defined but never used.","'BsPen' is defined but never used.","'useQuiz' is defined but never used.","'axios' is defined but never used.","'setCreatedQuiz' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["1201"],["1202"],"'Center' is defined but never used.","'usePrevious' is defined but never used.","'randomUID' is assigned a value but never used.",["1201"],["1202"],"'useCreateQuiz' is defined but never used.","'SidebarWithHeader' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'SettingPage' is defined but never used.","'Component' is defined but never used.","'Avatar' is defined but never used.","'FormHelperText' is defined but never used.","'AppService' is defined but never used.","'QuizService' is defined but never used.","'data' is assigned a value but never used.",["1201"],["1202"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Grid' is defined but never used.","'GridItem' is defined but never used.","'Wrap' is defined but never used.","'WrapItem' is defined but never used.","'quizApi' is defined but never used.","'history' is assigned a value but never used.","'isLoading' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'HStack' is defined but never used.","'VStack' is defined but never used.","'Input' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'AddIcon' is defined but never used.","'login' is assigned a value but never used.","'getUserDetails' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","'Text' is defined but never used.","'ButtonGroup' is defined but never used.","'AiOutlineFieldNumber' is defined but never used.","'RiNumbersFill' is defined but never used.","'setDirectUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'code' and 'setFoundedQuiz'. Either include them or remove the dependency array.","ArrayExpression",["1203"],"'AlertDialog' is defined but never used.","'AlertDialogBody' is defined but never used.","'AlertDialogFooter' is defined but never used.","'AlertDialogHeader' is defined but never used.","'AlertDialogContent' is defined but never used.","'AlertDialogOverlay' is defined but never used.","React Hook useEffect has missing dependencies: 'foundedQuiz', 'getQuizInfo', 'getQuizQuestions', and 'setFoundedQuiz'. Either include them or remove the dependency array.",["1204"],"'ListIcon' is defined but never used.","'useDisclosure' is defined but never used.","'BiShare' is defined but never used.","React Hook useEffect has a missing dependency: 'getCreatedQuizzesInfo'. Either include it or remove the dependency array.",["1205"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Box' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'quizId'. Either include it or remove the dependency array.",["1206"],"Expected '!==' and instead saw '!='.","'useContext' is defined but never used.","'CircularProgress' is defined but never used.","'BrowserRouter' is defined but never used.","'DragDropContext' is defined but never used.","'ReactNode' is defined but never used.","'Link' is defined but never used.","'BoxProps' is defined but never used.","'FlexProps' is defined but never used.","'IconType' is defined but never used.","'ReactText' is defined but never used.","'PlusSquareIcon' is defined but never used.","'RLink' is defined but never used.","'FcLibrary' is defined but never used.","'AdminContext' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchQuizDetails'. Either include it or remove the dependency array.",["1207"],"'options' is assigned a value but never used.","'setOptions' is assigned a value but never used.","'organizations' is assigned a value but never used.","'setOrganizations' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSubject'. Either include it or remove the dependency array.",["1208"],"React Hook useEffect has a missing dependency: 'selectedQuestion'. Either include it or remove the dependency array. If 'setQuestion' needs the current value of 'selectedQuestion', you can also switch to useReducer instead of useState and read 'selectedQuestion' in the reducer.",["1209"],"'Stack' is defined but never used.","'AiOutlineUser' is defined but never used.","'ChevronDownIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'useRadio' is defined but never used.","'useRadioGroup' is defined but never used.","'MdArrowDropDown' is defined but never used.","React Hook useEffect has a missing dependency: 'createdQuiz'. Either include it or remove the dependency array.",["1210"],"'Tfoot' is defined but never used.","'TagLeftIcon' is defined but never used.","'CloseIcon' is defined but never used.","'AiOutlineCheck' is defined but never used.","'BsCheck' is defined but never used.","'IoIosClose' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["1211"],"'MdPublic' is defined but never used.",["1212"],"'emails' is assigned a value but never used.","'setEmails' is assigned a value but never used.","'toast' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getQuizDetail' and 'id'. Either include them or remove the dependency array.",["1213"],"'RRLink' is defined but never used.","'FormErrorMessage' is defined but never used.","'axiosClient' is defined but never used.","'Button' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'MenuList' is defined but never used.","'BsListCheck' is defined but never used.","'BsPlay' is defined but never used.","'MdAssignment' is defined but never used.","'dateFormat' is defined but never used.","'UserService' is defined but never used.",["1201"],["1202"],"React Hook useEffect has missing dependencies: 'foundedQuiz', 'getQuizInfo', 'getQuizQuestions', 'history', and 'setFoundedQuiz'. Either include them or remove the dependency array.",["1214"],"'foundedQuiz' is assigned a value but never used.",["1215"],["1216"],["1217"],["1218"],["1219"],"React Hook useEffect has a missing dependency: 'getAssignedQuizzes'. Either include it or remove the dependency array.",["1220"],"'err' is assigned a value but never used.","'setErr' is assigned a value but never used.",["1221"],["1222"],["1223"],["1224"],["1225"],"React Hook useEffect has a missing dependency: 'getAssignmentsInfo'. Either include it or remove the dependency array.",["1226"],"React Hook useEffect has a missing dependency: 'getReport'. Either include it or remove the dependency array.",["1227"],"'StartExamQuiz' is defined but never used.","React Hook useEffect has missing dependencies: 'code', 'setFullMode', and 'setLoading'. Either include them or remove the dependency array.",["1228"],"React Hook useEffect has missing dependencies: 'getInfo' and 'setFullMode'. Either include them or remove the dependency array.",["1229"],"'setLoading' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'assignment' is assigned a value but never used.","'setAssignment' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getQuizDetail' and 'history.location.state?.data'. Either include them or remove the dependency array.",["1230"],"no-global-assign","no-unsafe-negation",{"desc":"1231","fix":"1232"},{"desc":"1233","fix":"1234"},{"desc":"1235","fix":"1236"},{"desc":"1237","fix":"1238"},{"desc":"1239","fix":"1240"},{"desc":"1241","fix":"1242"},{"desc":"1243","fix":"1244"},{"desc":"1245","fix":"1246"},{"desc":"1247","fix":"1248"},{"desc":"1237","fix":"1249"},{"desc":"1250","fix":"1251"},{"desc":"1252","fix":"1253"},{"desc":"1231","fix":"1254"},{"desc":"1245","fix":"1255"},{"desc":"1239","fix":"1256"},{"desc":"1235","fix":"1257"},{"desc":"1247","fix":"1258"},{"desc":"1259","fix":"1260"},{"desc":"1250","fix":"1261"},{"desc":"1237","fix":"1262"},{"desc":"1237","fix":"1263"},{"desc":"1243","fix":"1264"},{"desc":"1241","fix":"1265"},{"desc":"1266","fix":"1267"},{"desc":"1268","fix":"1269"},{"desc":"1270","fix":"1271"},{"desc":"1272","fix":"1273"},{"desc":"1274","fix":"1275"},"Update the dependencies array to be: [code, setFoundedQuiz]",{"range":"1276","text":"1277"},"Update the dependencies array to be: [foundedQuiz, getQuizInfo, getQuizQuestions, setFoundedQuiz]",{"range":"1278","text":"1279"},"Update the dependencies array to be: [getCreatedQuizzesInfo, params, setParams]",{"range":"1280","text":"1281"},"Update the dependencies array to be: [quizId]",{"range":"1282","text":"1283"},"Update the dependencies array to be: [fetchQuizDetails]",{"range":"1284","text":"1285"},"Update the dependencies array to be: [getSubject]",{"range":"1286","text":"1287"},"Update the dependencies array to be: [selectedQuestion]",{"range":"1288","text":"1289"},"Update the dependencies array to be: [createdQuiz]",{"range":"1290","text":"1291"},"Update the dependencies array to be: [id]",{"range":"1292","text":"1293"},{"range":"1294","text":"1283"},"Update the dependencies array to be: [getQuizDetail, id]",{"range":"1295","text":"1296"},"Update the dependencies array to be: [foundedQuiz, getQuizInfo, getQuizQuestions, history, setFoundedQuiz]",{"range":"1297","text":"1298"},{"range":"1299","text":"1277"},{"range":"1300","text":"1291"},{"range":"1301","text":"1285"},{"range":"1302","text":"1281"},{"range":"1303","text":"1293"},"Update the dependencies array to be: [getAssignedQuizzes]",{"range":"1304","text":"1305"},{"range":"1306","text":"1296"},{"range":"1307","text":"1283"},{"range":"1308","text":"1283"},{"range":"1309","text":"1289"},{"range":"1310","text":"1287"},"Update the dependencies array to be: [getAssignmentsInfo]",{"range":"1311","text":"1312"},"Update the dependencies array to be: [getReport]",{"range":"1313","text":"1314"},"Update the dependencies array to be: [code, setFullMode, setLoading]",{"range":"1315","text":"1316"},"Update the dependencies array to be: [getInfo, setFullMode]",{"range":"1317","text":"1318"},"Update the dependencies array to be: [getQuizDetail, history.location.state?.data]",{"range":"1319","text":"1320"},[1200,1202],"[code, setFoundedQuiz]",[2455,2457],"[foundedQuiz, getQuizInfo, getQuizQuestions, setFoundedQuiz]",[1590,1609],"[getCreatedQuizzesInfo, params, setParams]",[1403,1405],"[quizId]",[2373,2375],"[fetchQuizDetails]",[805,807],"[getSubject]",[903,905],"[selectedQuestion]",[2629,2631],"[createdQuiz]",[1343,1345],"[id]",[788,790],[1294,1296],"[getQuizDetail, id]",[2530,2532],"[foundedQuiz, getQuizInfo, getQuizQuestions, history, setFoundedQuiz]",[1200,1202],[2629,2631],[2373,2375],[1590,1609],[1343,1345],[761,763],"[getAssignedQuizzes]",[1329,1331],[788,790],[1403,1405],[903,905],[805,807],[610,612],"[getAssignmentsInfo]",[633,635],"[getReport]",[2751,2753],"[code, setFullMode, setLoading]",[1035,1037],"[getInfo, setFullMode]",[949,951],"[getQuizDetail, history.location.state?.data]"]