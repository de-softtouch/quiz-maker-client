[{"C:\\Users\\Admin\\create_grade_quizzes\\src\\index.js":"1","C:\\Users\\Admin\\create_grade_quizzes\\src\\App.js":"2","C:\\Users\\Admin\\create_grade_quizzes\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\create_grade_quizzes\\src\\hooks\\useAuth.js":"4","C:\\Users\\Admin\\create_grade_quizzes\\src\\routes\\privateRoute.js":"5","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuizPage.js":"6","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuestionDialog.js":"7","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\QuestionEntry.js":"8","C:\\Users\\Admin\\create_grade_quizzes\\src\\context\\CreateQuizProvider.js":"9","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\dashboard\\Dashboard.js":"10","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\SettingPage.js":"11","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Footer.js":"12","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Public.js":"13","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\another\\AnotherPage.js":"14","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AuthProvider.js":"15","C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\quizApi.js":"16","C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\axiosClient.js":"17","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\HomePage.js":"18","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\Nav.js":"19","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\RegisterPage.js":"20","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\QuizInfo.js":"21","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\NotFoundQuiz.js":"22","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\quiz_info\\JoinQuizInfo.js":"23","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\StartQuiz.js":"24","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\CustomAlertDialog.js":"25","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\LibraryPage.js":"26","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assigned\\AssignedQuizPage.js":"27","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\AssignedUsers.js":"28","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AdminSettingProvider.js":"29","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\Admin.js":"30","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\SidebarWithHeader.js":"31","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\QuizEditor.js":"32","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizEditProvider.js":"33","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\NewQuestionDialog.js":"34","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\QuizEditDialog.js":"35","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\EditQuestionDialog.js":"36","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportPage.js":"37","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\create_quiz\\CreateNewQuizPage.js":"38","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportDetailPage.js":"39","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\ShareDialog.js":"40","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assign\\Assignment.js":"41","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizProvider.js":"42","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\login\\LoginPage.js":"43","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\QuizService.js":"44","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\VerificationPage.js":"45","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\SubmitReportEntry.js":"46","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\UserService.js":"47","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\AppService.js":"48","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\MyAvatar.js":"49","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\SubjectService.js":"50","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\RemovedQuizzes.js":"51","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\QuizEntry.js":"52"},{"size":1162,"mtime":1636613746337,"results":"53","hashOfConfig":"54"},{"size":1263,"mtime":1642342769256,"results":"55","hashOfConfig":"54"},{"size":362,"mtime":499162500000,"results":"56","hashOfConfig":"54"},{"size":350,"mtime":1633938432216,"results":"57","hashOfConfig":"54"},{"size":710,"mtime":1636614258381,"results":"58","hashOfConfig":"54"},{"size":10854,"mtime":1633154003072,"results":"59","hashOfConfig":"60"},{"size":11021,"mtime":1633097921876,"results":"61","hashOfConfig":"60"},{"size":4353,"mtime":1633012880216,"results":"62","hashOfConfig":"60"},{"size":1497,"mtime":1633013607339,"results":"63","hashOfConfig":"54"},{"size":388,"mtime":1642489063573,"results":"64","hashOfConfig":"54"},{"size":8730,"mtime":1642691777570,"results":"65","hashOfConfig":"54"},{"size":3655,"mtime":1632384367018,"results":"66","hashOfConfig":"54"},{"size":822,"mtime":1633587916623,"results":"67","hashOfConfig":"54"},{"size":299,"mtime":1633151233119,"results":"68","hashOfConfig":"60"},{"size":2636,"mtime":1642483467753,"results":"69","hashOfConfig":"54"},{"size":2005,"mtime":1634718833529,"results":"70","hashOfConfig":"54"},{"size":527,"mtime":1633572044756,"results":"71","hashOfConfig":"54"},{"size":8465,"mtime":1642483542753,"results":"72","hashOfConfig":"54"},{"size":12464,"mtime":1633587065096,"results":"73","hashOfConfig":"54"},{"size":6193,"mtime":1642343700610,"results":"74","hashOfConfig":"54"},{"size":2867,"mtime":1642402361408,"results":"75","hashOfConfig":"54"},{"size":1349,"mtime":1633587048084,"results":"76","hashOfConfig":"54"},{"size":4430,"mtime":1642404005759,"results":"77","hashOfConfig":"54"},{"size":15500,"mtime":1642477761448,"results":"78","hashOfConfig":"54"},{"size":1804,"mtime":1633589424554,"results":"79","hashOfConfig":"54"},{"size":14220,"mtime":1642766417224,"results":"80","hashOfConfig":"54"},{"size":4448,"mtime":1633946918383,"results":"81","hashOfConfig":"54"},{"size":4385,"mtime":1633936162358,"results":"82","hashOfConfig":"54"},{"size":1136,"mtime":1642766935739,"results":"83","hashOfConfig":"54"},{"size":2724,"mtime":1642766260819,"results":"84","hashOfConfig":"54"},{"size":9495,"mtime":1642691523038,"results":"85","hashOfConfig":"54"},{"size":19833,"mtime":1642765980763,"results":"86","hashOfConfig":"54"},{"size":1542,"mtime":1642767032594,"results":"87","hashOfConfig":"54"},{"size":8387,"mtime":1634709341574,"results":"88","hashOfConfig":"54"},{"size":3835,"mtime":1642678951431,"results":"89","hashOfConfig":"54"},{"size":10294,"mtime":1634709432045,"results":"90","hashOfConfig":"54"},{"size":6340,"mtime":1635133860108,"results":"91","hashOfConfig":"54"},{"size":9169,"mtime":1642675422662,"results":"92","hashOfConfig":"54"},{"size":8251,"mtime":1635134054845,"results":"93","hashOfConfig":"54"},{"size":8221,"mtime":1635663397468,"results":"94","hashOfConfig":"54"},{"size":8048,"mtime":1642773410588,"results":"95","hashOfConfig":"54"},{"size":776,"mtime":1642335344098,"results":"96","hashOfConfig":"54"},{"size":5745,"mtime":1642335312149,"results":"97","hashOfConfig":"54"},{"size":1496,"mtime":1642689778755,"results":"98","hashOfConfig":"54"},{"size":3239,"mtime":1642343743531,"results":"99","hashOfConfig":"54"},{"size":394,"mtime":1642476273170,"results":"100","hashOfConfig":"54"},{"size":1973,"mtime":1642737143521,"results":"101","hashOfConfig":"54"},{"size":249,"mtime":1642515749993,"results":"102","hashOfConfig":"54"},{"size":449,"mtime":1642506694973,"results":"103","hashOfConfig":"54"},{"size":228,"mtime":1642653175000,"results":"104","hashOfConfig":"54"},{"size":2004,"mtime":1642748891037,"results":"105","hashOfConfig":"54"},{"size":8217,"mtime":1642748444783,"results":"106","hashOfConfig":"54"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"ddbb0k",{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"109"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"109"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},"1c0cccg",{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"127"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"109"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"109"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"109"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"109"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"109"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"109"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"109"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"109"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"109"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"109"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"109"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"109"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"109"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"109"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"109"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"109"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"109"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"109"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"109"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"109"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"109"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"109"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\create_grade_quizzes\\src\\index.js",[],["242","243"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\App.js",["244","245","246","247","248","249","250","251","252","253","254"],"import {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport {useAuth} from \"./hooks/useAuth\";\nimport {useEffect, useState} from \"react\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport LoginPage from \"./pages/public/login/LoginPage\";\nimport Axios from \"axios\";\nimport {PrivateRoute} from \"./routes/privateRoute\";\nimport Public from \"./components/public/Public\";\nimport Admin from \"./pages/admin/Admin\";\nimport AdminSettingProvider from \"./providers/AdminSettingProvider\";\nimport VerificationPage from \"./pages/public/register/VerificationPage\";\n\nfunction App() {\n    const {user} = useAuth();\n    const [inputValue, setinputValue] = useState(\"\");\n    const [quiz, setQuiz] = useState(null);\n\n\n    return (\n        <Switch>\n            <PrivateRoute path={'/admin'}>\n                {/*<AdminSettingProvider>*/}\n                    <Admin/>\n                {/*</AdminSettingProvider>*/}\n            </PrivateRoute>\n            {/*<Route  path='/admin' component={Admin}/>*/}\n            <Route path='/login' component={LoginPage}/>\n            <Route path='/verification' component={VerificationPage}/>\n            <Route path='/' component={Public}/>\n        </Switch>\n    );\n}\n\nexport default App;\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\hooks\\useAuth.js",["255","256","257","258"],"import React, {useState, useContext, createContext, useEffect} from \"react\";\r\nimport {AuthContext} from \"../providers/AuthProvider\";\r\nimport {AdminContext} from \"../providers/AdminSettingProvider\";\r\n\r\n\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n\r\nexport const useAdmin = () => {\r\n    return useContext(AdminContext);\r\n}","C:\\Users\\Admin\\create_grade_quizzes\\src\\routes\\privateRoute.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuizPage.js",["259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283"],"import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Checkbox,\r\n    Container,\r\n    Flex,\r\n    Heading,\r\n    HStack,\r\n    IconButton,\r\n    Image,\r\n    Input,\r\n    Select,\r\n    SimpleGrid,\r\n    Spacer,\r\n    Stack,\r\n    Tag,\r\n    TagLabel,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    ButtonGroup,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    AddIcon,\r\n    ArrowBackIcon,\r\n    CopyIcon,\r\n    DeleteIcon,\r\n    EditIcon,\r\n    TimeIcon,\r\n    ViewIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport { CircularProgress, CircularProgressLabel } from \"@chakra-ui/react\";\r\nimport { AiOutlineTag, BiPen, BsPen } from \"react-icons/all\";\r\nimport EditQuestionDialog from \"./EditQuestionDialog\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\nimport QuestionEntry from \"./QuestionEntry\";\r\nimport axios from \"axios\";\r\nimport { useCreateQuiz } from \"../../context/CreateQuizProvider\";\r\n\r\nconst EditQuizPage = () => {\r\n    const [showCreateQ, setShowCQD] = useState(false);\r\n    const { createdQuiz, setCreatedQuiz } = useCreateQuiz();\r\n\r\n    return (\r\n        <Box bg={\"#F7FAFC\"}>\r\n            {/*  Header with action bar*/}\r\n            {showCreateQ && <EditQuestionDialog setVisible={setShowCQD} />}\r\n\r\n            <HeaderWithActionBar setShowCQD={setShowCQD} />\r\n            {/*   Content with right sidebar*/}\r\n            <Box\r\n                pt={\"150px\"}\r\n                minH={\"100vh\"}\r\n                bg={\"#F7FAFC\"}\r\n                position={\"relative\"}\r\n            >\r\n                <Flex direction={\"column\"} justifyContent=\"center\">\r\n                    {/*  */}\r\n                    <HStack mt={10} w=\"100%\" align=\"center\">\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                        <Button>button</Button>\r\n                    </HStack>\r\n                    {/*QUESTION*/}\r\n                    <Box w={\"100%\"} maxW={\"1000px\"}>\r\n                        <Center>\r\n                            {/*SAVED QUESTIONS*/}\r\n                            <Stack\r\n                                w={\"100%\"}\r\n                                direction={\"column\"}\r\n                                align={\"center\"}\r\n                            >\r\n                                {/* {savedQuestions.length > 0 &&\r\n                                    savedQuestions.map((item, i) => (\r\n                                        <QuestionEntry\r\n                                            key={i}\r\n                                            index={i + 1}\r\n                                            question={item}\r\n                                        />\r\n                                    ))} */}\r\n                                {createdQuiz != null &&\r\n                                    createdQuiz.questions.length > 0 &&\r\n                                    createdQuiz.questions.map((item, i) => (\r\n                                        <QuestionEntry\r\n                                            key={i}\r\n                                            index={i + 1}\r\n                                            question={item}\r\n                                        />\r\n                                    ))}\r\n                            </Stack>\r\n                        </Center>\r\n                    </Box>\r\n                    {/**/}\r\n                    {/* <Box\r\n                        overflowY={\"scroll\"}\r\n                        top={\"150\"}\r\n                        zIndex={10}\r\n                        position={\"sticky\"}\r\n                        bg={\"white\"}\r\n                        boxShadow={\"md\"}\r\n                        minW={\"300px\"}\r\n                        maxW={\"300px\"}\r\n                        minH={\"400px\"}\r\n                        height={\"100%\"}\r\n                    >\r\n                        <Box p={4} mb={100}>\r\n                            <VStack spacing={5}>\r\n                                <Input type={\"file\"} />\r\n                                <HStack>\r\n                                    <Tooltip label={\"Quiz title\"}>\r\n                                        <Heading\r\n                                            fontWeight={\"medium\"}\r\n                                            fontSize={\"25px\"}\r\n                                        >\r\n                                            {createdQuiz != null &&\r\n                                            createdQuiz.title != null\r\n                                                ? createdQuiz.title\r\n                                                : \"\"}\r\n                                        </Heading>\r\n                                    </Tooltip>\r\n                                    <IconButton\r\n                                        colorScheme={\"teal\"}\r\n                                        onClick={() => {}}\r\n                                        icon={<EditIcon />}\r\n                                    />\r\n                                </HStack>\r\n                                <HStack>\r\n                                    <Tooltip\r\n                                        zIndex={100}\r\n                                        label={\r\n                                            \"Public: visible to everyone ;\\n Private: visible to you and shared ones\"\r\n                                        }\r\n                                    >\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            leftIcon={<ViewIcon />}\r\n                                            variant={\"solid\"}\r\n                                            colorScheme={\"white\"}\r\n                                            color={\"blue.400\"}\r\n                                        >\r\n                                            public\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                    <Tooltip\r\n                                        zIndex={100}\r\n                                        label={\"Default time for all questions\"}\r\n                                    >\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            leftIcon={<TimeIcon />}\r\n                                            variant={\"solid\"}\r\n                                            colorScheme={\"white\"}\r\n                                            color={\"blue.400\"}\r\n                                        >\r\n                                            30 secs\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                    </Box>\r\n               \r\n                */}\r\n                </Flex>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default EditQuizPage;\r\n\r\n/*\r\nHEADER\r\n*/\r\nconst HeaderWithActionBar = ({ setShowCQD }) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const onSaveQuiz = async () => {\r\n        setLoading(true);\r\n        // const resp = await axios.post(\r\n        //     `http://localhost:8080/api/v1/public/${createdQuiz.quizId}/question`,\r\n        //     JSON.parse()\r\n        // );\r\n        // let modifiledQuestions = createdQuiz.questions.map((question) => ({\r\n        //     ...question,\r\n        //     options: question.options.map((option) => ({\r\n        //         ...option,\r\n        //         optionId: null,\r\n        //     })),\r\n        // }));\r\n        // setCreatedQuiz((prevState) => ({\r\n        //     ...prevState,\r\n        //     questions: modifiledQuestions,\r\n        // }));\r\n    };\r\n    return (\r\n        <Box\r\n            zIndex={500}\r\n            bg={\"red\"}\r\n            position={\"fixed\"}\r\n            top={0}\r\n            w={\"100%\"}\r\n            bg={\"#F7FAFC\"}\r\n        >\r\n            {/*Header*/}\r\n            <Box bg={\"red\"} maxH={\"60px\"} bg={\"teal.600\"}>\r\n                <Flex\r\n                    align={\"center\"}\r\n                    px={8}\r\n                    py={2}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                >\r\n                    <ArrowBackIcon size={\"md\"} color={\"white\"} />\r\n                    <Text\r\n                        color={\"white\"}\r\n                        fontWeight={\"medium\"}\r\n                        fontStyle={\"italic\"}\r\n                    >\r\n                        Editted 1 minute ago\r\n                    </Text>\r\n                    <ButtonGroup>\r\n                        <Button size={\"sm\"} onClick={onSaveQuiz}>\r\n                            Save\r\n                        </Button>\r\n                        <Button size={\"sm\"}>Publish</Button>\r\n                    </ButtonGroup>\r\n                </Flex>\r\n            </Box>\r\n            {isLoading && (\r\n                <CircularProgress\r\n                    position=\"fixed\"\r\n                    top=\"50%\"\r\n                    right=\"50%\"\r\n                    zIndex={800}\r\n                    value={30}\r\n                    isIndeterminate\r\n                    color=\"orange.400\"\r\n                    thickness=\"12px\"\r\n                />\r\n            )}\r\n            {/*Box*/}\r\n            <Box bg={\"#F7FAFC\"} maxW={\"860px\"}>\r\n                <Box>\r\n                    <Center>\r\n                        <HStack\r\n                            boxShadow={\"md\"}\r\n                            p={4}\r\n                            borderBottomRadius={\"xl\"}\r\n                            spacing={4}\r\n                            bg={\"white\"}\r\n                        >\r\n                            <VStack w={\"400px\"}>\r\n                                <Text alignSelf={\"start\"}>Search</Text>\r\n                                <Input />\r\n                            </VStack>\r\n                            <VStack align={\"end\"} w={\"200px\"}>\r\n                                <Text>New question</Text>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setShowCQD(true);\r\n                                    }}\r\n                                    size={\"md\"}\r\n                                    rightIcon={<AddIcon />}\r\n                                    variant={\"solid\"}\r\n                                    colorScheme={\"teal\"}\r\n                                >\r\n                                    New question\r\n                                </Button>\r\n                            </VStack>\r\n                        </HStack>\r\n                    </Center>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n",["284","285"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\EditQuestionDialog.js",["286","287","288","289","290","291"],"import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Checkbox,\r\n    Container,\r\n    HStack,\r\n    Input,\r\n    Select,\r\n    Text,\r\n    Textarea,\r\n    usePrevious,\r\n    VStack,\r\n    IconButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { MdArrowDropDown } from \"react-icons/all\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\nimport { useCreateQuiz } from \"../../context/CreateQuizProvider\";\r\nimport axios from \"axios\";\r\nimport { DeleteIcon } from \"@chakra-ui/icons\";\r\n\r\nconst EditQuestionDialog = ({ setVisible }) => {\r\n    const toast = useToast();\r\n    const {\r\n        createdQuiz,\r\n        setCreatedQuiz,\r\n        question,\r\n        setQuestion,\r\n        defaultQuestionState,\r\n    } = useCreateQuiz();\r\n    const randomUID = () => {\r\n        return Math.floor((2 + Math.random()) * 0x100000000)\r\n            .toString(16)\r\n            .substring(1);\r\n    };\r\n    // const [question, setQuestion] = useState({\r\n    //     title: \"this is question title\",\r\n    //     options: [\r\n    //         {\r\n    //             content: \"this is option 1\",\r\n    //         },\r\n    //         {\r\n    //             content: \"\",\r\n    //         },\r\n    //         {\r\n    //             content: \"\",\r\n    //         },\r\n    //         {\r\n    //             content: \"\",\r\n    //         },\r\n    //     ],\r\n    // });\r\n\r\n    //on title change\r\n    const onQuizTitleChange = (e) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            title: e.target.value,\r\n        }));\r\n    };\r\n\r\n    //on option in put change\r\n    const onOptionChange = (e, i) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return { ...prevState.options[i], content: e.target.value };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    };\r\n\r\n    //add new option\r\n    const onAddOption = () => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            title: prevState.title,\r\n            options: [...prevState.options, { content: \"\" }],\r\n        }));\r\n    };\r\n\r\n    const onCheckBoxChange = (e, i) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...prevState.options[i],\r\n                        isChecked: e.target.checked,\r\n                    };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    };\r\n\r\n    function onScoreChange(e, i) {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...prevState.options[i],\r\n                        score: e.target.value,\r\n                    };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    }\r\n\r\n    const handleBtnSaveClicked = async () => {\r\n        //modify question to save (remove empty option)\r\n        let questionTmp = {\r\n            ...question,\r\n            options: question.options.filter((item) => item.content.length > 0),\r\n        };\r\n        //\r\n        let score = 0;\r\n        question.options.forEach((item) => {\r\n            if (item.score != null) {\r\n                score += item.score;\r\n            }\r\n        });\r\n\r\n        //check use select true option\r\n        if (score === 0) {\r\n            toast({\r\n                title: \"Please select at least 1 true option and option's score\",\r\n                status: \"error\",\r\n                isClosable: true,\r\n                duration: 1500,\r\n                position: \"bottom-left\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (score > 0) {\r\n            setVisible(false);\r\n            const resp = await axios.post(\r\n                `http://localhost:8080/api/v1/public/quiz/${createdQuiz.quizId}/question`,\r\n                JSON.stringify(questionTmp),\r\n                {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n            if (resp.status === 200) {\r\n                setCreatedQuiz((prevState) => ({\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, resp.data],\r\n                }));\r\n            }\r\n            setQuestion(defaultQuestionState);\r\n        } else {\r\n            setVisible(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                onClick={() => {\r\n                    console.log(\"HAHHAHA\");\r\n                }}\r\n                position={\"fixed\"}\r\n                // zIndex={1}\r\n                top={0}\r\n                bg={\"gray.300\"}\r\n                align={\"center\"}\r\n                alignItems={\"center\"}\r\n                opacity={0.4}\r\n                justifyContent={\"center\"}\r\n                width={\"100vw\"}\r\n                height={\"100vh\"}\r\n            />\r\n\r\n            <Box\r\n                boxShadow={\"md\"}\r\n                borderRadius={\"md\"}\r\n                position={\"fixed\"}\r\n                zIndex={899}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                minW={\"700px\"}\r\n                bg={\"white\"}\r\n                maxW={\"700px\"}\r\n            >\r\n                <VStack>\r\n                    <HStack bg={\"gray.700\"} p={5} w={\"100%\"}>\r\n                        <Text color={\"white\"} fontWeight={\"medium\"}>\r\n                            Question {createdQuiz.questions.length + 1}\r\n                        </Text>\r\n                    </HStack>\r\n                    {/*QUESTION TITLE*/}\r\n                    <Box p={2} w={\"100%\"}>\r\n                        <Textarea\r\n                            onChange={(e) => onQuizTitleChange(e)}\r\n                            value={question.title}\r\n                            css={{\r\n                                \"&::-webkit-scrollbar\": {\r\n                                    width: \"0px\",\r\n                                    background: \"transparent\",\r\n                                },\r\n                            }}\r\n                            resize={\"none\"}\r\n                            overflow={\"hidden\"}\r\n                            placeholder={\"Type your question here\"}\r\n                        />\r\n                    </Box>\r\n                    <VStack p={4} spacing={4} w={\"100%\"}>\r\n                        {/* {question.options.map((item, i) => ( */}\r\n                        {question.options.map((item, i) => (\r\n                            <HStack key={i} w={\"100%\"}>\r\n                                <Checkbox\r\n                                    onChange={(e) => onCheckBoxChange(e, i)}\r\n                                />\r\n                                <Input\r\n                                    value={question.options[i].content}\r\n                                    onChange={(e) => onOptionChange(e, i)}\r\n                                    wordBreak={\"break-all\"}\r\n                                    wordwrap={\"break-word\"}\r\n                                    // isFullWidth\r\n                                    size={\"md\"}\r\n                                />\r\n                                <Select\r\n                                    bg={\"teal\"}\r\n                                    color={\"gray.800\"}\r\n                                    onChange={(e) => onScoreChange(e, i)}\r\n                                    isDisabled={\r\n                                        item.isChecked == null ||\r\n                                        item.isChecked === false\r\n                                    }\r\n                                    defaultValue={0}\r\n                                    icon={<MdArrowDropDown />}\r\n                                    iconSize={0}\r\n                                    maxW={70}\r\n                                    size=\"xs\"\r\n                                    variant=\"outline\"\r\n                                >\r\n                                    {[\r\n                                        0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75,\r\n                                        2,\r\n                                    ].map((score, index) => (\r\n                                        <option key={index} value={score}>\r\n                                            {score}\r\n                                        </option>\r\n                                    ))}\r\n                                </Select>\r\n                                {/* DELETE ICON */}\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setQuestion((prevState) => ({\r\n                                            ...prevState,\r\n                                            options: prevState.options.filter(\r\n                                                (item, index) => index !== i\r\n                                            ),\r\n                                        }));\r\n                                    }}\r\n                                    color=\"red\"\r\n                                    icon={<DeleteIcon />}\r\n                                />\r\n                            </HStack>\r\n                        ))}\r\n                    </VStack>\r\n                    {/*BUTTON ADD ANSWER*/}\r\n                    <Box align={\"start\"} p={2} w={\"100%\"}>\r\n                        <Button\r\n                            onClick={onAddOption}\r\n                            size={\"sm\"}\r\n                            variant={\"outline\"}\r\n                            alignSelf={\"start\"}\r\n                            colorScheme={\"teal\"}\r\n                        >\r\n                            Add answer option\r\n                        </Button>\r\n                    </Box>\r\n                    {/*BUTTON SAVE*/}\r\n                    <Box w={\"100%\"}>\r\n                        <HStack p={2} bg={\"gray.700\"} justifyContent={\"end\"}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setQuestion(defaultQuestionState);\r\n                                    setVisible(false);\r\n                                }}\r\n                                size={\"sm\"}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={handleBtnSaveClicked} size={\"sm\"}>\r\n                                Save\r\n                            </Button>\r\n                        </HStack>\r\n                    </Box>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;\r\n",["292","293"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\edit_quiz\\QuestionEntry.js",["294","295"],"import React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    HStack,\r\n    IconButton,\r\n    Select,\r\n    SimpleGrid,\r\n    Spacer,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { AiOutlineTag, BsPen } from \"react-icons/all\";\r\nimport { CopyIcon, DeleteIcon } from \"@chakra-ui/icons\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\nimport { useCreateQuiz } from \"../../context/CreateQuizProvider\";\r\n\r\nconst QuestionEntry = ({ index, question }) => {\r\n    // const { question, setquestion } = useCreateQuiz();\r\n\r\n    // const onDeleteQuestion = () => {\r\n    //     let tmp = question;\r\n    //     tmp = tmp.filter((q) => q.title != question.title);\r\n    //     setquestion(tmp);\r\n    // };\r\n    return (\r\n        <>\r\n            <Box\r\n                boxShadow={\"sm\"}\r\n                my={5}\r\n                borderRadius={\"md\"}\r\n                align={\"start\"}\r\n                textAlign={\"start\"}\r\n                h={\"100%\"}\r\n                bg={\"white\"}\r\n                maxW={\"600px\"}\r\n                minW={\"600px\"}\r\n            >\r\n                {/*Edit bar*/}\r\n                <HStack p={2} bg={\"gray.200\"}>\r\n                    {/*QUESTION INDEX*/}\r\n                    <Text>Question {index}</Text>\r\n                    <Spacer />\r\n                    <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                        <IconButton icon={<BsPen />} />\r\n                    </Tooltip>\r\n                    <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                        <IconButton\r\n                            // onClick={onDeleteQuestion}\r\n                            icon={<DeleteIcon />}\r\n                        />\r\n                    </Tooltip>\r\n                    <Tooltip label={\"duplicate\"}>\r\n                        <IconButton icon={<CopyIcon />} />\r\n                    </Tooltip>\r\n                </HStack>\r\n                <VStack align={\"start\"} p={2} spacing={5}>\r\n                    {/*QUESTION TITLE*/}\r\n                    <Container maxW=\"3xl\">\r\n                        <Box maxW=\"3xl\">\r\n                            <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                        </Box>\r\n                    </Container>\r\n                    <SimpleGrid\r\n                        w={\"100%\"}\r\n                        align={\"start\"}\r\n                        columns={2}\r\n                        spacing={2}\r\n                    >\r\n                        {question.options.map((option, index) => (\r\n                            <Container key={index} maxW=\"xl\" centerContent>\r\n                                <Box\r\n                                    py={4}\r\n                                    w={\"100%\"}\r\n                                    maxW=\"3xl\"\r\n                                    align={\"start\"}\r\n                                >\r\n                                    <Checkbox\r\n                                        w={\"100%\"}\r\n                                        size={\"sm\"}\r\n                                        disabled={true}\r\n                                        isChecked={option.isChecked}\r\n                                    >\r\n                                        {option.content}\r\n                                    </Checkbox>\r\n                                </Box>\r\n                            </Container>\r\n                        ))}\r\n                    </SimpleGrid>\r\n                </VStack>\r\n                <HStack bg={\"gray.200\"} p={1}>\r\n                    <Select\r\n                        size={\"sm\"}\r\n                        maxW={\"100\"}\r\n                        bg={\"white\"}\r\n                        name={\"queston seconds\"}\r\n                    >\r\n                        <option value=\"option1\">30 secs</option>\r\n                        <option value=\"option2\">15 secs</option>\r\n                        <option value=\"option3\">45 secs</option>\r\n                    </Select>\r\n                    <Button\r\n                        size={\"sm\"}\r\n                        colorScheme={\"white\"}\r\n                        variant={\"ghost\"}\r\n                        leftIcon={<AiOutlineTag />}\r\n                    >\r\n                        Tag topics\r\n                    </Button>\r\n                </HStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuestionEntry;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\context\\CreateQuizProvider.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\dashboard\\Dashboard.js",["296","297","298","299"],"import React from \"react\";\r\nimport SidebarWithHeader from \"../../../pages/admin/SidebarWithHeader\";\r\nimport {Heading, Switch} from \"@chakra-ui/react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport SettingPage from \"../setting/SettingPage\";\r\n\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <Heading>\r\n            main\r\n        </Heading>\r\n\r\n\r\n    )\r\n};\r\nexport default Dashboard;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\SettingPage.js",["300","301","302","303","304","305","306"],"import React, {Component, useState} from 'react';\r\nimport {\r\n    Avatar,\r\n    Box, Button,\r\n    Divider,\r\n    Flex,\r\n    FormControl, FormErrorMessage,\r\n    FormHelperText,\r\n    FormLabel,\r\n    Heading,\r\n    HStack, Icon,\r\n    Input, Select,\r\n    Text,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {MdAccountCircle} from \"react-icons/all\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {EditIcon} from \"@chakra-ui/icons\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport AppService from \"../../../service/AppService\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport MyAvatar from \"./MyAvatar\";\r\nimport axios from \"axios\";\r\n\r\nconst SettingPage = () => {\r\n\r\n    const {user, setUser, getUserDetails} = useAuth();\r\n    const [image, setImage] = useState(null);\r\n    const [err, setErr] = useState('');\r\n    const [userTemp, setUserTemp] = useState({});\r\n    const handleEditAvt = async (e) => {\r\n        const file = e.target.files[0];\r\n        const fileType = file['type'];\r\n        console.log(fileType)\r\n        if (fileType === \"image/jpeg\" || fileType === \"image/png\") {\r\n            setImage(file);\r\n            console.log(\"Updating avt...\")\r\n            try {\r\n                const resp = await UserService.updateAvt(file);\r\n                console.log(resp.data.avt);\r\n                setUser((prev) => ({\r\n                    ...prev,\r\n                    avt: resp.data.avt\r\n                }))\r\n            } catch (e) {\r\n                console.log(\"Update avt failed: \", e.response.data.message);\r\n            }\r\n        } else {\r\n            alert(\"Please select image file types: jpeg or png\")\r\n        }\r\n    }\r\n    const validationInput = async (input, value) => {\r\n        if (user.username !== value) {\r\n            console.log('validation input')\r\n            try {\r\n                const url = process.env.REACT_APP_BASE_URL + `/public/validation-input?input=${input}&value=${value}`;\r\n                await axios.get(url);\r\n            } catch (e) {\r\n                console.log(e.response.data)\r\n                setErr(e.response.data.message);\r\n            }\r\n        }\r\n    }\r\n    const handleUpdate = async () => {\r\n        try {\r\n            const data = await UserService.updateUser(userTemp);\r\n            getUserDetails();\r\n        } catch (e) {\r\n            console.log(e.response.data.message);\r\n        }\r\n\r\n    }\r\n    return (\r\n\r\n        <Flex w={'100%'} bg={'gray.100'} justifyContent={'center'} direction={'column'}>\r\n            <Box mb={5} bg={'white'} p={8} align={'start'} w={'630px'}>\r\n                <HStack>\r\n                    <Box position={'relative'}>\r\n                        {/*<Avatar*/}\r\n                        {/*    src={image ? URL.createObjectURL(image) : AppService.getImage(user.avt)}*/}\r\n                        {/*    size={'xl'}*/}\r\n                        {/*    name={user.username}*/}\r\n                        {/*/>*/}\r\n\r\n                        <MyAvatar\r\n                            key={user.avt}\r\n                            file={image}\r\n                            imageName={user.avt}\r\n                            name={user.username}\r\n                        />\r\n                        <FormLabel htmlFor={'avtPicker'}>\r\n                            <Icon\r\n                                position={'absolute'}\r\n                                bottom={0}\r\n                                right={0}\r\n                                as={EditIcon}/>\r\n                            <Input onChange={(e) => handleEditAvt(e)}\r\n                                   id={'avtPicker'} display={'none'} type={'file'}/>\r\n                        </FormLabel>\r\n\r\n                    </Box>\r\n                    <VStack align={'start'} px={'5'}>\r\n                        <Text fontSize={'22px'} fontWeight={'medium'}>{user.username || ''}</Text>\r\n                        <Text fontSize='15px'> {user.fullName || ''}</Text>\r\n                    </VStack>\r\n                </HStack>\r\n            </Box>\r\n            <Box p={8} bg={'white'} align={'start'} minH={'1000px'} w={'630px'}>\r\n\r\n                <VStack align={'start'} spacing={10} align={'start'} w={'100%'}>\r\n                    <Heading fontSize={25}>Setting</Heading>\r\n\r\n                    <VStack align={'start'} w={'100%'}>\r\n                        <HStack>\r\n                            <MdAccountCircle size={20}/>\r\n                            <Text fontWeight={'medium'} fontSize={18}>Account</Text>\r\n                        </HStack>\r\n                        <Divider w={'100%'} colorScheme={'teal'}/>\r\n                    </VStack>\r\n                    <VStack w={'100%'} spacing={5}>\r\n\r\n                        <FormControl id=\"email\">\r\n                            <FormLabel color={'gray.700'}>Email address</FormLabel>\r\n                            <Input\r\n                                isDisabled\r\n                                value={user.email}\r\n                                focusBorderColor={'teal'} colorScheme={'teal'} borderColor={'teal'} type=\"email\"/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                        </FormControl>\r\n\r\n                        <FormControl id=\"username\" isInvalid={err}>\r\n                            <FormLabel color={'gray.700'}>Username</FormLabel>\r\n                            <Input\r\n                                isInvalid={err}\r\n                                onBlur={() => {\r\n                                    validationInput(\"username\", userTemp.username)\r\n                                }}\r\n                                onChange={(e) => {\r\n                                    setUserTemp((prev) => ({\r\n                                        ...prev,\r\n                                        username: e.target.value\r\n                                    }));\r\n                                    setErr('');\r\n                                }}\r\n                                defaultValue={user.username}\r\n                                focusBorderColor={'teal'} type=\"username\"/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                            {\r\n                                err && <FormErrorMessage color={'red'}>{err}</FormErrorMessage>\r\n                            }\r\n                        </FormControl>\r\n\r\n                        <FormControl id=\"fullName\">\r\n                            <FormLabel color={'gray.700'}>Full Name</FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setUserTemp((prev) => ({\r\n                                        ...prev,\r\n                                        fullName: e.target.value\r\n                                    }))\r\n                                }}\r\n                                defaultValue={user.fullName || ''}\r\n                                focusBorderColor={'teal'}/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                        </FormControl>\r\n\r\n                        <FormControl id=\"phone\">\r\n                            <FormLabel color={'gray.700'}>Phone Number</FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setUserTemp((prev) => ({\r\n                                        ...prev,\r\n                                        phone: e.target.value\r\n                                    }))\r\n                                }}\r\n                                defaultValue={user.phone}\r\n                                focusBorderColor={'teal'}/>\r\n                            {/*<FormHelperText>We'll never share your email.</FormHelperText>*/}\r\n                        </FormControl>\r\n\r\n\r\n                        <FormControl id=\"school\">\r\n                            <FormLabel>School</FormLabel>\r\n                            <Select placeholder=\"Select school\">\r\n                                <option>Nong Lam University</option>\r\n                                <option>UTE</option>\r\n                                <option>UTH</option>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleUpdate();\r\n                            }}\r\n                            w={'100%'} colorScheme={'teal'}>\r\n                            Save Change\r\n                        </Button>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default SettingPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Footer.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\Public.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\public\\another\\AnotherPage.js",[],["307","308"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AuthProvider.js",["309","310"],"import React, {createContext, useEffect, useState} from \"react\";\r\nimport Axios from \"axios\";\r\nimport axios from \"axios\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({children}) => {\r\n\r\n    const [user, setUser] = useState(null);\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    //login\r\n    const login = async (email, password, remember) => {\r\n        const url = \"http://localhost:8080/api/v1/auth/login\";\r\n        const data = {\r\n            \"email\": email,\r\n            \"password\": password\r\n        };\r\n        try {\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\"Content-Type\": \"application/json\"}\r\n            })\r\n            if (resp.status === 200) {\r\n                if (remember) {\r\n                    localStorage.setItem(\"accessToken\", resp.data.accessToken);\r\n                    localStorage.setItem(\"refreshToken\", resp.data.refreshToken);\r\n                }\r\n                return true;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    };\r\n    //logout\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user')\r\n        localStorage.removeItem('accessToken')\r\n        localStorage.removeItem('refreshToken')\r\n    }\r\n    const getUserDetails = async () => {\r\n        let accessToken = localStorage.getItem('accessToken');\r\n        if (accessToken != null) {\r\n            setLoading(true);\r\n            const url = process.env.REACT_APP_BASE_URL + \"/member/users/me\";\r\n            try {\r\n                const resp = await axios.get(url, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${accessToken}`\r\n                    }\r\n                })\r\n                const data = await resp.data.data;\r\n                localStorage.setItem('user', JSON.stringify(data));\r\n                console.log(\"get user detail success\",data);\r\n                setUser(data);\r\n            } catch (e) {\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //create value\r\n    const value = {\r\n        user,\r\n        setUser,\r\n        login,\r\n        logout,\r\n        getUserDetails,\r\n    };\r\n\r\n    useEffect(async () => {\r\n        setLoading(true);\r\n        await getUserDetails();\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !isLoading && <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n            }\r\n        </>\r\n    )\r\n        ;\r\n};","C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\quizApi.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\api\\axiosClient.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\HomePage.js",["311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335"],"import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Flex,\r\n    Grid,\r\n    GridItem,\r\n    SimpleGrid,\r\n    Input,\r\n    Stack,\r\n    Wrap,\r\n    WrapItem,\r\n    Heading,\r\n    Text,\r\n    HStack,\r\n    Avatar,\r\n    VStack,\r\n    Image,\r\n} from \"@chakra-ui/react\";\r\nimport QuizInfo from \"./QuizInfo\";\r\nimport Footer from \"../../../components/public/Footer\";\r\n\r\nimport {GoFlame} from \"react-icons/all\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport NotFoundQuiz from \"./NotFoundQuiz\";\r\nimport Nav from \"./Nav\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst HomePage = () => {\r\n    const history = useHistory();\r\n    const {user} = useAuth();\r\n    const [code, setCode] = useState(\"8AzAO8\");\r\n    const [found, setFound] = useState(true);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    const [quizzes, setQuizzes] = useState(null);\r\n    useEffect(() => {\r\n        /*\r\n        get newest quizzes\r\n         */\r\n        getQuizzes();\r\n\r\n    }, []);\r\n\r\n    const getQuizzes = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await QuizService.getQuizzes();\r\n            console.log(data.data);\r\n            setQuizzes(data.data);\r\n        } catch (e) {\r\n            console.log(\"Get quizzes failed\")\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    /*\r\n    handle find quiz by code \r\n    */\r\n    const handleJoinQuiz = async (e) => {\r\n        // if (code != null && code.length > 0) {\r\n        //     try {\r\n        //         const data = await QuizService.getQuizByCode(code);\r\n        //         console.log(data);\r\n        //         setFound(true);\r\n        //     } catch (e) {\r\n        //         setFound(false);\r\n        //         console.log(e.response.message);\r\n        //     }\r\n        // }\r\n    };\r\n\r\n    const getUserStreaks = () => {\r\n        return user && user.streaks || 0;\r\n    }\r\n    return (\r\n        <Flex\r\n            direction={\"column\"}\r\n            bg={\"#F7FAFC\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={\"center\"}\r\n        >\r\n            <Nav/>\r\n            {/*//Main Content*/}\r\n            <Flex\r\n                pt={8}\r\n                bg={\"#F7FAFC\"}\r\n                // minHeight={'100vh'}\r\n                w={\"100%\"}\r\n                direction={\"column\"}\r\n                alignItems={\"flex-start\"}\r\n            >\r\n                <Flex\r\n                    w={\"100%\"}\r\n                    justifyContent={\"space-around\"}\r\n                    alignItems={\"center\"}\r\n                >\r\n                    {/*Join Code*/}\r\n                    <Box\r\n                        // minW={'800px'}\r\n                        w={[\"100px\", \"500px\", \"800px\"]}\r\n                    >\r\n                        <Stack\r\n\r\n                            boxShadow={\"md\"}\r\n                            borderRadius={\"10px\"}\r\n                            bg={\"white\"}\r\n                            p={[\"10px\", \"50px\", \"100px\"]}\r\n                            minW={\"360px\"}\r\n                            direction={\"row\"}\r\n                        >\r\n                            <Input\r\n                                value={code}\r\n                                onChange={(e) => setCode(e.target.value)}\r\n                                minH={\"50px\"}\r\n                                minW={\"260px\"}\r\n                                placeholder={\"Enter a join code\"}\r\n                            />\r\n                            <Button\r\n                                isDisabled={code.length === 0}\r\n                                onClick={handleJoinQuiz}\r\n                                minH={\"50px\"}\r\n                                minW={\"30px\"}\r\n                                variant={\"solid\"}\r\n                                colorschema={\"teal\"}\r\n                                bg={'teal'}\r\n                                px={5}\r\n                                color={'white'}\r\n                            >\r\n                                Join\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                    {/*Day Streak*/}\r\n                    {!found && <NotFoundQuiz setShow={setFound}/>}\r\n                    <Box\r\n                        boxShadow={\"md\"}\r\n                        borderRadius={\"10px\"}\r\n                        bg={\"white\"}\r\n                        p={[\"10px\", \"50px\"]}\r\n                        align={\"center\"}\r\n                    >\r\n                        <Stack direction={\"column\"}>\r\n                            <Box\r\n                                // bg={\"#EDF2F7\"}\r\n                                bg={'gray.200'}\r\n                                p={1}\r\n                                borderRadius={\"200px\"}\r\n                                minW={\"200px\"}\r\n                            >\r\n                                <HStack>\r\n                                    {/*avt*/}\r\n                                    <Avatar\r\n                                        name={user != null ? user.username : \"\"}\r\n                                        src={\r\n                                  (user && user.avt) ||\r\n                                            \"https://cdn-icons-png.flaticon.com/512/2021/2021646.png\"\r\n                                        }\r\n                                    />\r\n                                    {/*username*/}\r\n                                    <Text\r\n                                        fontSize={\"16px\"}\r\n                                        color={\"#4A5568\"}\r\n                                        fontWeight={\"medium\"}\r\n                                    >\r\n                                        {user != null\r\n                                            ? user.username\r\n                                            : \"Create an account\"}\r\n                                    </Text>\r\n                                </HStack>\r\n                            </Box>\r\n                            <HStack spacing={2} pt={1} pb={1}>\r\n                                <GoFlame color={getUserStreaks() >= 1 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 2 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 3 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 4 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                                <GoFlame color={getUserStreaks() >= 5 && \"orange\" || \"#718096\"} fontSize={\"30px\"}/>\r\n                            </HStack>\r\n                            <Text\r\n                                color={\"#4A5568\"}\r\n                                fontWeight={\"bold\"}\r\n                                fontSize={\"16px\"}\r\n                            >\r\n                                {getUserStreaks()} day streak\r\n                            </Text>\r\n                            <Text color={\"#718096\"} fontSize={\"14px\"}>\r\n                                Start your streak, play now!\r\n                            </Text>\r\n                        </Stack>\r\n                    </Box>\r\n                </Flex>\r\n            </Flex>\r\n            {/*NEWEST QUIZZES*/}\r\n            <Box py={5} px={10} align={\"start\"} w={'100%'}>\r\n                <VStack align={\"start\"}>\r\n                    <Text\r\n                        fontSize={\"22px\"}\r\n                        letterSpacing={1}\r\n                        fontWeight={\"medium\"}\r\n                    >\r\n                        Newest Quizzes\r\n                    </Text>\r\n                    <Flex direction={['column', 'column', 'row']} pt={5} w={\"100%\"}>\r\n                        {\r\n                            quizzes && quizzes.map((item, index) => (\r\n                                <QuizInfo quizInfo={item} key={index} mr={[0, 2, 4]}/>\r\n                            ))\r\n                        }\r\n\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n            {/*End of RecentActivity*/}\r\n            {/**/}\r\n            <Box minH={\"100px\"}></Box>\r\n            {/*Footer*/}\r\n\r\n            <Footer/>\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\Nav.js",["336","337","338","339","340","341","342","343","344","345","346","347"],"import React, {useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Flex,\r\n    Text,\r\n    IconButton,\r\n    Button,\r\n    Stack,\r\n    Collapse,\r\n    Icon,\r\n    Link,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    useColorModeValue,\r\n    useBreakpointValue,\r\n    useDisclosure, HStack, Heading, VStack, Input, FormControl, FormLabel, FormHelperText, Wrap, WrapItem, Tag,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    HamburgerIcon,\r\n    CloseIcon,\r\n    ChevronDownIcon,\r\n    ChevronRightIcon, AddIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    const {isOpen, onToggle} = useDisclosure();\r\n    const {logout,user} = useAuth();\r\n    const history = useHistory();\r\n    return (\r\n        <Box w={'100%'}>\r\n\r\n            <Flex\r\n                bg={useColorModeValue(\"white\", \"gray.800\")}\r\n                color={useColorModeValue(\"gray.600\", \"white\")}\r\n                minH={\"60px\"}\r\n                py={{base: 2}}\r\n                px={{base: 4}}\r\n                borderBottom={1}\r\n                borderStyle={\"solid\"}\r\n                borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\r\n                align={\"center\"}\r\n            >\r\n                {/*mobile toggle button*/}\r\n                <Flex\r\n                    flex={{base: 1, md: \"auto\"}}\r\n                    ml={{base: -2}}\r\n                    display={{base: \"flex\", md: \"none\"}}\r\n                >\r\n                    <IconButton\r\n                        onClick={onToggle}\r\n                        icon={\r\n                            isOpen ? (\r\n                                <CloseIcon w={3} h={3}/>\r\n                            ) : (\r\n                                <HamburgerIcon w={5} h={5}/>\r\n                            )\r\n                        }\r\n                        variant={\"ghost\"}\r\n                        aria-label={\"Toggle Navigation\"}\r\n                    />\r\n                </Flex>\r\n                <Flex\r\n                    flex={{base: 1}}\r\n                    justify={{base: \"center\", md: \"start\"}}\r\n                >\r\n                    {/*Logo Text*/}\r\n                    <Text\r\n                        textAlign={useBreakpointValue({\r\n                            base: \"center\",\r\n                            md: \"left\",\r\n                        })}\r\n                        fontFamily={\"heading\"}\r\n                        fontSize={20}\r\n                        fontWeight={\"bold\"}\r\n                        color={useColorModeValue(\"gray.800\", \"white\")}\r\n                    >\r\n                        Logo\r\n                    </Text>\r\n\r\n                    {/*Desktop Nav*/}\r\n                    <Flex display={{base: \"none\", md: \"flex\"}} ml={10}>\r\n                        <DesktopNav/>\r\n                    </Flex>\r\n                </Flex>\r\n\r\n\r\n                <Stack\r\n                    flex={{base: 1, md: 0}}\r\n                    justify={\"flex-end\"}\r\n                    direction={\"row\"}\r\n                    spacing={6}\r\n                >\r\n                    {/*Sign In */}\r\n                    {\r\n                       user != null\r\n                            ? (\r\n                                <Button\r\n                                    as={\"a\"}\r\n                                    fontSize={\"sm\"}\r\n                                    fontWeight={400}\r\n                                    variant={\"link\"}\r\n                                    href={\"#\"}\r\n                                    onClick={\r\n                                        async (e) => {\r\n                                            await logout();\r\n                                            history.push('/login');\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    {/*<RRLink to={'/login'}>*/}\r\n                                    Logout\r\n                                    {/*</RRLink>*/}\r\n                                </Button>\r\n                            ) :\r\n                            (\r\n                                <Button\r\n                                    fontSize={\"sm\"}\r\n                                    fontWeight={400}\r\n                                    onClick={\r\n                                        (e) => {\r\n                                            history.push('/login')\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    Sign In\r\n                                </Button>\r\n                            )\r\n                    }\r\n\r\n                    {/*Sign Up*/}\r\n                    {\r\n                     user == null &&\r\n                        <Button\r\n                            display={{base: \"none\", md: \"inline-flex\"}}\r\n                            fontSize={\"sm\"}\r\n                            fontWeight={600}\r\n                            color={\"white\"}\r\n                            bg={\"pink.400\"}\r\n                            _hover={{\r\n                                bg: \"pink.300\",\r\n                            }}\r\n                            onClick={() => history.push('/register')}\r\n                        >\r\n                            Sign Up\r\n                        </Button>}\r\n                </Stack>\r\n            </Flex>\r\n            {/*Mobile Nav*/}\r\n            <Collapse in={isOpen} animateOpacity>\r\n                <MobileNav/>\r\n            </Collapse>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n\r\nconst DesktopNav = () => {\r\n    const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\r\n    const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\r\n    const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\r\n\r\n    return (\r\n        <Stack direction={\"row\"} spacing={4}>\r\n            {NAV_ITEMS.map((navItem) => (\r\n                <Box key={navItem.label}>\r\n                    <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\r\n                        <PopoverTrigger>\r\n                            <Link\r\n                                p={2}\r\n                                href={navItem.href ?? \"#\"}\r\n                                fontSize={\"sm\"}\r\n                                fontWeight={500}\r\n                                color={linkColor}\r\n                                _hover={{\r\n                                    textDecoration: \"none\",\r\n                                    color: linkHoverColor,\r\n                                }}\r\n                            >\r\n                                {navItem.label}\r\n                            </Link>\r\n                        </PopoverTrigger>\r\n\r\n                        {navItem.children && (\r\n                            <PopoverContent\r\n                                border={0}\r\n                                boxShadow={\"xl\"}\r\n                                bg={popoverContentBgColor}\r\n                                p={4}\r\n                                rounded={\"xl\"}\r\n                                minW={\"sm\"}\r\n                            >\r\n                                <Stack>\r\n                                    {navItem.children.map((child) => (\r\n                                        <DesktopSubNav\r\n                                            key={child.label}\r\n                                            {...child}\r\n                                        />\r\n                                    ))}\r\n                                </Stack>\r\n                            </PopoverContent>\r\n                        )}\r\n                    </Popover>\r\n                </Box>\r\n            ))}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nconst DesktopSubNav = ({label, href, subLabel}) => {\r\n    return (\r\n        <Link\r\n            href={href}\r\n            role={\"group\"}\r\n            display={\"block\"}\r\n            p={2}\r\n            rounded={\"md\"}\r\n            _hover={{bg: useColorModeValue(\"pink.50\", \"gray.900\")}}\r\n        >\r\n            <Stack direction={\"row\"} align={\"center\"}>\r\n                <Box>\r\n                    <Text\r\n                        transition={\"all .3s ease\"}\r\n                        _groupHover={{color: \"pink.400\"}}\r\n                        fontWeight={500}\r\n                    >\r\n                        {label}\r\n                    </Text>\r\n                    <Text fontSize={\"sm\"}>{subLabel}</Text>\r\n                </Box>\r\n                <Flex\r\n                    transition={\"all .3s ease\"}\r\n                    transform={\"translateX(-10px)\"}\r\n                    opacity={0}\r\n                    _groupHover={{\r\n                        opacity: \"100%\",\r\n                        transform: \"translateX(0)\",\r\n                    }}\r\n                    justify={\"flex-end\"}\r\n                    align={\"center\"}\r\n                    flex={1}\r\n                >\r\n                    <Icon\r\n                        color={\"pink.400\"}\r\n                        w={5}\r\n                        h={5}\r\n                        as={ChevronRightIcon}\r\n                    />\r\n                </Flex>\r\n            </Stack>\r\n        </Link>\r\n    );\r\n};\r\n\r\nconst MobileNav = () => {\r\n    return (\r\n        <Stack\r\n            bg={useColorModeValue(\"white\", \"gray.800\")}\r\n            p={4}\r\n            display={{md: \"none\"}}\r\n        >\r\n            {NAV_ITEMS.map((navItem) => (\r\n                <MobileNavItem key={navItem.label} {...navItem} />\r\n            ))}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nconst MobileNavItem = ({label, children, href}) => {\r\n    const {isOpen, onToggle} = useDisclosure();\r\n\r\n    return (\r\n        <Stack spacing={4} onClick={children && onToggle}>\r\n            <Flex\r\n                py={2}\r\n                as={Link}\r\n                href={href ?? \"#\"}\r\n                justify={\"space-between\"}\r\n                align={\"center\"}\r\n                _hover={{\r\n                    textDecoration: \"none\",\r\n                }}\r\n            >\r\n                <Text\r\n                    fontWeight={600}\r\n                    color={useColorModeValue(\"gray.600\", \"gray.200\")}\r\n                >\r\n                    {label}\r\n                </Text>\r\n                {children && (\r\n                    <Icon\r\n                        as={ChevronDownIcon}\r\n                        transition={\"all .25s ease-in-out\"}\r\n                        transform={isOpen ? \"rotate(180deg)\" : \"\"}\r\n                        w={6}\r\n                        h={6}\r\n                    />\r\n                )}\r\n            </Flex>\r\n\r\n            <Collapse\r\n                in={isOpen}\r\n                animateOpacity\r\n                style={{marginTop: \"0!important\"}}\r\n            >\r\n                <Stack\r\n                    mt={2}\r\n                    pl={4}\r\n                    borderLeft={1}\r\n                    borderStyle={\"solid\"}\r\n                    borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n                    align={\"start\"}\r\n                >\r\n                    {children &&\r\n                    children.map((child) => (\r\n                        <Link key={child.label} py={2} href={child.href}>\r\n                            {child.label}\r\n                        </Link>\r\n                    ))}\r\n                </Stack>\r\n            </Collapse>\r\n        </Stack>\r\n    );\r\n};\r\n\r\ninterface NavItem {\r\n    label: string;\r\n    subLabel?: string;\r\n    children?: Array<NavItem>;\r\n    href?: string;\r\n}\r\n\r\nconst NAV_ITEMS: Array<NavItem> = [\r\n    {\r\n        label: \"Inspiration\",\r\n        children: [\r\n            {\r\n                label: \"Explore Design Work\",\r\n                subLabel: \"Trending Design to inspire you\",\r\n                href: \"#\",\r\n            },\r\n            {\r\n                label: \"New & Noteworthy\",\r\n                subLabel: \"Up-and-coming Designers\",\r\n                href: \"#\",\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        label: \"Find Work\",\r\n        children: [\r\n            {\r\n                label: \"Job Board\",\r\n                subLabel: \"Find your dream design job\",\r\n                href: \"#\",\r\n            },\r\n            {\r\n                label: \"Freelance Projects\",\r\n                subLabel: \"An exclusive list for contract work\",\r\n                href: \"#\",\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        label: \"Learn Design\",\r\n        href: \"#\",\r\n    },\r\n    {\r\n        label: \"Dasboard\",\r\n        href: \"/admin\",\r\n    },\r\n];\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\RegisterPage.js",["348","349","350","351","352"],"import React, {useState} from 'react';\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {\r\n    Box, Button, Checkbox,\r\n    Flex,\r\n    FormControl, FormHelperText,\r\n    FormLabel,\r\n    Heading,\r\n    Input,\r\n    Link,\r\n    Stack,\r\n    Text,\r\n    useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\n\r\nconst RegisterPage = () => {\r\n    const {login, getUserDetails, setUser} = useAuth();\r\n    const [username, setUsername] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const history = useHistory();\r\n\r\n    const handleSignup = async (e) => {\r\n        e.preventDefault();\r\n        const url = `${process.env.REACT_APP_BASE_URL}/auth/registration`;\r\n        let data = {\r\n            \"username\": username,\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"fullName\":fullName\r\n        };\r\n        try {\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            console.log(\"Registration success!\");\r\n            history.replace('/verification');\r\n        } catch (e) {\r\n            console.log(e.response.data.message);\r\n\r\n            setError(e.response.data.message);\r\n            return;\r\n        }\r\n\r\n\r\n    }\r\n    const validation = async (input, value) => {\r\n        const url = process.env.REACT_APP_BASE_URL + `/public/validation-input?input=${input}&value=${value}`;\r\n        try {\r\n            await axios.get(url);\r\n        } catch (e) {\r\n            const data = e.response.data;\r\n            setError(data.message);\r\n        }\r\n    }\r\n    return (\r\n        <Flex\r\n            minH={\"100vh\"}\r\n            align={\"center\"}\r\n            justify={\"center\"}\r\n            bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n        >\r\n            <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} minW={'lg'} py={12} px={6}>\r\n                <Stack align={\"center\"}>\r\n                    <Heading fontSize={\"4xl\"}>Register Account</Heading>\r\n                    <Text fontSize={\"lg\"} color={\"gray.600\"}>\r\n                        to enjoy all of our cool{\" \"}\r\n                        <Link color={\"blue.400\"}>features</Link> ✌️\r\n                    </Text>\r\n                </Stack>\r\n                <Box\r\n                    rounded={\"lg\"}\r\n                    bg={useColorModeValue(\"white\", \"gray.700\")}\r\n                    boxShadow={\"lg\"}\r\n                    p={8}\r\n                >\r\n                    {/*Form*/}\r\n                    <Stack spacing={4}>\r\n                        {/*Username*/}\r\n                        <FormControl id=\"username\">\r\n                            <FormLabel>Username</FormLabel>\r\n                            <Input\r\n                                onBlur={() => {\r\n                                    validation(\"username\", username);\r\n                                }}\r\n                                value={username}\r\n                                onChange={(e) => {\r\n                                    setError('');\r\n                                    setUsername(e.target.value);\r\n                                }}\r\n                                type='email|text'/>\r\n                            {\r\n                                error.length > 0 &&\r\n                                <FormHelperText color={'crimson'}>\r\n                                    {error}</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        {/*FullName*/}\r\n                        <FormControl id=\"fullName\">\r\n                            <FormLabel>FullName</FormLabel>\r\n                            <Input\r\n\r\n                                value={fullName}\r\n                                onChange={(e) => {\r\n                                    setError('');\r\n                                    setFullName(e.target.value);\r\n                                }}\r\n                                type='text'/>\r\n                        </FormControl>\r\n                        {/*Email*/}\r\n                        <FormControl id=\"email\">\r\n                            <FormLabel>Email address</FormLabel>\r\n                            <Input\r\n                                onBlur={() => {\r\n                                    validation(\"email\", email);\r\n                                }}\r\n                                value={email}\r\n                                onChange={(e) => {\r\n                                    setError('');\r\n                                    setEmail(e.target.value);\r\n                                }}\r\n                                type='email|text'/>\r\n\r\n                        </FormControl>\r\n                        {/*Password*/}\r\n                        <FormControl id=\"password\">\r\n                            <FormLabel>Password</FormLabel>\r\n                            <Input\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                type=\"password\"/>\r\n                        </FormControl>\r\n                        <Stack>\r\n                            <Box minH={5}/>\r\n                            <Button\r\n                                disabled={\r\n                                    (username.length === 0 || password.length === 0 || email.length === 0)\r\n                                }\r\n                                bg={\"blue.400\"}\r\n                                color={\"white\"}\r\n                                _hover={{\r\n                                    bg: \"blue.500\",\r\n                                }}\r\n                                onClick={handleSignup}\r\n                            >\r\n                                Sign up\r\n                            </Button>\r\n\r\n                        </Stack>\r\n                    </Stack>\r\n                </Box>\r\n            </Stack>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\QuizInfo.js",["353","354","355","356"],"import React, {useEffect} from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Center,\r\n    useColorModeValue,\r\n    Heading,\r\n    Text,\r\n    Stack,\r\n    Image, Tag, Badge,\r\n} from '@chakra-ui/react';\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst IMAGE =\r\n    'https://cdn-icons-png.flaticon.com/512/4193/4193243.png';\r\n\r\nconst QuizInfo = ({quizInfo, ...rest}) => {\r\n    const history = useHistory();\r\n\r\n    const handleJoinQuiz = async () => {\r\n        try {\r\n            const data = await QuizService.getQuizByCode(quizInfo.code);\r\n            console.log(data);\r\n            history.push(`/join/quiz/${quizInfo.code}`);\r\n        } catch (e) {\r\n            console.log(e.response.message);\r\n        }\r\n    }\r\n    return (\r\n        <Center {...rest} cursor={'pointer'}>\r\n            <Box\r\n                onClick={() => handleJoinQuiz()}\r\n                minW={'min'}\r\n                boxShadow={'md'}\r\n                role={'group'}\r\n                p={2}\r\n                bg={useColorModeValue('white', 'gray.800')}\r\n                // boxShadow={'2xl'}\r\n                rounded={'lg'}\r\n                pos={'relative'}\r\n                zIndex={1}>\r\n                {/*Image*/}\r\n                <Box\r\n                    rounded={'lg'}\r\n                    pos={'relative'}\r\n\r\n                >\r\n                    <Image\r\n                        p={2}\r\n                        rounded={'lg'}\r\n                        height={160}\r\n                        width={160}\r\n                        objectFit={'cover'}\r\n                        src={IMAGE}\r\n                    />\r\n                </Box>\r\n                {/*End of Image*/}\r\n\r\n                <Stack align={'center'} pb={2}>\r\n                    {/*<Text color={'gray.500'} fontSize={'sm'} textTransform={'uppercase'}>*/}\r\n                    {/*    Brand*/}\r\n                    {/*</Text>*/}\r\n                    <Badge colorScheme={'purple'}>{quizInfo.subject || ''}</Badge>\r\n                    <Heading fontSize={'md'} fontFamily={'body'} fontWeight={500}>\r\n                        {quizInfo.title}\r\n                    </Heading>\r\n                    {/*<Stack direction={'row'} align={'center'}>*/}\r\n                    {/*    <Text fontWeight={800} fontSize={'xl'}>*/}\r\n                    {/*        $57*/}\r\n                    {/*    </Text>*/}\r\n                    {/*    <Text textDecoration={'line-through'} color={'gray.600'}>*/}\r\n                    {/*        $199*/}\r\n                    {/*    </Text>*/}\r\n                    {/*</Stack>*/}\r\n                </Stack>\r\n\r\n                {/*<Box bg={'red'} top={0} left={5} position={'absolute'}>*/}\r\n                {/*    df*/}\r\n                {/*</Box>*/}\r\n            </Box>\r\n        </Center>\r\n    );\r\n};\r\nexport default QuizInfo;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\home\\NotFoundQuiz.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\quiz_info\\JoinQuizInfo.js",["357","358","359","360","361","362","363","364","365"],"import React, {useEffect, useState} from 'react';\r\nimport {Box, Button, ButtonGroup, CircularProgress, Flex, Heading, HStack, Text, VStack} from \"@chakra-ui/react\";\r\nimport {AiOutlineFieldNumber, RiNumbersFill, RiNumbersLine} from \"react-icons/all\";\r\nimport {TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst JoinQuizInfo = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const history = useHistory();\r\n    const {code} = useParams();\r\n    const {foundedQuiz, setFoundedQuiz, setDirectUrl} = useQuiz();\r\n    const {user} = useAuth();\r\n\r\n\r\n    useEffect(async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await QuizService.getQuizByCode(code);\r\n            setFoundedQuiz(data.data);\r\n            console.log(data.data);\r\n\r\n        } catch (e) {\r\n            console.log(e.response.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    //handle button start\r\n    const onStart = async () => {\r\n        try {\r\n            const data = await QuizService.getQuizQuestions(code);\r\n            setFoundedQuiz(prev => ({\r\n                ...prev,\r\n                questions: data.data\r\n            }))\r\n            console.log(foundedQuiz);\r\n            history.push(`/join/quiz/${code}/start`);\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    const onCancel = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <Box bg={'blue.100'} minH={'100vh'}>\r\n            {isLoading && <>\r\n                <Box position={'fixed'}\r\n                     top={'50%'}\r\n                     right={'50%'}\r\n                     minH={'100vh'}\r\n                     minW={'100vw'}\r\n                     zIndex={900}\r\n                     opacity={0.5}\r\n                     bg={'gray.100'}\r\n                     transform={\"translate(50%,-50%)\"}/>\r\n                <CircularProgress\r\n                    position={'fixed'}\r\n                    top={'50%'}\r\n                    right={'50%'}\r\n                    isIndeterminate\r\n                    zIndex={901}\r\n                    transform={\"translate(50%,-50%)\"}\r\n                    value={30}\r\n                    color=\"orange.400\" thickness=\"12px\"/>\r\n            </>}\r\n            {!isLoading && <Flex w={'100%'} direction={'column'}>\r\n                <Box>\r\n                    <VStack pt={10}>\r\n                        {/*INFO*/}\r\n                        <Box w={500} minW={200} bg={'white'} p={10} textAlign={'start'}>\r\n                            <VStack alignItems={'start'} textAlign={'start'}>\r\n                                <Box my={4}>\r\n                                    <Heading fontSize={20}>{foundedQuiz.title}</Heading>\r\n                                </Box>\r\n                                <HStack spacing={5}>\r\n                                    <Button leftIcon={<RiNumbersLine/>}>\r\n                                        <Text>{foundedQuiz.numOfQuestions} question</Text>\r\n                                    </Button>\r\n                                    <Button leftIcon={<TimeIcon/>}>\r\n                                        <Text>{foundedQuiz.limitTime} mins </Text>\r\n                                    </Button>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                        {/*  ACTION BUTTONS*/}\r\n                        <VStack w={500} p={10} bg={'white'} minW={'200px'} spacing={8}>\r\n                            <Button\r\n                                onClick={onStart}\r\n                                size={'lg'}\r\n                                w={'100%'}\r\n                                colorScheme={'teal'}>\r\n                                Start\r\n                            </Button>\r\n                            <Button size={'lg'} w={'100%'} colorScheme={'blue'}>Share</Button>\r\n                            <Button onClick={onCancel} size={'lg'} w={'100%'} colorScheme={'gray'}>Cancel</Button>\r\n                        </VStack>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default JoinQuizInfo;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\StartQuiz.js",["366","367","368","369","370","371","372","373","374","375","376","377"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport SubmitReportEntry from \"./SubmitReportEntry\";\r\nimport format from 'dateformat';\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {code} = useParams();\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [report, setReport] = useState(null);\r\n    const cancelRef = useRef();\r\n    const {user} = useAuth();\r\n    const [submitContent, setSubmitContent] = useState({answers: []});\r\n    const history = useHistory();\r\n\r\n    useEffect(async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (!foundedQuiz) {\r\n                    const quizInfo = await getQuizInfo();\r\n                    setFoundedQuiz(quizInfo);\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: quizInfo.id,\r\n                        startTime: new Date()\r\n                    }))\r\n                } else {\r\n                    setSubmitContent((prev) => ({\r\n                        ...prev, quizId: foundedQuiz.id, startTime: new Date()\r\n\r\n                    }))\r\n                }\r\n                if ((foundedQuiz && !foundedQuiz.questions) || (!foundedQuiz)) {\r\n                    const questions = await getQuizQuestions();\r\n                    setFoundedQuiz(prev => ({\r\n                        ...prev,\r\n                        questions: questions\r\n                    }))\r\n                }\r\n\r\n            } catch (e) {\r\n\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n\r\n            setLoading(false);\r\n        }\r\n        , []);\r\n\r\n\r\n    const getQuizInfo = async () => {\r\n        console.log(\"get quiz info\")\r\n        const data = await QuizService.getQuizByCode(code);\r\n        return data.data;\r\n    }\r\n    const getQuizQuestions = async () => {\r\n        console.log('get quiz\\'s questions')\r\n        const questions = await QuizService.getQuizQuestions(code);\r\n\r\n        return questions.data;\r\n    }\r\n\r\n    const onCheckOption = (e, question, option) => {\r\n        if (e.target.checked) {\r\n            if ((submitContent.answers.filter((item) => item.questionId === question.questionId)).length > 0) {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => item.questionId !== question.questionId ? item : {\r\n                        ...item,\r\n                        options: [\r\n                            ...new Set([...item.options,\r\n                                option.optionId])\r\n                        ]\r\n                    })\r\n                }))\r\n            }\r\n            //\r\n            else {\r\n                setSubmitContent((prev) => ({\r\n                    ...prev,\r\n                    answers: [...prev.answers, {\r\n                        questionId: question.questionId,\r\n                        options: [\r\n                            option.optionId\r\n                        ]\r\n                    }]\r\n                }))\r\n            }\r\n        } else {\r\n            setSubmitContent((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    answers: prev.answers.map((item) => {\r\n                            // item.questionId !== question.questionId ? item : {\r\n                            //     ...item,\r\n                            //     options: [\r\n                            //         ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                            //     ]\r\n                            // }\r\n                            if (item.questionId !== question.questionId) {\r\n                                return item;\r\n                            } else {\r\n                                // let mOptions = item.options.filter(optionId => optionId !== option.optionId);\r\n                                // return {\r\n                                //     ...item,\r\n                                //     options: [\r\n                                //         ...new Set(mOptions)\r\n                                //     ]\r\n                                // }\r\n                                return ({\r\n                                    ...item,\r\n                                    options: [\r\n                                        ...new Set(item.options.filter(optionId => optionId !== option.optionId))\r\n                                    ]\r\n                                })\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const submitAnswers = async () => {\r\n        const data = await QuizService.submissionAnswers(JSON.stringify(submitContent));\r\n        setReport(data.data);\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <Flex direction={'column'} bg={'blue.100'}>\r\n            <CustomAlertDialog\r\n                title={'Submit answers'}\r\n                description={'Are you sure? You can\\'t undo this action afterwards.'}\r\n                isOpen={isOpen}\r\n                setOpen={setOpen}\r\n                cancelRef={cancelRef}\r\n                onSubmit={() => submitAnswers()}\r\n            />\r\n            {/*QUIZ SUBMIT ANSWERS REPORT*/}\r\n            {report && <Box bg={''} mx={'5'} mt={'5'} p={5}>\r\n                <Heading>Submit Report</Heading>\r\n                <SimpleGrid spacing={5} columns={'4'} py={5}>\r\n                    <SubmitReportEntry title={'score'} content={`${report.score}/${report.totalScore}`}/>\r\n                    <SubmitReportEntry title={'questions'}\r\n                                       content={`${report.submitQuestionsCount}/${report.numOfQuestions}`}/>\r\n                    <SubmitReportEntry title={'startTime'} content={`${format(report.startTime, \"dd-mm hh:MM\")}`}/>\r\n                    <SubmitReportEntry title={'finishTime'} content={`${format(report.finishTime, \"dd-mm hh:MM\")}`}/>\r\n                </SimpleGrid>\r\n            </Box>}\r\n\r\n            <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n                 align={'center'}>\r\n                {\r\n                    !isLoading && <Box\r\n                        bg={'white'}\r\n                        borderRadius={'md'}\r\n                        boxShadow={'xl'}\r\n                        minH={'100vh'}\r\n                        maxW={'860px'}\r\n                        p={10}>\r\n                        <VStack position={'relative'}>\r\n\r\n                            {/*\r\n                           QUIZ TITLE\r\n                           */}\r\n                            <Heading\r\n                                pb={10}\r\n                                color={'purple.600'}\r\n                                fontSize={30}>\r\n                                {foundedQuiz != null ? foundedQuiz.title : ''}\r\n                            </Heading>\r\n                            {/*NUMBER OF QUESTIONS*/}\r\n                            <Text\r\n                                fontWeight={'medium'}\r\n                                color={'teal'}\r\n                                letterSpacing={1}\r\n                                fontStyle={'italic'}\r\n                                position={'absolute'}\r\n                                top={0}\r\n                                right={0}\r\n                                m={5}>\r\n                                {foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.length} Questions\r\n                            </Text>\r\n                            {/*QUESTIONS*/}\r\n                            {\r\n                                foundedQuiz && foundedQuiz.questions && foundedQuiz.questions.map((question, i) => (\r\n                                    <VStack\r\n                                        w={'100%'}\r\n                                        align={'start'}\r\n                                        textAlign={'start'} key={i}\r\n                                        p={2}\r\n                                        spacing={5}>\r\n                                        {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                        <Container w={'100%'} maxW=\"4xl\">\r\n                                            <Box maxW=\"4xl\">\r\n                                                <Text fontWeight={'medium'} fontSize={20} color={'purple.900'}>\r\n                                                    {i + 1}. {question.title} \\t QuestionID : {question.questionId}\r\n                                                </Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        {/*OPTIONS*/}\r\n                                        <SimpleGrid\r\n                                            w={'100%'}\r\n                                            columns={2}\r\n                                            spacing={4}\r\n                                            align={'start'}\r\n                                            textAlign={'start'}>\r\n                                            {\r\n                                                question.options.map((option, i) => {\r\n                                                    let filterElement = submitContent.answers.filter(v => v['questionId'] === question.questionId)[0];\r\n                                                    return (\r\n                                                        <Container\r\n                                                            w={'100%'}\r\n                                                            minW={300}\r\n                                                            key={i}\r\n                                                            // maxW=\"xl\"\r\n                                                            align={'start'}\r\n                                                            textAlign={'start'}\r\n                                                            alignItems={'start'}\r\n                                                        >\r\n                                                            <Box\r\n                                                                padding={1}\r\n                                                                // maxW=\"3xl\"\r\n                                                            >\r\n                                                                <Checkbox\r\n                                                                    isDisabled={report !== null}\r\n                                                                    defaultChecked={\r\n                                                                        filterElement &&\r\n                                                                        filterElement.options.filter(o => o === option.optionId)[0]\r\n                                                                    }\r\n                                                                    onChange={(e) => onCheckOption(e, question, option)}\r\n                                                                    value={option.optionId}\r\n                                                                    colorScheme={'teal'}\r\n                                                                    size={'lg'}>\r\n                                                                    {option.content} \\t OptionID : {option.optionId}\r\n                                                                </Checkbox>\r\n                                                            </Box>\r\n                                                        </Container>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                        <Divider/>\r\n                                    </VStack>\r\n                                ))\r\n                            }\r\n                            {/* Submit button*/}\r\n                            <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                <Button\r\n                                    isDisabled={report !== null}\r\n                                    onClick={() => {\r\n                                        setOpen(true)\r\n                                        setSubmitContent((prevState => ({\r\n                                            ...prevState,\r\n                                            finishTime: new Date(),\r\n                                        })))\r\n                                    }}\r\n                                    alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                            </Box>\r\n                        </VStack>\r\n\r\n                        {/* FIXED CONTENTS*/}\r\n                        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                            <Tooltip label={\"Scroll to top\"}>\r\n                                <IconButton\r\n                                    onClick={() => window.scrollTo(0, 0)}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowUpIcon/>}/>\r\n                            </Tooltip>\r\n                            <Tooltip label={\"Scroll to bottom\"}>\r\n                                <IconButton\r\n                                    // aria-label={\"\"}\r\n                                    onClick={() => {\r\n                                        // pageRef.current.scrollIntoView({\r\n                                        //     behavior: \"smooth\",\r\n                                        //     block: \"end\",\r\n                                        //     inline: \"nearest\"\r\n                                        // })\r\n                                    }}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowDownIcon/>}/>\r\n                            </Tooltip>\r\n                        </HStack>\r\n                        {report === null && <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                            <Button\r\n                                isDisabled={report !== null}\r\n                                size={'md'} colorScheme={'teal'} variant={'outline'}\r\n                                leftIcon={<TimeIcon/>}>{foundedQuiz.limitTime || 'No Time Limit'}{' '}\r\n                                left</Button>\r\n                        </Flex>}\r\n                    </Box>\r\n\r\n\r\n                }\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\CustomAlertDialog.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\LibraryPage.js",["378","379","380","381","382","383","384","385","386","387","388","389"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assigned\\AssignedQuizPage.js",["390","391","392"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Badge,\r\n    Box, Button,\r\n    Divider,\r\n    Heading,\r\n    HStack,\r\n    Table,\r\n    TableCaption,\r\n    Tbody,\r\n    Td,\r\n    Text,\r\n    Th,\r\n    Thead, Tooltip,\r\n    Tr\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport dateFormat from 'dateformat';\r\n\r\nconst AssignedQuizPage = () => {\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [assignedQuizzes, setAssignedQuiz] = useState([]);\r\n    useEffect(() => {\r\n        console.log('use effect assign quiz');\r\n        try {\r\n            setLoading(true);\r\n            axios.get('http://localhost:8080/api/v1/member/quizzes/assigned-quizzes', {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\r\n                }\r\n            })\r\n                .then((resp) => {\r\n                    if (resp.status === 200) {\r\n                        console.log(resp.data);\r\n                        setAssignedQuiz(resp.data);\r\n                        setLoading(false);\r\n                    }\r\n                })\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n    const formatDate = (start, end) => {\r\n        const from = dateFormat(start, \"dddd, mmmm, yyyy\");\r\n        const to = dateFormat(end, \"dddd, mmmm, yyyy, h:MM:ss TT\");\r\n        return from + \"\\t-\\t\" + to;\r\n\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Heading textAlign={'center'}>Assigned quizess</Heading>\r\n            <Divider my={5}/>\r\n\r\n            <Table size={'lg'} variant={'striped'} colorScheme={'blue'}>\r\n                <Thead>\r\n                    <Tr>\r\n                        <Th>No</Th>\r\n                        <Th>Quiz Name</Th>\r\n                        <Th>Deadline</Th>\r\n                        <Th>Action</Th>\r\n                    </Tr>\r\n                </Thead>\r\n\r\n                <Tbody>\r\n\r\n                    {\r\n                        assignedQuizzes.length == 0 && <Tr>\r\n                            <Td colSpan={4} py={5} my={5}>\r\n                                Your dont have any assigned quiz\r\n                            </Td>\r\n                        </Tr>\r\n\r\n                    }\r\n                    {\r\n                        assignedQuizzes.length > 0 &&\r\n                        assignedQuizzes.map((assignmentInfo, index) => (\r\n                            <Tr key={index}>\r\n                                <Td>1</Td>\r\n                                <Td>\r\n                                    <HStack>\r\n                                        <Text>        {assignmentInfo.quizDetails.title}  </Text>\r\n                                        <Badge ml=\"1\" colorScheme=\"green\">\r\n                                            New\r\n                                        </Badge>\r\n                                        {/*<Text bg={'teal.700'} px={2} color={'white'} fontSize={'sm'}>new</Text>*/}\r\n                                    </HStack>\r\n                                </Td>\r\n                                <Td>\r\n                                    <Tooltip\r\n                                        label={\r\n                                            // dateFormat(assignmentInfo.finishDate, \"dddd, mmmm, yyyy, h:MM:ss TT\")\r\n                                            formatDate(assignmentInfo.startDate, assignmentInfo.finishDate)\r\n                                        }>\r\n                                        <Text>\r\n                                            {assignmentInfo.finishDate\r\n                                                ? dateFormat(assignmentInfo.finishDate, \"dd, mmmm, yyyy, h:MM TT\")\r\n                                                : \"No Deadline\"\r\n                                            }\r\n                                        </Text>\r\n                                    </Tooltip>\r\n\r\n                                </Td>\r\n\r\n                                <Td>\r\n                                    <Button colorScheme={'blue'}>\r\n                                        Take\r\n                                    </Button>\r\n                                </Td>\r\n\r\n                            </Tr>\r\n                        ))\r\n                    }\r\n\r\n                </Tbody>\r\n                {\r\n                    assignedQuizzes.length > 0 && <TableCaption>Assigned Quizzes</TableCaption>\r\n                }\r\n\r\n            </Table>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignedQuizPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\AssignedUsers.js",["393","394","395","396","397"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Button, Divider, HStack, Icon, IconButton, ListItem,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, OrderedList, Spacer, Text,\r\n    useDisclosure, VStack\r\n} from \"@chakra-ui/react\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport axios from \"axios\";\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\nimport {FaUsers} from \"react-icons/all\";\r\n\r\nconst AssignedUsers = ({isOpen, quizId, setOpen}) => {\r\n\r\n    const [users, setUsers] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.log(\"ASSIGNED \")\r\n        const fetchUsers = async () => {\r\n            console.log(\"get userss\")\r\n            try {\r\n                const resp = await axios.get(`http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/${quizId}/users`, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                    }\r\n                })\r\n                if (resp.status === 200) {\r\n                    setUsers(resp.data);\r\n                    console.log(resp.data);\r\n                }\r\n            } catch (e) {\r\n                console.log(\"Failed to fetch assigned users \", e);\r\n            }\r\n        }\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const onRemoveUser = async (userId) => {\r\n        console.log(\"removing...\")\r\n        try {\r\n            console.log(\"removing...1\")\r\n\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes?uid=${userId}&qid=${quizId}`;\r\n            const response = await axios.delete(url, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                },\r\n\r\n            })\r\n            if (response.status === 200) {\r\n                const filteredList = users.filter(user => user.userId != userId);\r\n                setUsers(filteredList);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Failed to remove assigned user \", e)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Modal size={'md'} onClose={() => {\r\n            }} scrollBehavior={'inside'} closeOnOverlayClick={true} isOpen={isOpen}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader\r\n                        //     style={{\r\n                        //     fontSize:10,\r\n                        // }}\r\n                    >\r\n                        <VStack w={'100%'} align={'start'}>\r\n                            <HStack>\r\n                                <Text fontSize={15} fontWeight={'medium'}>Assigned Users ({users&&users.length})</Text>\r\n                                <FaUsers/>\r\n                            </HStack>\r\n                            <Divider/>\r\n                        </VStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton onClick={() => setOpen(false)}/>\r\n                    <ModalBody>\r\n                        <OrderedList>\r\n                            {\r\n                                users && users.map((user, i) => (\r\n                                    <ListItem key={user.email}>\r\n                                        <HStack w={'100%'}>\r\n                                            <Text>{user.email}</Text>\r\n                                            <Spacer/>\r\n                                            <IconButton\r\n                                                onClick={() => onRemoveUser(user.userId)}\r\n                                                bg={'white'} color={'gray.500'} icon={<DeleteIcon/>}/>\r\n                                        </HStack>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n\r\n                        </OrderedList>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        {/*<Button colorScheme=\"blue\" mr={3}>*/}\r\n                        {/*    Save*/}\r\n                        {/*</Button>*/}\r\n                        <Button onClick={() => setOpen(false)}>Close</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignedUsers;","C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\AdminSettingProvider.js",["398","399"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\Admin.js",["400","401","402"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\SidebarWithHeader.js",["403","404","405","406","407","408","409","410","411","412","413","414"],"import React, {ReactNode, useContext} from \"react\";\r\nimport {\r\n    IconButton,\r\n    Avatar,\r\n    Box,\r\n    CloseButton,\r\n    Flex,\r\n    HStack,\r\n    VStack,\r\n    Icon,\r\n    useColorModeValue,\r\n    Link,\r\n    Drawer,\r\n    DrawerContent,\r\n    Text,\r\n    useDisclosure,\r\n    BoxProps,\r\n    FlexProps,\r\n    Menu,\r\n    MenuButton,\r\n    MenuDivider,\r\n    MenuItem,\r\n    MenuList, Button, Center,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n    FiHome,\r\n    FiTrendingUp,\r\n    FiCompass,\r\n    FiStar,\r\n    FiSettings,\r\n    FiMenu,\r\n    FiBell,\r\n    FiChevronDown,\r\n} from \"react-icons/fi\";\r\nimport {IconType} from \"react-icons\";\r\nimport {ReactText} from \"react\";\r\nimport {AddIcon, PlusSquareIcon} from \"@chakra-ui/icons\";\r\nimport {useHistory, Link as RLink, NavLink} from \"react-router-dom\";\r\nimport {useAdmin, useAuth} from \"../../hooks/useAuth\";\r\nimport {FcLibrary, HiOutlineLibrary} from \"react-icons/all\";\r\nimport {AdminContext} from \"../../providers/AdminSettingProvider\";\r\nimport AppService from \"../../service/AppService\";\r\n\r\n\r\nconst LinkItems = [\r\n    //window.location.pathname\r\n    {name: \"Assigned Quiz\", icon: FiHome, href: \"/admin/assigned\"},\r\n    {name: \"Report\", icon: FiTrendingUp, href: \"/admin/report\"},\r\n    {name: \"Library\", icon: HiOutlineLibrary, href: \"/admin/library\"},\r\n    {name: \"Explore\", icon: FiCompass, href: \"/admin/explore\"},\r\n    {name: \"Favourites\", icon: FiStar, href: \"/admin/favourites\"},\r\n    {name: \"Settings\", icon: FiSettings, href: \"/admin/setting\"},\r\n];\r\n\r\nexport default function SidebarWithHeader({children}) {\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const {user} = useAuth();\r\n    const {fullMode} = useAdmin();\r\n    return (\r\n        <>\r\n\r\n            {\r\n                !fullMode && <Box minH=\"100vh\" bg={'gray.100'}>\r\n                    <SidebarContent\r\n                        onClose={() => onClose}\r\n                        display={{base: \"none\", md: \"block\"}}\r\n                    />\r\n                    <Drawer\r\n                        autoFocus={false}\r\n                        isOpen={isOpen}\r\n                        placement=\"left\"\r\n                        onClose={onClose}\r\n                        returnFocusOnClose={false}\r\n                        onOverlayClick={onClose}\r\n                        size=\"full\"\r\n                    >\r\n                        <DrawerContent>\r\n                            <SidebarContent onClose={onClose}/>\r\n                        </DrawerContent>\r\n                    </Drawer>\r\n                    {/* mobilenav */}\r\n                    <MobileNav onOpen={onOpen} avt={user.avt}/>\r\n                    <Box ml={{base: 0, md: 60}} p=\"4\">\r\n                        {children}\r\n                    </Box>\r\n                </Box>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst SidebarContent = ({onClose, ...rest}) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Box\r\n            transition=\"3s ease\"\r\n            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n            borderRight=\"1px\"\r\n            borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n            w={{base: \"full\", md: 60}}\r\n            pos=\"fixed\"\r\n            h=\"full\"\r\n            {...rest}\r\n        >\r\n            <Flex\r\n                h=\"20\"\r\n                alignItems=\"center\"\r\n                mx=\"8\"\r\n                justifyContent=\"space-between\"\r\n            >\r\n                <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\" cursor={'pointer'} onClick={\r\n                    () => history.replace('/')\r\n                }>\r\n                    Logo\r\n                </Text>\r\n                <CloseButton\r\n                    display={{base: \"flex\", md: \"none\"}}\r\n                    onClick={onClose}\r\n                />\r\n            </Flex>\r\n            {LinkItems.map((link, index) => (\r\n                <NavItem link={link.href} key={index} icon={link.icon}>\r\n                    {link.name}\r\n                </NavItem>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\n\r\nconst NavItem = ({icon, children, link, ...rest}) => {\r\n    return (\r\n        <NavLink\r\n            // href={link}\r\n            activeStyle={{\r\n                color: 'blueviolet',\r\n                fontWeight: 'bold',\r\n                textDecoration: 'underline'\r\n            }}\r\n            activeClassName=\"navUl__active\"\r\n            to={link}\r\n            style={{textDecoration: \"none\"}}>\r\n            <Flex\r\n                // bg={window.location.pathname===link?'teal':'white'}\r\n                align=\"center\"\r\n                p=\"4\"\r\n                mx=\"4\"\r\n                borderRadius=\"lg\"\r\n                role=\"group\"\r\n                cursor=\"pointer\"\r\n                _hover={{\r\n                    bg: \"cyan.400\",\r\n                    color: \"white\",\r\n                }}\r\n                {...rest}\r\n            >\r\n                {icon && (\r\n                    <Icon\r\n                        mr=\"4\"\r\n                        fontSize=\"16\"\r\n                        _groupHover={{\r\n                            color: \"white\",\r\n                        }}\r\n                        as={icon}\r\n                    />\r\n                )}\r\n                {children}\r\n            </Flex>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\n\r\nconst MobileNav = ({onOpen, avt, ...rest}) => {\r\n    const history = useHistory();\r\n    const {logout, user} = useAuth();\r\n    return (\r\n        <Flex\r\n            ml={{base: 0, md: 60}}\r\n            px={{base: 4, md: 4}}\r\n            height=\"20\"\r\n            alignItems=\"center\"\r\n            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n            borderBottomWidth=\"1px\"\r\n            borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\r\n            justifyContent={{base: \"space-between\", md: \"flex-end\"}}\r\n            {...rest}\r\n        >\r\n            <IconButton\r\n                display={{base: \"flex\", md: \"none\"}}\r\n                onClick={onOpen}\r\n                variant=\"outline\"\r\n                aria-label=\"open menu\"\r\n                icon={<FiMenu/>}\r\n            />\r\n\r\n            <Text\r\n                display={{base: \"flex\", md: \"none\"}}\r\n                fontSize=\"2xl\"\r\n                fontFamily=\"monospace\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                Logo\r\n            </Text>\r\n\r\n            <HStack spacing={{base: \"0\", md: \"6\"}}>\r\n\r\n                <Button\r\n                    onClick={() => {\r\n                        history.push(\"/admin/quiz/new\")\r\n                    }}\r\n                    colorScheme={'teal'} leftIcon={<AddIcon/>}>\r\n                    Create Quiz\r\n                </Button>\r\n                <IconButton\r\n                    size=\"lg\"\r\n                    variant=\"ghost\"\r\n                    aria-label=\"open menu\"\r\n                    icon={<FiBell/>}\r\n                />\r\n                <Flex alignItems={\"center\"}>\r\n                    <Menu>\r\n                        <MenuButton\r\n                            py={2}\r\n                            transition=\"all 0.3s\"\r\n                            _focus={{boxShadow: \"none\"}}\r\n                        >\r\n                            <HStack>\r\n\r\n                                <Avatar\r\n                                    size={\"sm\"}\r\n                                    src={\r\n                                        AppService.getImage(user.avt) || \"https://images.unsplash.com/photo-1619946794135-5bc917a27793?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=b616b2c5b373a80ffc9636ba24f7a4a9\"\r\n                                    }\r\n                                />\r\n                                <VStack\r\n                                    display={{base: \"none\", md: \"flex\"}}\r\n                                    alignItems=\"flex-start\"\r\n                                    spacing=\"1px\"\r\n                                    ml=\"2\"\r\n                                >\r\n                                    {/*USERNAME*/}\r\n                                    <Text fontSize=\"sm\">{user.username}</Text>\r\n                                    {/*ROLE*/}\r\n                                    <Text fontSize=\"xs\" color=\"gray.600\">\r\n                                        {/*{user.roles[0].name === \"ROLE_ADMIN\" ? \"Teacher\" : \"Student\"}*/}\r\n                                        Student\r\n                                    </Text>\r\n                                </VStack>\r\n                                <Box display={{base: \"none\", md: \"flex\"}}>\r\n                                    <FiChevronDown/>\r\n                                </Box>\r\n                            </HStack>\r\n                        </MenuButton>\r\n                        <MenuList\r\n                            bg={useColorModeValue(\"white\", \"gray.900\")}\r\n                            borderColor={useColorModeValue(\r\n                                \"gray.200\",\r\n                                \"gray.700\"\r\n                            )}\r\n                        >\r\n                            <MenuItem>Profile</MenuItem>\r\n                            <MenuItem>Settings</MenuItem>\r\n                            <MenuItem>Billing</MenuItem>\r\n                            <MenuDivider/>\r\n                            <MenuItem onClick={() => {\r\n                                logout();\r\n                                history.replace('/login')\r\n                            }}>Sign out</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </Flex>\r\n            </HStack>\r\n        </Flex>\r\n    );\r\n};\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\QuizEditor.js",["415","416","417","418"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizEditProvider.js",["419"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\NewQuestionDialog.js",["420","421","422"],"import React, {useContext, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\n\r\nconst NewQuestionDialog = ({visible, setVisible, size, setSize}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState({title: '', options: [{}, {}]});\r\n    const [options, setOptions] = useState([{}, {}]);\r\n\r\n    const onTitleChange = (e) => {\r\n        setQuestion((prev) => ({\r\n            ...prev,\r\n            title: e.target.value,\r\n            id: Date.now()\r\n        }))\r\n    }\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === question.options.length - 1 && e.target.value.length > 0) {\r\n            setQuestion((prev) => ({\r\n                ...prev,\r\n                options: [...prev.options, {}]\r\n            }))\r\n        }\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((option, i) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...option,\r\n                        content: e.target.value,\r\n                        id: Date.now()\r\n                    }\r\n                }\r\n                return option;\r\n            })\r\n        }))\r\n    }\r\n    const onSaveOption = async () => {\r\n        //check question have title\r\n        if (!question || !question.title || question.title.length === 0) {\r\n            return toast({\r\n                title: `Your question does not have title!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        //check question have question\r\n        if (!question.options[0] || !question.options[0].content || !question.options[0].content.length === 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 or 2 options!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n\r\n        let score = 0;\r\n        for (const option of question.options) {\r\n            if (option && option.score) {\r\n                score += option.score;\r\n            }\r\n        }\r\n        if (score === 0) {\r\n            return toast({\r\n                title: `Your question must have at least 1 true option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n\r\n        let modifiedQuestion = {\r\n            ...question,\r\n            options: question.options.filter((option) => option.content && option.content.length > 0)\r\n        };\r\n        // //add question to quiz\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            questions: [...prev.questions, modifiedQuestion]\r\n        }))\r\n        setQuestion({\r\n            title: '',\r\n            options: [{}, {}]\r\n        });\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setQuestion({\r\n                    title: '',\r\n                    options: [{}, {}]\r\n                })\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text> New Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n                            {/*QUESTION TITLE INPUT*/}\r\n                            <Textarea\r\n                                // onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                onChange={onTitleChange}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                question.options.map((option, index) => {\r\n                                    let handleScoreChange = (e) => {\r\n                                        setQuestion((prev) => (\r\n                                            {\r\n                                                ...prev,\r\n                                                options: prev.options\r\n                                                    .map((option, i) =>\r\n                                                        i === index ? {\r\n                                                            ...option,\r\n                                                            score: parseFloat(e.target.value)\r\n                                                        } : option)\r\n                                            }\r\n                                        ))\r\n                                    };\r\n                                    return (\r\n                                        <HStack key={index} w={'100%'}>\r\n                                            <Select\r\n                                                onChange={handleScoreChange}\r\n                                                bg={'gray.200'}\r\n                                                // defaultValue={0}\r\n                                                placeholder='score'\r\n                                                maxW={'100px'}>\r\n                                                {\r\n                                                    [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                        <option key={i} value={item}>{item}</option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                            <Input\r\n                                                borderWidth={(option.score && option.score > 0) ? 1.5 : 1}\r\n                                                borderColor={option.score && option.score > 0 && 'green'}\r\n                                                color={option.score && option.score > 0 && 'green'}\r\n                                                focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                                colorScheme={'blue'}\r\n                                                onChange={(e) => onOptionChange(e, index)}\r\n                                                key={index}\r\n                                                placeholder={\"option\"}/>\r\n                                        </HStack>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setQuestion({\r\n                                title: '',\r\n                                options: [{}, {}]\r\n                            })\r\n                        }}>Close</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Add</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewQuestionDialog;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\QuizEditDialog.js",["423","424","425"],"import React, {useContext, useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Button,\r\n    FormControl, FormLabel, Input,\r\n    Modal,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, Select\r\n} from \"@chakra-ui/react\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport SubjectService from \"../../../../service/SubjectService\";\r\n\r\nconst QuizEditDialog = ({isOpen, setOpen}) => {\r\n\r\n    const {quiz, setQuiz, isLoading, setLoading, handleSaveQuiz} = useContext(QuizEditContext);\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [organizations, setOrganizations] = useState([]);\r\n    const initialRef = useRef();\r\n    const finalRef = useRef();\r\n    useEffect(() => {\r\n        getSubject();\r\n    }, [])\r\n\r\n    const getSubject = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const resp = await SubjectService.getSubjects();\r\n            setSubjects(resp.data);\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const changeSubject = (e) => {\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            subject: {\r\n                title: (e.target.value)\r\n            }\r\n        }))\r\n    }\r\n    const onSaveChange = async (e) => {\r\n        e.preventDefault();\r\n        console.log(quiz.subject.id)\r\n        await handleSaveQuiz();\r\n        setOpen(false);\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                initialFocusRef={initialRef}\r\n                finalFocusRef={finalRef}\r\n                isOpen={isOpen}\r\n                onClose={() => setOpen(false)}\r\n            >\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>Edit Quiz</ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <ModalBody pb={6}>\r\n                        <FormControl>\r\n                            <FormLabel>Quiz title</FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    const value = e.target.value;\r\n                                    setQuiz((prev) => ({\r\n                                            ...prev, title: value\r\n                                        }\r\n                                    ))\r\n                                }}\r\n                                value={quiz.title}\r\n                                ref={initialRef} placeholder=\"Quiz title\"/>\r\n                        </FormControl>\r\n\r\n\r\n                        <FormControl mt={4}>\r\n                            <FormLabel>Subject</FormLabel>\r\n                            <Select\r\n                                onChange={(e) => {\r\n                                    changeSubject(e);\r\n                                }}\r\n                                value={quiz.subject.title}\r\n                                defaultValue={quiz.subject.title}\r\n                                size={'sm'}>\r\n                                {!isLoading && subjects && subjects.map(item => (\r\n                                    <option key={item.id} value={item.title}>{item.title}</option>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button\r\n                            onClick={(e) => onSaveChange(e)}\r\n                            colorScheme=\"blue\" mr={3}>\r\n                            Save\r\n                        </Button>\r\n                        <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuizEditDialog;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\quiz_edit\\components\\EditQuestionDialog.js",["426","427","428","429","430"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack, IconButton,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen, CgRemove} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst EditQuestionDialog = ({visible, setVisible, size, setSize, selectedQuestion}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState({title: '', options: [{}, {}]});\r\n    const [options, setOptions] = useState([{}, {}]);\r\n    const [removeOptionIds, setRemoveOptionIds] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setQuestion(selectedQuestion);\r\n    }, [])\r\n    const onTitleChange = (e) => {\r\n        setQuestion((prev) => ({\r\n            ...prev,\r\n            title: e.target.value,\r\n        }))\r\n    }\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === question.options.length - 1 && e.target.value.length > 0) {\r\n            setQuestion((prev) => ({\r\n                ...prev,\r\n                options: [...prev.options, {id: Date.now()}]\r\n            }))\r\n        }\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((option, i) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...option,\r\n                        content: e.target.value,\r\n                        id: option.id ? option.id : Date.now()\r\n                    }\r\n                }\r\n                return option;\r\n            })\r\n        }))\r\n    }\r\n    const onSaveOption = async () => {\r\n        //check question have title\r\n        if (!question || !question.title || question.title.length === 0) {\r\n            return toast({\r\n                title: `Your question does not have title!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        //check question have question\r\n        if (!question.options[0] || !question.options[0].content || !question.options[0].content.length === 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 or 2 options!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n\r\n        let score = 0;\r\n        for (const option of question.options) {\r\n            if (option && option.score) {\r\n                score += option.score;\r\n            }\r\n        }\r\n        if (score === 0) {\r\n            return toast({\r\n                title: `Your question must have at least 1 true option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        let modifiedQuestion = {\r\n            ...question,\r\n            options: question.options.filter((option) => option.content && option.content.length > 0)\r\n        };\r\n        console.log(\"DELETE OPTION ID \" + removeOptionIds);\r\n        try {\r\n            for (const removeOptionId of removeOptionIds) {\r\n                const resp = await axios.delete(`http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/questions/options/${removeOptionId}`, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\r\n                    }\r\n                })\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            questions: prev.questions\r\n                .map(item => item.id === selectedQuestion.id ? modifiedQuestion : item)\r\n        }))\r\n\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setQuestion({\r\n                    title: '',\r\n                    options: [{}, {}]\r\n                })\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text>Edit Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n                            {/*QUESTION TITLE INPUT*/}\r\n                            <Textarea\r\n                                value={question && question.title}\r\n                                // onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                onChange={onTitleChange}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                question.options.map((option, index) => {\r\n                                    let handleScoreChange = (e) => {\r\n                                        setQuestion((prev) => (\r\n                                            {\r\n                                                ...prev,\r\n                                                options: prev.options\r\n                                                    .map((option, i) =>\r\n                                                        i === index ? {\r\n                                                            ...option,\r\n                                                            score: parseFloat(e.target.value)\r\n                                                        } : option)\r\n                                            }\r\n                                        ))\r\n                                    };\r\n                                    const handleRemoveOption = async () => {\r\n                                        if (option.id) {\r\n                                            setRemoveOptionIds((prev) => [...prev, option.id]);\r\n                                        }\r\n                                        setQuestion((prev) => ({\r\n                                            ...prev,\r\n                                            options: prev.options.filter((item, i) => i !== index)\r\n                                        }))\r\n                                    }\r\n                                    return (\r\n                                        <HStack key={index} w={'100%'}>\r\n                                            <Select\r\n                                                value={option.score ? option.score : 0}\r\n                                                onChange={handleScoreChange}\r\n                                                bg={'gray.200'}\r\n                                                // defaultValue={0}\r\n                                                placeholder='score'\r\n                                                maxW={'100px'}>\r\n                                                {\r\n                                                    [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                        <option key={i} value={item}>{item}</option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                            <Input\r\n                                                value={option.content && option.content}\r\n                                                borderWidth={(option.score && option.score > 0) ? 1.5 : 1}\r\n                                                borderColor={option.score && option.score > 0 && 'green'}\r\n                                                color={option.score && option.score > 0 && 'green'}\r\n                                                focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                                colorScheme={'blue'}\r\n                                                onChange={(e) => onOptionChange(e, index)}\r\n                                                key={index}\r\n                                                placeholder={\"option\"}/>\r\n                                            <IconButton\r\n                                                onClick={handleRemoveOption}\r\n                                                aria-label={'remove'} icon={<CgRemove/>}/>\r\n                                        </HStack>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setQuestion({\r\n                                title: '',\r\n                                options: [{}, {}]\r\n                            })\r\n                        }}>Cancel</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save as Coppy</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportPage.js",["431","432","433","434","435","436","437","438"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box, Flex,\r\n    Heading,\r\n    HStack, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Select, Spacer,\r\n    Stack,\r\n    Table,\r\n    TableCaption,\r\n    Tbody,\r\n    Td,\r\n    Text,\r\n    Tfoot,\r\n    Th,\r\n    Thead,\r\n    Tr, VStack\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {AiOutlineUser, BiDotsHorizontalRounded} from \"react-icons/all\";\r\nimport {ChevronDownIcon} from \"@chakra-ui/icons\";\r\n\r\nconst ReportPage = () => {\r\n    const [reportData, setData] = useState(null);\r\n    const history = useHistory();\r\n    useEffect(async () => {\r\n        const url = 'http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/report';\r\n        try {\r\n            const resp = await axios.get(url, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                }\r\n            })\r\n            console.log(resp.data);\r\n            setData(resp.data);\r\n        } catch (e) {\r\n            console.log('Failed to get report data ', e)\r\n        }\r\n    }, []);\r\n    return (\r\n        <Box w={'100%'}>\r\n            <VStack w={'100%'}>\r\n\r\n                <Box w={'100%'} mb={10}>\r\n                    <Flex w={'100%'}>\r\n                        <Select bg={'white'} placeholder=\"Select option\">\r\n                            <option value=\"option1\">Option 1</option>\r\n                            <option value=\"option2\">Option 2</option>\r\n                            <option value=\"option3\">Option 3</option>\r\n                        </Select>\r\n                        <Box mx={100}/>\r\n                        <Select bg={'white'} maxW={200} placeholder=\"Select option\">\r\n                            <option value=\"option1\">Option 1</option>\r\n                            <option value=\"option2\">Option 2</option>\r\n                            <option value=\"option3\">Option 3</option>\r\n                        </Select>\r\n                        <Box mx={5}/>\r\n                        <Select bg={'white'} maxW={200} placeholder=\"Select option\">\r\n                            <option value=\"option1\">Option 1</option>\r\n                            <option value=\"option2\">Option 2</option>\r\n                            <option value=\"option3\">Option 3</option>\r\n                        </Select>\r\n                    </Flex>\r\n                </Box>\r\n\r\n                <Table boxShadow={'md'} variant=\"simple\" colorScheme=\"blue\" bg={'white'} p={4}>\r\n                    <TableCaption>Quiz Reporting</TableCaption>\r\n                    <Thead color={'blue'}>\r\n                        <Tr color={'blue'}>\r\n                            <Th py={5} color={'teal'} fontSize={14}>Quiz name</Th>\r\n                            <Th color={'teal'} fontSize={14}>\r\n                                Total participants\r\n                            </Th>\r\n                            <Th color={'teal'} fontSize={14} isNumeric>Avg score</Th>\r\n                            <Th/>\r\n                        </Tr>\r\n                    </Thead>\r\n                    <Tbody>\r\n                        {\r\n                            reportData && reportData.map((item) => {\r\n                                const avgScore = () => {\r\n                                    let rs = 0;\r\n                                    item.participants.forEach((u) => u.score ? rs += u.score : 0);\r\n                                    return rs > 0 ? rs / (item.participants.length) : 0;\r\n                                }\r\n                                return <Tr\r\n                                    key={item.title}>\r\n                                    <Td\r\n                                        cursor={'pointer'}\r\n                                        onClick={() => {\r\n                                            item.id &&\r\n                                            history.push(`/admin/report/${item.quizId}/details`)\r\n                                        }}>{item.title}</Td>\r\n                                    <Td>{item.participants.length}</Td>\r\n                                    <Td isNumeric>{avgScore()}</Td>\r\n                                    <Td onClick={() => {\r\n                                    }}>\r\n                                        <Menu>\r\n                                            <MenuButton\r\n                                                border={'none'}\r\n                                                px={4}\r\n                                                py={2}\r\n                                                transition=\"all 0.2s\"\r\n                                                borderRadius=\"md\"\r\n                                                borderWidth=\"1px\"\r\n                                                _hover={{bg: \"gray.400\"}}\r\n                                                _expanded={{bg: \"blue.400\"}}\r\n                                                _focus={{boxShadow: \"outline\"}}\r\n                                            >\r\n                                                <BiDotsHorizontalRounded/>\r\n                                            </MenuButton>\r\n                                            <MenuList>\r\n                                                <MenuItem>New File</MenuItem>\r\n                                                <MenuItem>New Window</MenuItem>\r\n                                                <MenuDivider/>\r\n                                                <MenuItem>Open...</MenuItem>\r\n                                                <MenuItem>Save File</MenuItem>\r\n                                            </MenuList>\r\n                                        </Menu>\r\n                                    </Td>\r\n                                </Tr>\r\n                            })\r\n                        }\r\n\r\n                    </Tbody>\r\n                    <Tfoot>\r\n                        <Tr>\r\n                            <Th>To convert</Th>\r\n                            <Th>into</Th>\r\n                            <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot>\r\n                </Table>\r\n\r\n            </VStack>\r\n        </Box>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default ReportPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\create_quiz\\CreateNewQuizPage.js",["439","440","441","442","443","444","445","446","447","448","449","450","451","452"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    ButtonGroup,\r\n    FormControl,\r\n    FormHelperText,\r\n    FormLabel,\r\n    HStack,\r\n    Input,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    Text,\r\n    useRadio,\r\n    useRadioGroup,\r\n    VStack,\r\n    Wrap,\r\n    Center,\r\n    WrapItem,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport {MdArrowDropDown} from \"react-icons/all\";\r\nimport axios from \"axios\";\r\nimport {useCreateQuiz} from \"../../../context/CreateQuizProvider\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport SubjectService from \"../../../service/SubjectService\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst CreateNewQuizPage = () => {\r\n\r\n    const {setQuiz} = useContext(QuizEditContext);\r\n    const [savedSubjects, setSubjects] = useState([]);\r\n\r\n    const [quizName, setQuizName] = useState(\"\");\r\n    const [selectedSubject, setSelectedSubject] = useState(\"\");\r\n\r\n    const [quizNameError, setQuizNameError] = useState(null);\r\n    const [subjectError, setSubjectError] = useState(null);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const history = useHistory();\r\n    const {createdQuiz, setCreatedQuiz} = useCreateQuiz();\r\n\r\n    /*\r\n    handle create quiz\r\n    */\r\n    const onNextButtonClicked = async () => {\r\n        if (quizName == null || quizName.length === 0) {\r\n            setQuizNameError(\"Please enter a quiz name\");\r\n            return;\r\n        }\r\n        if (selectedSubject == null || !selectedSubject.title) {\r\n            setSubjectError(\"Please select a selectedSubject\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const resp = await QuizService.saveQuiz({\r\n                title: quizName,\r\n                subject: {\r\n                    id: selectedSubject.id || null,\r\n                    title: selectedSubject.title\r\n                },\r\n            });\r\n            const data = resp.data;\r\n            console.log(data);\r\n            setQuiz(data)\r\n            history.replace(`/admin/quiz/${data.id}/edit`);\r\n        } catch (e) {\r\n            console.log('Failed to create quiz ', e);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        //\r\n        if (createdQuiz != null) {\r\n            setQuizName(createdQuiz.title == null ? \"\" : createdQuiz.title);\r\n            setSelectedSubject(\r\n                createdQuiz.subject == null ? \"\" : createdQuiz.subject\r\n            );\r\n        }\r\n        getSubjects().then((r) => setSubjects(r));\r\n    }, []);\r\n\r\n    const getSubjects = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await SubjectService.getSubjects();\r\n            console.log(data.data);\r\n            return data.data;\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {/* Overlay */}\r\n            <Box\r\n                zIndex={101}\r\n                position={\"fixed\"}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                zIndex=\"100\"\r\n                minH=\"100vh\"\r\n                minW=\"100vw\"\r\n                position=\"fixed\"\r\n                bg=\"gray.200\"\r\n            />\r\n\r\n            {isLoading && (\r\n                <Spinner\r\n                    top=\"50%\"\r\n                    right=\"50%\"\r\n                    position=\"fixed\"\r\n                    zIndex=\"1000\"\r\n                    color=\"red.500\"\r\n                    transform={\"translate(50%,-50%)\"}\r\n                />\r\n            )}\r\n            <Box\r\n                bg={\"gray.100\"}\r\n                // bg={'teal.500'}\r\n                zIndex={101}\r\n                position={\"fixed\"}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                boxShadow={\"xl\"}\r\n                align={\"start\"}\r\n                borderRadius={\"xl\"}\r\n\r\n            >\r\n                <VStack\r\n                    align={\"start\"}\r\n                    p={4}\r\n                    width={\"500px\"}\r\n                    maxW={[\"360px\", \"500px\"]}\r\n                >\r\n                    <HStack align={\"start\"}>\r\n                        <Text fontSize={\"20px\"} fontWeight={\"medium\"}>\r\n                            Create a Quiz\r\n                        </Text>\r\n                    </HStack>\r\n                    <VStack color={\"gray.600\"} align={\"start\"} w={\"100%\"}>\r\n                        <FormControl>\r\n                            <FormLabel fontWeight={\"normal\"}>\r\n                                1. Name this quiz\r\n                            </FormLabel>\r\n                            {/*1. quiz name*/}\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setQuizName(e.target.value);\r\n                                    setQuizNameError(null);\r\n                                }}\r\n                                value={quizName}\r\n                                isInvalid={quizNameError != null}\r\n                                borderColor={\"grey.600\"}\r\n                                width={\"100%\"}\r\n                                variant=\"outline\"\r\n                            />\r\n                            {quizNameError && (\r\n                                <FormHelperText color={\"crimson\"}>\r\n                                    {quizNameError}\r\n                                </FormHelperText>\r\n                            )}\r\n                        </FormControl>\r\n                        {/*2. CHOICE A SUBJECT*/}\r\n                        <VStack w={\"100%\"} align={\"start\"}>\r\n                            <FormLabel fontWeight={\"normal\"}>\r\n                                2. Choose revelant subjects\r\n                            </FormLabel>\r\n                            <Wrap spacing={2}>\r\n                                {!isLoading && savedSubjects.map((item, i) => (\r\n                                    <WrapItem key={i}>\r\n                                        <Button\r\n                                            value={item.title}\r\n                                            onClick={(e) => {\r\n                                                setSelectedSubject(prev => ({\r\n                                                    ...prev,\r\n                                                    title: item.title\r\n                                                }));\r\n                                                setSubjectError(\"\");\r\n                                            }}\r\n                                            bg={\r\n                                                item.title === selectedSubject.title\r\n                                                    ? \"teal\"\r\n                                                    : \"white\"\r\n                                            }\r\n                                            color={\r\n                                                item.title === selectedSubject.title\r\n                                                    ? \"white\"\r\n                                                    : \"gray\"\r\n                                            }\r\n                                            colorScheme={\"gray\"}\r\n                                            role={\"checkbox\"}\r\n                                            // defaultChecked={true}\r\n                                            size={\"xs\"}\r\n                                            variant={\"outline\"}\r\n                                            maxH={\"60\"}\r\n                                            maxW={\"60\"}\r\n                                        >\r\n                                            {item.title}\r\n                                        </Button>\r\n                                    </WrapItem>\r\n                                ))}\r\n                            </Wrap>\r\n                        </VStack>\r\n\r\n                        <Text color=\"red\" fontStyle=\"italic\">\r\n                            {subjectError}\r\n                        </Text>\r\n                        <HStack pt={5} w={\"100%\"} justify={\"end\"}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    history.goBack()\r\n                                }}\r\n                                colorScheme=\"gray\"\r\n                                fontWeight={\"normal\"}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                colorScheme=\"teal\"\r\n                                fontWeight={\"normal\"}\r\n                                onClick={onNextButtonClicked}\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CreateNewQuizPage;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\report\\ReportDetailPage.js",["453","454","455","456","457","458","459","460","461","462","463","464"],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Flex,\r\n    Heading,\r\n    HStack,\r\n    Tab, TableCaption,\r\n    TabList,\r\n    TabPanel,\r\n    TabPanels,\r\n    Table,\r\n    Tbody,\r\n    Tfoot,\r\n    Tabs, Tag, TagLabel, TagLeftIcon, Td,\r\n    Text, Th, Thead, Tr,\r\n    VStack, Icon, Tooltip, Container\r\n} from \"@chakra-ui/react\";\r\nimport {CloseIcon} from \"@chakra-ui/icons\";\r\nimport {AiOutlineCheck, BsCheck, FiCheck, IoIosClose, RiCloseLine} from \"react-icons/all\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst ReportDetailPage = () => {\r\n\r\n    //get quiz id\r\n    const {id} = useParams();\r\n    const [data, setData] = useState();\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            console.log('fetch data')\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/${id}/report`;\r\n            const resp = await axios.get(url, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                }\r\n            })\r\n            if (resp.status === 200) {\r\n                console.log(resp.data);\r\n                setData(resp.data);\r\n            }\r\n        } catch (e) {\r\n            console.log('Failed to fetch data', e)\r\n        }\r\n        console.log(id);\r\n    }, []);\r\n    return (\r\n        <Box w={'100%'} bg={'gray.100'}>\r\n            <VStack w={'100%'}>\r\n\r\n                <Box p={5} bg={'white'} w={'100%'}>\r\n                    <HStack w={'100%'} justifyContent={'space-between'}>\r\n                        <VStack align={'start'}>\r\n                            <Text>Quiz title</Text>\r\n                            <Text>Quiz title</Text>\r\n                            <HStack spacing={2}>\r\n                                <Button size={'sm'}>edit</Button>\r\n                                <Button size={'sm'}>edit</Button>\r\n                                <Button size={'sm'}>edit</Button>\r\n                            </HStack>\r\n                        </VStack>\r\n                        <HStack spacing={2}>\r\n                            {/*<Box border={'lg'} maxW={100} maxH={100} borderRadius={'lg'} centerContent>*/}\r\n                            {/*    <Box padding=\"4\" bg=\"gray.100\" maxW=\"xl\">*/}\r\n                            {/*    </Box>*/}\r\n                            {/*</Box>*/}\r\n                        </HStack>\r\n                    </HStack>\r\n\r\n                </Box>\r\n                <Tabs w={'100%'} minH={'100vh'} size={'lg'} variant={\"enclosed\"} colorScheme={'blue'}>\r\n                    <TabList bg={'gray.200'}>\r\n                        <Tab>Participants</Tab>\r\n                        <Tab>Overview</Tab>\r\n                        <Tab>Three</Tab>\r\n                    </TabList>\r\n\r\n                    <TabPanels mt={5} w={'100%'}>\r\n                        <TabPanel p={0} w={'100%'}>\r\n                            {\r\n                                data && data.map((item, i) => (\r\n                                    <Flex px={5} py={2} bg={'white'} key={i} mb={3} w={'100%'}\r\n                                          justifyContent={'space-between'} alignItems={'center'}>\r\n                                        <Text fontWeight={'medium'}>{item.userInfo.username}</Text>\r\n                                        <Text>50%</Text>\r\n                                        <HStack spacing={0}>\r\n                                            <Tag m={0} borderRadius={'0'} size={'sm'} variant={'solid'}\r\n                                                 colorScheme={'green'}>\r\n                                                {/*<TagLeftIcon size={'sm'} as={BsCheck}/>*/}\r\n                                                <TagLabel>3</TagLabel>\r\n                                            </Tag>\r\n                                            <Tag m={0} size={'sm'} borderRadius={'none'} variant={'solid'}\r\n                                                 colorScheme={'red'}>\r\n                                                {/*<TagLeftIcon size={'sm'} as={CloseIcon}/>*/}\r\n                                                <TagLabel>3</TagLabel>\r\n                                            </Tag>\r\n                                        </HStack>\r\n                                        <VStack>\r\n                                            <Text>22% </Text>\r\n                                            <Text>Accuray</Text>\r\n                                        </VStack>\r\n                                        <VStack>\r\n                                            <Text>22% </Text>\r\n                                            <Text>Accuray</Text>\r\n                                        </VStack>\r\n                                    </Flex>\r\n                                ))\r\n                            }\r\n\r\n                        </TabPanel>\r\n                        <TabPanel m={0} p={0}>\r\n                            <Box>\r\n                                <Table colorScheme={'facebook'} variant=\"simple\" bg={'white'}>\r\n                                    <TableCaption>Imperial to metric conversion factors</TableCaption>\r\n                                    <Thead>\r\n                                        <Tr>\r\n                                            <Th>Participant names</Th>\r\n                                            <Th>Score</Th>\r\n                                            {/**/}\r\n                                            <Th maxW={5}>Q1</Th>\r\n                                            <Th maxW={5}>Q1</Th>\r\n                                            <Th maxW={5}>Q1</Th>\r\n                                            {/*<Th isNumeric>multiply by</Th>*/}\r\n                                        </Tr>\r\n                                    </Thead>\r\n                                    <Tbody>\r\n                                        {\r\n                                            [1, 1, 1, 1, 1, 1, 1, 1,].map((item, i) => (\r\n                                                <Tr key={i}>\r\n                                                    <Td>Nguyen Khanh Duy</Td>\r\n                                                    <Td>millimetres (mm)</Td>\r\n                                                    {/**/}\r\n                                                    <Td\r\n                                                        onMouseEnter={() => {\r\n                                                            console.log('mouse enter')\r\n                                                        }}\r\n                                                        onMouseLeave={() => {\r\n                                                            console.log('mouse leave')\r\n                                                        }}\r\n                                                        maxW={5} bg={'red.500'}>\r\n                                                        <RiCloseLine/>\r\n                                                    </Td>\r\n                                                    <Td maxW={5} bg={'green.500'}><FiCheck/></Td>\r\n                                                    <Td maxW={5} bg={'green.500'}><FiCheck/></Td>\r\n                                                    {/*<Td isNumeric>25.4</Td>*/}\r\n                                                </Tr>\r\n                                            ))\r\n                                        }\r\n                                    </Tbody>\r\n                                    {/*<Tfoot>*/}\r\n                                    {/*    <Tr>*/}\r\n                                    {/*        <Th>To convert</Th>*/}\r\n                                    {/*        <Th>into</Th>*/}\r\n                                    {/*        <Th isNumeric>multiply by</Th>*/}\r\n                                    {/*    </Tr>*/}\r\n                                    {/*</Tfoot>*/}\r\n                                </Table>\r\n                            </Box>\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <p>three!</p>\r\n                        </TabPanel>\r\n                    </TabPanels>\r\n                </Tabs>\r\n\r\n            </VStack>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ReportDetailPage;","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\ShareDialog.js",["465","466","467"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    CloseButton,\r\n    Divider,\r\n    HStack,\r\n    IconButton,\r\n    Input,\r\n    Spacer,\r\n    Tag,\r\n    TagCloseButton,\r\n    TagLabel,\r\n    Text,\r\n    useToast,\r\n    VStack,\r\n    Wrap,\r\n    WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport { AiOutlineUsergroupAdd, MdPublic } from \"react-icons/all\";\r\nimport { CopyIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ShareDialog = ({ setVisible, quizId }) => {\r\n    const [emails, setEmails] = useState([]);\r\n    const [email, setEmail] = useState(\"\");\r\n    const toast = useToast();\r\n    useEffect(() => {\r\n        console.log(quizId);\r\n    }, []);\r\n    const onSubmit = async () => {\r\n        console.log(startDate);\r\n        console.log(finishDate);\r\n        try {\r\n            const data = {\r\n                quizId: quizId,\r\n                emails: emails,\r\n                startDate: startDate,\r\n                finishDate: finishDate,\r\n            };\r\n            let url =\r\n                \"http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes\";\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${localStorage.getItem(\r\n                        \"accessToken\"\r\n                    )}`,\r\n                },\r\n            });\r\n            if (resp.status === 200) {\r\n                toast({\r\n                    position: \"bottom-left\",\r\n                    duration: 2000,\r\n                    status: \"success\",\r\n                    render: () => (\r\n                        <Box color=\"white\" p={3} bg=\"blue.500\">\r\n                            Share via emails success!\r\n                        </Box>\r\n                    ),\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Failed to assign quiz to student \", e);\r\n        } finally {\r\n            setVisible(false);\r\n        }\r\n    };\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [finishDate, setFinishDate] = useState(new Date());\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                bg={\"gray.400\"}\r\n                opacity={0.8}\r\n                position={\"fixed\"}\r\n                top={0}\r\n                minH={\"100vh\"}\r\n                right={0}\r\n                onClick={() => setVisible(false)}\r\n                minW={\"100vw\"}\r\n                zIndex={900}\r\n            />\r\n            <Box\r\n                p={5}\r\n                w={500}\r\n                bg={\"white\"}\r\n                borderRadius={\"md\"}\r\n                boxShadow={\"md\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                position={\"fixed\"}\r\n                top={\"40%\"}\r\n                right={\"50%\"}\r\n                height={\"auto\"}\r\n                zIndex={901}\r\n            >\r\n                <VStack spacing={5} w={\"100%\"}>\r\n                    {/*TITLE*/}\r\n                    <HStack w={\"100%\"}>\r\n                        <AiOutlineUsergroupAdd size={\"20\"} />\r\n                        <Text fontSize={\"xl\"} fontWeight={\"medium\"}>\r\n                            Invite\r\n                        </Text>\r\n                        <Spacer />\r\n                        <CloseButton\r\n                            borderRadius={\"100px\"}\r\n                            bg={\"teal\"}\r\n                            color={\"white\"}\r\n                            onClick={() => setVisible(false)}\r\n                            size={\"md\"}\r\n                        />\r\n                    </HStack>\r\n                    {/*DATE*/}\r\n                    <HStack w={\"100%\"} spacing={2}>\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={(date) => setStartDate(date)}\r\n                            timeInputLabel=\"Time:\"\r\n                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                            showTimeInput\r\n                        />\r\n                        <DatePicker\r\n                            selected={finishDate}\r\n                            onChange={(date) => setFinishDate(date)}\r\n                            timeInputLabel=\"Time:\"\r\n                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                            showTimeInput\r\n                        />\r\n                    </HStack>\r\n                    <VStack w={\"100%\"} align={\"start\"}>\r\n                        <Text fontWeight={\"medium\"} color={\"gray.600\"}>\r\n                            Share public link\r\n                        </Text>\r\n                        <HStack w={\"100%\"}>\r\n                            <Input size={\"sm\"} />\r\n                            <IconButton icon={<CopyIcon size={30} />} />\r\n                        </HStack>\r\n                    </VStack>\r\n                    <Divider />\r\n                    {/*SHARE WITH EMAILS*/}\r\n                    <VStack w={\"100%\"} align={\"start\"}>\r\n                        <Text fontWeight={\"medium\"} color={\"gray.600\"}>\r\n                            Share using emails\r\n                        </Text>\r\n                        {/*EMAIL*/}\r\n                        <Wrap w={\"100%\"}>\r\n                            {emails.map((email) => (\r\n                                <WrapItem key={email}>\r\n                                    <Tag\r\n                                        size={\"sm\"}\r\n                                        borderRadius=\"full\"\r\n                                        variant=\"solid\"\r\n                                        colorScheme=\"green\"\r\n                                    >\r\n                                        <TagLabel>{email}</TagLabel>\r\n                                        <TagCloseButton\r\n                                            onClick={() => {\r\n                                                let filteredEmail =\r\n                                                    emails.filter(\r\n                                                        (e) => e != email\r\n                                                    );\r\n                                                setEmails(filteredEmail);\r\n                                            }}\r\n                                        />\r\n                                    </Tag>\r\n                                </WrapItem>\r\n                            ))}\r\n                        </Wrap>\r\n                        {/*INPUT & ADD BUTTOn*/}\r\n                        <HStack w={\"100%\"}>\r\n                            <Input\r\n                                size={\"sm\"}\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                placeholder={\r\n                                    \"Email to share. Ex: test@gmail.com\"\r\n                                }\r\n                            />\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setEmail(\"\");\r\n                                    if (!emails.includes(email)) {\r\n                                        setEmails((prevState) => [\r\n                                            ...prevState,\r\n                                            email,\r\n                                        ]);\r\n                                    }\r\n                                }}\r\n                                isDisabled={email.length === 0}\r\n                                size={\"sm\"}\r\n                                colorScheme={\"purple\"}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </HStack>\r\n\r\n                        <HStack w={\"100%\"} py={5} justifyContent={\"end\"}>\r\n                            <Button onClick={onSubmit} colorScheme={\"teal\"}>\r\n                                Share invite\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShareDialog;\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\assign\\Assignment.js",["468","469","470","471","472"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\providers\\QuizProvider.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\login\\LoginPage.js",["473","474"],"import {\r\n    Flex,\r\n    Box,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    Checkbox,\r\n    Stack,\r\n    Link,\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    useColorModeValue, FormHelperText,\r\n} from \"@chakra-ui/react\";\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport {Link as RRLink, useHistory} from 'react-router-dom';\r\nimport {useState} from \"react\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\n\r\nexport default function LoginPage() {\r\n    const {login, setUser, getUserDetails} = useAuth();\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [remember, setRemember] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    const {directUrl, setDirectUrl} = useQuiz();\r\n\r\n    const history = useHistory();\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        const isSuccess = await login(username, password, remember);\r\n        if (isSuccess) {\r\n            await getUserDetails();\r\n            if (directUrl) {\r\n                history.replace(directUrl);\r\n                setDirectUrl(null);\r\n                return;\r\n            }\r\n            history.replace('/')\r\n            return;\r\n        }\r\n        setError(true);\r\n\r\n\r\n    }\r\n    return (\r\n        <Flex\r\n            minH={\"100vh\"}\r\n            align={\"center\"}\r\n            justify={\"center\"}\r\n            bg={useColorModeValue(\"gray.50\", \"gray.800\")}\r\n        >\r\n            <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\r\n                <Stack align={\"center\"}>\r\n                    <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\r\n                    <Text fontSize={\"lg\"} color={\"gray.600\"}>\r\n                        to enjoy all of our cool{\" \"}\r\n                        <Link color={\"blue.400\"}>features</Link> ✌️\r\n                    </Text>\r\n                </Stack>\r\n                <Box\r\n                    rounded={\"lg\"}\r\n                    bg={useColorModeValue(\"white\", \"gray.700\")}\r\n                    boxShadow={\"lg\"}\r\n                    p={8}\r\n                >\r\n                    {/*Form*/}\r\n                    <Stack spacing={4}>\r\n                        {/*Email*/}\r\n                        <FormControl id=\"email\">\r\n                            <FormLabel>Email address</FormLabel>\r\n                            <Input\r\n                                value={username}\r\n                                isInvalid={error}\r\n                                errorBorderColor=\"crimson\"\r\n                                onChange={(e) => {\r\n                                    setError(false);\r\n                                    setUsername(e.target.value);\r\n                                }}\r\n                                type='email|text'/>\r\n                            {\r\n                                error &&\r\n                                <FormHelperText color={'crimson'}>Username or password is not correct!</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        {/*Password*/}\r\n                        <FormControl id=\"password\">\r\n                            <FormLabel>Password</FormLabel>\r\n                            <Input\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                type=\"password\"/>\r\n                        </FormControl>\r\n                        <Stack>\r\n                            <Stack\r\n                                direction={{base: \"column\", sm: \"row\"}}\r\n                                align={\"start\"}\r\n                                justify={\"space-between\"}\r\n                            >\r\n                                {/*Remember me*/}\r\n\r\n                                <Checkbox\r\n                                    defaultChecked\r\n                                    value={remember}\r\n                                    onChange={(e) => {\r\n                                        setRemember(e.target.checked);\r\n                                    }}>\r\n                                    Remember me\r\n                                </Checkbox>\r\n                                <Link color={\"blue.400\"}>Forgot password?</Link>\r\n                            </Stack>\r\n                            <Box minH={10}></Box>\r\n                            <Button\r\n                                disabled={\r\n                                    (username.length === 0 || password.length === 0)\r\n                                }\r\n                                bg={\"blue.400\"}\r\n                                color={\"white\"}\r\n                                _hover={{\r\n                                    bg: \"blue.500\",\r\n                                }}\r\n                                onClick={(e) => handleLogin(e)}\r\n                            >\r\n                                Sign in\r\n                            </Button>\r\n                            <Button\r\n                                bg={\"purple.400\"}\r\n                                color={\"white\"}\r\n                                _hover={{\r\n                                    bg: \"purple.100\",\r\n                                }}\r\n                                onClick={\r\n                                    () => {\r\n                                        history.replace('/')\r\n                                    }\r\n                                }\r\n                            >\r\n                                Sign in as Guest\r\n                            </Button>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Box>\r\n            </Stack>\r\n        </Flex>\r\n    );\r\n}\r\n","C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\QuizService.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\register\\VerificationPage.js",["475","476"],"import {\r\n    Button,\r\n    FormControl,\r\n    Flex,\r\n    Heading,\r\n    Input,\r\n    Stack,\r\n    Text,\r\n    useColorModeValue, FormErrorMessage, FormHelperText,\r\n} from '@chakra-ui/react';\r\nimport {useAuth} from \"../../../hooks/useAuth\";\r\nimport axiosClient from \"../../../api/axiosClient\";\r\nimport {useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport default function VerificationPage() {\r\n    const [code, setCode] = useState('');\r\n    const [err, setErr] = useState('');\r\n    const {getUserDetails} = useAuth();\r\n    const history = useHistory();\r\n    const verification = async () => {\r\n        const url = `${process.env.REACT_APP_BASE_URL}/auth/verification`;\r\n        try {\r\n            const resp = await axiosClient.get(url, {\r\n                headers: {\r\n                    \"code\": code\r\n                }\r\n            });\r\n            console.log(resp.data);\r\n            localStorage.setItem(\"accessToken\", resp.data.accessToken);\r\n            localStorage.setItem(\"refreshToken\", resp.data.refreshToken);\r\n            history.replace(\"/\");\r\n            window.location.reload();\r\n        } catch (e) {\r\n            console.log(e.response.data.message);\r\n            setErr(e.response.data.message);\r\n        }\r\n    }\r\n    return (\r\n        <Flex\r\n            minH={'100vh'}\r\n            align={'center'}\r\n            justify={'center'}\r\n            bg={useColorModeValue('gray.50', 'gray.800')}>\r\n            <Stack\r\n                spacing={4}\r\n                w={'full'}\r\n                maxW={'md'}\r\n                bg={useColorModeValue('white', 'gray.700')}\r\n                rounded={'xl'}\r\n                boxShadow={'lg'}\r\n                p={6}\r\n                my={12}>\r\n                <Heading lineHeight={1.1} fontSize={{base: '2xl', md: '3xl'}}>\r\n                    Verification Account\r\n                </Heading>\r\n                <Text\r\n                    fontSize={{base: 'sm', sm: 'md'}}\r\n                    color={useColorModeValue('gray.800', 'gray.400')}>\r\n                    You&apos;ll get an code on your mail box\r\n                </Text>\r\n                <FormControl id=\"email\">\r\n                    <Input\r\n\r\n                        isInvalid={err}\r\n                        errorBorderColor={'red'}\r\n                        value={code}\r\n                        onChange={(e) => {\r\n                            setCode(e.target.value)\r\n                            setErr('')\r\n                        }}\r\n                        // placeholder=\"your-email@example.com\"\r\n                        _placeholder={{color: 'gray.500'}}\r\n                        type=\"email\"\r\n                    />\r\n                    {err && <FormHelperText color={'red'}>{err}</FormHelperText>}\r\n                </FormControl>\r\n                <Stack spacing={6}>\r\n                    <Button\r\n                        onClick={() => verification()}\r\n                        bg={'blue.400'}\r\n                        color={'white'}\r\n                        _hover={{\r\n                            bg: 'blue.500',\r\n                        }}>\r\n                        Verification Account\r\n                    </Button>\r\n                </Stack>\r\n            </Stack>\r\n        </Flex>\r\n    );\r\n}","C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\public\\start_quiz\\SubmitReportEntry.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\UserService.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\AppService.js",["477"],"import axiosClient from \"../api/axiosClient\";\r\n\r\nconst AppService = {\r\n    getImage: (imgName) => {\r\n        console.log('get imaeg');\r\n        return `${process.env.REACT_APP_BASE_URL}/public/files/${imgName}`;\r\n    }\r\n}\r\nexport default AppService;","C:\\Users\\Admin\\create_grade_quizzes\\src\\components\\admin\\setting\\MyAvatar.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\service\\SubjectService.js",[],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\RemovedQuizzes.js",["478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498"],"C:\\Users\\Admin\\create_grade_quizzes\\src\\pages\\admin\\library\\QuizEntry.js",["499","500"],{"ruleId":"501","replacedBy":"502"},{"ruleId":"503","replacedBy":"504"},{"ruleId":"505","severity":1,"message":"506","line":1,"column":26,"nodeType":"507","messageId":"508","endLine":1,"endColumn":32},{"ruleId":"505","severity":1,"message":"509","line":4,"column":9,"nodeType":"507","messageId":"508","endLine":4,"endColumn":18},{"ruleId":"505","severity":1,"message":"510","line":5,"column":8,"nodeType":"507","messageId":"508","endLine":5,"endColumn":14},{"ruleId":"505","severity":1,"message":"511","line":6,"column":8,"nodeType":"507","messageId":"508","endLine":6,"endColumn":13},{"ruleId":"505","severity":1,"message":"512","line":8,"column":8,"nodeType":"507","messageId":"508","endLine":8,"endColumn":13},{"ruleId":"505","severity":1,"message":"513","line":12,"column":8,"nodeType":"507","messageId":"508","endLine":12,"endColumn":28},{"ruleId":"505","severity":1,"message":"514","line":16,"column":12,"nodeType":"507","messageId":"508","endLine":16,"endColumn":16},{"ruleId":"505","severity":1,"message":"515","line":17,"column":12,"nodeType":"507","messageId":"508","endLine":17,"endColumn":22},{"ruleId":"505","severity":1,"message":"516","line":17,"column":24,"nodeType":"507","messageId":"508","endLine":17,"endColumn":37},{"ruleId":"505","severity":1,"message":"517","line":18,"column":12,"nodeType":"507","messageId":"508","endLine":18,"endColumn":16},{"ruleId":"505","severity":1,"message":"518","line":18,"column":18,"nodeType":"507","messageId":"508","endLine":18,"endColumn":25},{"ruleId":"505","severity":1,"message":"519","line":1,"column":8,"nodeType":"507","messageId":"508","endLine":1,"endColumn":13},{"ruleId":"505","severity":1,"message":"520","line":1,"column":16,"nodeType":"507","messageId":"508","endLine":1,"endColumn":24},{"ruleId":"505","severity":1,"message":"521","line":1,"column":38,"nodeType":"507","messageId":"508","endLine":1,"endColumn":51},{"ruleId":"505","severity":1,"message":"509","line":1,"column":53,"nodeType":"507","messageId":"508","endLine":1,"endColumn":62},{"ruleId":"505","severity":1,"message":"522","line":6,"column":5,"nodeType":"507","messageId":"508","endLine":6,"endColumn":13},{"ruleId":"505","severity":1,"message":"523","line":7,"column":5,"nodeType":"507","messageId":"508","endLine":7,"endColumn":14},{"ruleId":"505","severity":1,"message":"524","line":9,"column":5,"nodeType":"507","messageId":"508","endLine":9,"endColumn":12},{"ruleId":"505","severity":1,"message":"525","line":11,"column":5,"nodeType":"507","messageId":"508","endLine":11,"endColumn":15},{"ruleId":"505","severity":1,"message":"526","line":12,"column":5,"nodeType":"507","messageId":"508","endLine":12,"endColumn":10},{"ruleId":"505","severity":1,"message":"527","line":14,"column":5,"nodeType":"507","messageId":"508","endLine":14,"endColumn":11},{"ruleId":"505","severity":1,"message":"528","line":15,"column":5,"nodeType":"507","messageId":"508","endLine":15,"endColumn":15},{"ruleId":"505","severity":1,"message":"529","line":16,"column":5,"nodeType":"507","messageId":"508","endLine":16,"endColumn":11},{"ruleId":"505","severity":1,"message":"530","line":18,"column":5,"nodeType":"507","messageId":"508","endLine":18,"endColumn":8},{"ruleId":"505","severity":1,"message":"531","line":19,"column":5,"nodeType":"507","messageId":"508","endLine":19,"endColumn":13},{"ruleId":"505","severity":1,"message":"532","line":21,"column":5,"nodeType":"507","messageId":"508","endLine":21,"endColumn":12},{"ruleId":"505","severity":1,"message":"533","line":28,"column":5,"nodeType":"507","messageId":"508","endLine":28,"endColumn":13},{"ruleId":"505","severity":1,"message":"534","line":29,"column":5,"nodeType":"507","messageId":"508","endLine":29,"endColumn":15},{"ruleId":"505","severity":1,"message":"535","line":30,"column":5,"nodeType":"507","messageId":"508","endLine":30,"endColumn":13},{"ruleId":"505","severity":1,"message":"536","line":31,"column":5,"nodeType":"507","messageId":"508","endLine":31,"endColumn":13},{"ruleId":"505","severity":1,"message":"537","line":32,"column":5,"nodeType":"507","messageId":"508","endLine":32,"endColumn":13},{"ruleId":"505","severity":1,"message":"538","line":34,"column":28,"nodeType":"507","messageId":"508","endLine":34,"endColumn":49},{"ruleId":"505","severity":1,"message":"539","line":35,"column":10,"nodeType":"507","messageId":"508","endLine":35,"endColumn":22},{"ruleId":"505","severity":1,"message":"540","line":35,"column":24,"nodeType":"507","messageId":"508","endLine":35,"endColumn":29},{"ruleId":"505","severity":1,"message":"541","line":35,"column":31,"nodeType":"507","messageId":"508","endLine":35,"endColumn":36},{"ruleId":"505","severity":1,"message":"542","line":37,"column":10,"nodeType":"507","messageId":"508","endLine":37,"endColumn":17},{"ruleId":"505","severity":1,"message":"543","line":39,"column":8,"nodeType":"507","messageId":"508","endLine":39,"endColumn":13},{"ruleId":"505","severity":1,"message":"544","line":44,"column":26,"nodeType":"507","messageId":"508","endLine":44,"endColumn":40},{"ruleId":"545","severity":1,"message":"546","line":206,"column":13,"nodeType":"547","messageId":"548","endLine":206,"endColumn":27},{"ruleId":"545","severity":1,"message":"546","line":209,"column":43,"nodeType":"547","messageId":"548","endLine":209,"endColumn":58},{"ruleId":"501","replacedBy":"549"},{"ruleId":"503","replacedBy":"550"},{"ruleId":"505","severity":1,"message":"520","line":1,"column":17,"nodeType":"507","messageId":"508","endLine":1,"endColumn":25},{"ruleId":"505","severity":1,"message":"551","line":5,"column":5,"nodeType":"507","messageId":"508","endLine":5,"endColumn":11},{"ruleId":"505","severity":1,"message":"523","line":7,"column":5,"nodeType":"507","messageId":"508","endLine":7,"endColumn":14},{"ruleId":"505","severity":1,"message":"552","line":13,"column":5,"nodeType":"507","messageId":"508","endLine":13,"endColumn":16},{"ruleId":"505","severity":1,"message":"542","line":19,"column":10,"nodeType":"507","messageId":"508","endLine":19,"endColumn":17},{"ruleId":"505","severity":1,"message":"553","line":33,"column":11,"nodeType":"507","messageId":"508","endLine":33,"endColumn":20},{"ruleId":"501","replacedBy":"554"},{"ruleId":"503","replacedBy":"555"},{"ruleId":"505","severity":1,"message":"542","line":18,"column":10,"nodeType":"507","messageId":"508","endLine":18,"endColumn":17},{"ruleId":"505","severity":1,"message":"556","line":19,"column":10,"nodeType":"507","messageId":"508","endLine":19,"endColumn":23},{"ruleId":"505","severity":1,"message":"557","line":2,"column":8,"nodeType":"507","messageId":"508","endLine":2,"endColumn":25},{"ruleId":"505","severity":1,"message":"558","line":3,"column":18,"nodeType":"507","messageId":"508","endLine":3,"endColumn":24},{"ruleId":"505","severity":1,"message":"559","line":4,"column":9,"nodeType":"507","messageId":"508","endLine":4,"endColumn":14},{"ruleId":"505","severity":1,"message":"560","line":5,"column":8,"nodeType":"507","messageId":"508","endLine":5,"endColumn":19},{"ruleId":"505","severity":1,"message":"561","line":1,"column":16,"nodeType":"507","messageId":"508","endLine":1,"endColumn":25},{"ruleId":"505","severity":1,"message":"562","line":3,"column":5,"nodeType":"507","messageId":"508","endLine":3,"endColumn":11},{"ruleId":"505","severity":1,"message":"563","line":8,"column":5,"nodeType":"507","messageId":"508","endLine":8,"endColumn":19},{"ruleId":"505","severity":1,"message":"564","line":20,"column":8,"nodeType":"507","messageId":"508","endLine":20,"endColumn":18},{"ruleId":"505","severity":1,"message":"565","line":21,"column":8,"nodeType":"507","messageId":"508","endLine":21,"endColumn":19},{"ruleId":"505","severity":1,"message":"566","line":66,"column":19,"nodeType":"507","messageId":"508","endLine":66,"endColumn":23},{"ruleId":"545","severity":1,"message":"546","line":110,"column":54,"nodeType":"547","messageId":"548","endLine":110,"endColumn":69},{"ruleId":"501","replacedBy":"567"},{"ruleId":"503","replacedBy":"568"},{"ruleId":"505","severity":1,"message":"512","line":2,"column":8,"nodeType":"507","messageId":"508","endLine":2,"endColumn":13},{"ruleId":"569","severity":1,"message":"570","line":75,"column":15,"nodeType":"571","endLine":79,"endColumn":6},{"ruleId":"505","severity":1,"message":"551","line":5,"column":5,"nodeType":"507","messageId":"508","endLine":5,"endColumn":11},{"ruleId":"505","severity":1,"message":"572","line":7,"column":5,"nodeType":"507","messageId":"508","endLine":7,"endColumn":9},{"ruleId":"505","severity":1,"message":"573","line":8,"column":5,"nodeType":"507","messageId":"508","endLine":8,"endColumn":13},{"ruleId":"505","severity":1,"message":"528","line":9,"column":5,"nodeType":"507","messageId":"508","endLine":9,"endColumn":15},{"ruleId":"505","severity":1,"message":"574","line":12,"column":5,"nodeType":"507","messageId":"508","endLine":12,"endColumn":9},{"ruleId":"505","severity":1,"message":"575","line":13,"column":5,"nodeType":"507","messageId":"508","endLine":13,"endColumn":13},{"ruleId":"505","severity":1,"message":"524","line":14,"column":5,"nodeType":"507","messageId":"508","endLine":14,"endColumn":12},{"ruleId":"505","severity":1,"message":"526","line":19,"column":5,"nodeType":"507","messageId":"508","endLine":19,"endColumn":10},{"ruleId":"505","severity":1,"message":"543","line":27,"column":8,"nodeType":"507","messageId":"508","endLine":27,"endColumn":13},{"ruleId":"505","severity":1,"message":"542","line":28,"column":9,"nodeType":"507","messageId":"508","endLine":28,"endColumn":16},{"ruleId":"505","severity":1,"message":"576","line":31,"column":8,"nodeType":"507","messageId":"508","endLine":31,"endColumn":15},{"ruleId":"505","severity":1,"message":"577","line":35,"column":11,"nodeType":"507","messageId":"508","endLine":35,"endColumn":18},{"ruleId":"505","severity":1,"message":"578","line":39,"column":12,"nodeType":"507","messageId":"508","endLine":39,"endColumn":21},{"ruleId":"579","severity":1,"message":"580","line":80,"column":21,"nodeType":"581","messageId":"582","endLine":80,"endColumn":23},{"ruleId":"579","severity":1,"message":"580","line":80,"column":37,"nodeType":"581","messageId":"582","endLine":80,"endColumn":39},{"ruleId":"579","severity":1,"message":"580","line":179,"column":71,"nodeType":"581","messageId":"582","endLine":179,"endColumn":73},{"ruleId":"579","severity":1,"message":"580","line":179,"column":83,"nodeType":"581","messageId":"582","endLine":179,"endColumn":85},{"ruleId":"579","severity":1,"message":"580","line":180,"column":71,"nodeType":"581","messageId":"582","endLine":180,"endColumn":73},{"ruleId":"579","severity":1,"message":"580","line":180,"column":83,"nodeType":"581","messageId":"582","endLine":180,"endColumn":85},{"ruleId":"579","severity":1,"message":"580","line":181,"column":71,"nodeType":"581","messageId":"582","endLine":181,"endColumn":73},{"ruleId":"579","severity":1,"message":"580","line":181,"column":83,"nodeType":"581","messageId":"582","endLine":181,"endColumn":85},{"ruleId":"579","severity":1,"message":"580","line":182,"column":71,"nodeType":"581","messageId":"582","endLine":182,"endColumn":73},{"ruleId":"579","severity":1,"message":"580","line":182,"column":83,"nodeType":"581","messageId":"582","endLine":182,"endColumn":85},{"ruleId":"579","severity":1,"message":"580","line":183,"column":71,"nodeType":"581","messageId":"582","endLine":183,"endColumn":73},{"ruleId":"579","severity":1,"message":"580","line":183,"column":83,"nodeType":"581","messageId":"582","endLine":183,"endColumn":85},{"ruleId":"505","severity":1,"message":"520","line":1,"column":16,"nodeType":"507","messageId":"508","endLine":1,"endColumn":24},{"ruleId":"505","severity":1,"message":"583","line":17,"column":20,"nodeType":"507","messageId":"508","endLine":17,"endColumn":26},{"ruleId":"505","severity":1,"message":"524","line":17,"column":28,"nodeType":"507","messageId":"508","endLine":17,"endColumn":35},{"ruleId":"505","severity":1,"message":"584","line":17,"column":37,"nodeType":"507","messageId":"508","endLine":17,"endColumn":43},{"ruleId":"505","severity":1,"message":"585","line":17,"column":45,"nodeType":"507","messageId":"508","endLine":17,"endColumn":50},{"ruleId":"505","severity":1,"message":"586","line":17,"column":52,"nodeType":"507","messageId":"508","endLine":17,"endColumn":63},{"ruleId":"505","severity":1,"message":"587","line":17,"column":65,"nodeType":"507","messageId":"508","endLine":17,"endColumn":74},{"ruleId":"505","severity":1,"message":"563","line":17,"column":76,"nodeType":"507","messageId":"508","endLine":17,"endColumn":90},{"ruleId":"505","severity":1,"message":"574","line":17,"column":92,"nodeType":"507","messageId":"508","endLine":17,"endColumn":96},{"ruleId":"505","severity":1,"message":"575","line":17,"column":98,"nodeType":"507","messageId":"508","endLine":17,"endColumn":106},{"ruleId":"505","severity":1,"message":"530","line":17,"column":108,"nodeType":"507","messageId":"508","endLine":17,"endColumn":111},{"ruleId":"505","severity":1,"message":"588","line":23,"column":23,"nodeType":"507","messageId":"508","endLine":23,"endColumn":30},{"ruleId":"505","severity":1,"message":"522","line":5,"column":18,"nodeType":"507","messageId":"508","endLine":5,"endColumn":26},{"ruleId":"505","severity":1,"message":"589","line":19,"column":12,"nodeType":"507","messageId":"508","endLine":19,"endColumn":17},{"ruleId":"505","severity":1,"message":"590","line":19,"column":19,"nodeType":"507","messageId":"508","endLine":19,"endColumn":33},{"ruleId":"505","severity":1,"message":"591","line":19,"column":35,"nodeType":"507","messageId":"508","endLine":19,"endColumn":42},{"ruleId":"505","severity":1,"message":"592","line":37,"column":19,"nodeType":"507","messageId":"508","endLine":37,"endColumn":23},{"ruleId":"505","severity":1,"message":"509","line":1,"column":16,"nodeType":"507","messageId":"508","endLine":1,"endColumn":25},{"ruleId":"505","severity":1,"message":"593","line":8,"column":5,"nodeType":"507","messageId":"508","endLine":8,"endColumn":9},{"ruleId":"505","severity":1,"message":"530","line":10,"column":12,"nodeType":"507","messageId":"508","endLine":10,"endColumn":15},{"ruleId":"505","severity":1,"message":"576","line":12,"column":8,"nodeType":"507","messageId":"508","endLine":12,"endColumn":15},{"ruleId":"505","severity":1,"message":"594","line":2,"column":22,"nodeType":"507","messageId":"508","endLine":2,"endColumn":33},{"ruleId":"505","severity":1,"message":"595","line":3,"column":9,"nodeType":"507","messageId":"508","endLine":3,"endColumn":29},{"ruleId":"505","severity":1,"message":"596","line":3,"column":31,"nodeType":"507","messageId":"508","endLine":3,"endColumn":44},{"ruleId":"505","severity":1,"message":"543","line":6,"column":8,"nodeType":"507","messageId":"508","endLine":6,"endColumn":13},{"ruleId":"505","severity":1,"message":"576","line":8,"column":8,"nodeType":"507","messageId":"508","endLine":8,"endColumn":15},{"ruleId":"505","severity":1,"message":"597","line":16,"column":41,"nodeType":"507","messageId":"508","endLine":16,"endColumn":53},{"ruleId":"505","severity":1,"message":"514","line":17,"column":12,"nodeType":"507","messageId":"508","endLine":17,"endColumn":16},{"ruleId":"569","severity":1,"message":"570","line":20,"column":15,"nodeType":"571","endLine":32,"endColumn":6},{"ruleId":"569","severity":1,"message":"598","line":32,"column":8,"nodeType":"599","endLine":32,"endColumn":10,"suggestions":"600"},{"ruleId":"505","severity":1,"message":"601","line":14,"column":5,"nodeType":"507","messageId":"508","endLine":14,"endColumn":16},{"ruleId":"505","severity":1,"message":"602","line":15,"column":5,"nodeType":"507","messageId":"508","endLine":15,"endColumn":20},{"ruleId":"505","severity":1,"message":"603","line":16,"column":5,"nodeType":"507","messageId":"508","endLine":16,"endColumn":22},{"ruleId":"505","severity":1,"message":"604","line":17,"column":5,"nodeType":"507","messageId":"508","endLine":17,"endColumn":22},{"ruleId":"505","severity":1,"message":"605","line":18,"column":5,"nodeType":"507","messageId":"508","endLine":18,"endColumn":23},{"ruleId":"505","severity":1,"message":"606","line":19,"column":5,"nodeType":"507","messageId":"508","endLine":19,"endColumn":23},{"ruleId":"505","severity":1,"message":"543","line":23,"column":8,"nodeType":"507","messageId":"508","endLine":23,"endColumn":13},{"ruleId":"505","severity":1,"message":"576","line":25,"column":8,"nodeType":"507","messageId":"508","endLine":25,"endColumn":15},{"ruleId":"505","severity":1,"message":"514","line":40,"column":12,"nodeType":"507","messageId":"508","endLine":40,"endColumn":16},{"ruleId":"505","severity":1,"message":"577","line":42,"column":11,"nodeType":"507","messageId":"508","endLine":42,"endColumn":18},{"ruleId":"569","severity":1,"message":"570","line":44,"column":15,"nodeType":"571","endLine":76,"endColumn":10},{"ruleId":"569","severity":1,"message":"607","line":77,"column":11,"nodeType":"599","endLine":77,"endColumn":13,"suggestions":"608"},{"ruleId":"505","severity":1,"message":"594","line":4,"column":13,"nodeType":"507","messageId":"508","endLine":4,"endColumn":24},{"ruleId":"505","severity":1,"message":"524","line":6,"column":5,"nodeType":"507","messageId":"508","endLine":6,"endColumn":12},{"ruleId":"505","severity":1,"message":"609","line":10,"column":5,"nodeType":"507","messageId":"508","endLine":10,"endColumn":13},{"ruleId":"505","severity":1,"message":"610","line":17,"column":5,"nodeType":"507","messageId":"508","endLine":17,"endColumn":18},{"ruleId":"505","severity":1,"message":"588","line":21,"column":5,"nodeType":"507","messageId":"508","endLine":21,"endColumn":12},{"ruleId":"505","severity":1,"message":"534","line":23,"column":5,"nodeType":"507","messageId":"508","endLine":23,"endColumn":15},{"ruleId":"505","severity":1,"message":"611","line":28,"column":9,"nodeType":"507","messageId":"508","endLine":28,"endColumn":16},{"ruleId":"505","severity":1,"message":"576","line":29,"column":8,"nodeType":"507","messageId":"508","endLine":29,"endColumn":15},{"ruleId":"569","severity":1,"message":"612","line":54,"column":8,"nodeType":"599","endLine":54,"endColumn":27,"suggestions":"613"},{"ruleId":"614","severity":1,"message":"615","line":70,"column":9,"nodeType":"616","messageId":"617","endLine":77,"endColumn":10},{"ruleId":"614","severity":1,"message":"615","line":110,"column":33,"nodeType":"616","messageId":"617","endLine":128,"endColumn":34},{"ruleId":"505","severity":1,"message":"592","line":145,"column":35,"nodeType":"507","messageId":"508","endLine":145,"endColumn":39},{"ruleId":"505","severity":1,"message":"618","line":4,"column":5,"nodeType":"507","messageId":"508","endLine":4,"endColumn":8},{"ruleId":"505","severity":1,"message":"578","line":22,"column":12,"nodeType":"507","messageId":"508","endLine":22,"endColumn":21},{"ruleId":"619","severity":1,"message":"620","line":70,"column":48,"nodeType":"621","messageId":"622","endLine":70,"endColumn":50},{"ruleId":"505","severity":1,"message":"623","line":3,"column":30,"nodeType":"507","messageId":"508","endLine":3,"endColumn":34},{"ruleId":"505","severity":1,"message":"610","line":9,"column":5,"nodeType":"507","messageId":"508","endLine":9,"endColumn":18},{"ruleId":"505","severity":1,"message":"576","line":11,"column":8,"nodeType":"507","messageId":"508","endLine":11,"endColumn":15},{"ruleId":"569","severity":1,"message":"624","line":40,"column":8,"nodeType":"599","endLine":40,"endColumn":10,"suggestions":"625"},{"ruleId":"619","severity":1,"message":"626","line":55,"column":71,"nodeType":"621","messageId":"622","endLine":55,"endColumn":73},{"ruleId":"505","severity":1,"message":"627","line":1,"column":31,"nodeType":"507","messageId":"508","endLine":1,"endColumn":41},{"ruleId":"505","severity":1,"message":"628","line":2,"column":14,"nodeType":"507","messageId":"508","endLine":2,"endColumn":30},{"ruleId":"505","severity":1,"message":"629","line":2,"column":9,"nodeType":"507","messageId":"508","endLine":2,"endColumn":22},{"ruleId":"505","severity":1,"message":"524","line":4,"column":9,"nodeType":"507","messageId":"508","endLine":4,"endColumn":16},{"ruleId":"505","severity":1,"message":"630","line":15,"column":9,"nodeType":"507","messageId":"508","endLine":15,"endColumn":24},{"ruleId":"505","severity":1,"message":"631","line":1,"column":16,"nodeType":"507","messageId":"508","endLine":1,"endColumn":25},{"ruleId":"505","severity":1,"message":"627","line":1,"column":27,"nodeType":"507","messageId":"508","endLine":1,"endColumn":37},{"ruleId":"505","severity":1,"message":"632","line":12,"column":5,"nodeType":"507","messageId":"508","endLine":12,"endColumn":9},{"ruleId":"505","severity":1,"message":"633","line":17,"column":5,"nodeType":"507","messageId":"508","endLine":17,"endColumn":13},{"ruleId":"505","severity":1,"message":"634","line":18,"column":5,"nodeType":"507","messageId":"508","endLine":18,"endColumn":14},{"ruleId":"505","severity":1,"message":"551","line":23,"column":23,"nodeType":"507","messageId":"508","endLine":23,"endColumn":29},{"ruleId":"505","severity":1,"message":"635","line":35,"column":9,"nodeType":"507","messageId":"508","endLine":35,"endColumn":17},{"ruleId":"505","severity":1,"message":"636","line":36,"column":9,"nodeType":"507","messageId":"508","endLine":36,"endColumn":18},{"ruleId":"505","severity":1,"message":"637","line":37,"column":18,"nodeType":"507","messageId":"508","endLine":37,"endColumn":32},{"ruleId":"505","severity":1,"message":"638","line":38,"column":29,"nodeType":"507","messageId":"508","endLine":38,"endColumn":34},{"ruleId":"505","severity":1,"message":"639","line":40,"column":9,"nodeType":"507","messageId":"508","endLine":40,"endColumn":18},{"ruleId":"505","severity":1,"message":"640","line":41,"column":9,"nodeType":"507","messageId":"508","endLine":41,"endColumn":21},{"ruleId":"505","severity":1,"message":"533","line":15,"column":46,"nodeType":"507","messageId":"508","endLine":15,"endColumn":54},{"ruleId":"505","severity":1,"message":"535","line":15,"column":68,"nodeType":"507","messageId":"508","endLine":15,"endColumn":76},{"ruleId":"569","severity":1,"message":"641","line":63,"column":8,"nodeType":"599","endLine":63,"endColumn":10,"suggestions":"642"},{"ruleId":"505","severity":1,"message":"592","line":68,"column":19,"nodeType":"507","messageId":"508","endLine":68,"endColumn":23},{"ruleId":"505","severity":1,"message":"592","line":30,"column":19,"nodeType":"507","messageId":"508","endLine":30,"endColumn":23},{"ruleId":"505","severity":1,"message":"517","line":16,"column":12,"nodeType":"507","messageId":"508","endLine":16,"endColumn":16},{"ruleId":"505","severity":1,"message":"643","line":19,"column":12,"nodeType":"507","messageId":"508","endLine":19,"endColumn":19},{"ruleId":"505","severity":1,"message":"644","line":19,"column":21,"nodeType":"507","messageId":"508","endLine":19,"endColumn":31},{"ruleId":"505","severity":1,"message":"645","line":19,"column":12,"nodeType":"507","messageId":"508","endLine":19,"endColumn":25},{"ruleId":"505","severity":1,"message":"646","line":19,"column":27,"nodeType":"507","messageId":"508","endLine":19,"endColumn":43},{"ruleId":"569","severity":1,"message":"647","line":24,"column":8,"nodeType":"599","endLine":24,"endColumn":10,"suggestions":"648"},{"ruleId":"505","severity":1,"message":"517","line":17,"column":12,"nodeType":"507","messageId":"508","endLine":17,"endColumn":16},{"ruleId":"505","severity":1,"message":"643","line":20,"column":12,"nodeType":"507","messageId":"508","endLine":20,"endColumn":19},{"ruleId":"505","severity":1,"message":"644","line":20,"column":21,"nodeType":"507","messageId":"508","endLine":20,"endColumn":31},{"ruleId":"569","severity":1,"message":"649","line":25,"column":8,"nodeType":"599","endLine":25,"endColumn":10,"suggestions":"650"},{"ruleId":"505","severity":1,"message":"592","line":102,"column":23,"nodeType":"507","messageId":"508","endLine":102,"endColumn":27},{"ruleId":"505","severity":1,"message":"524","line":4,"column":5,"nodeType":"507","messageId":"508","endLine":4,"endColumn":12},{"ruleId":"505","severity":1,"message":"583","line":5,"column":5,"nodeType":"507","messageId":"508","endLine":5,"endColumn":11},{"ruleId":"505","severity":1,"message":"529","line":5,"column":72,"nodeType":"507","messageId":"508","endLine":5,"endColumn":78},{"ruleId":"505","severity":1,"message":"651","line":6,"column":5,"nodeType":"507","messageId":"508","endLine":6,"endColumn":10},{"ruleId":"505","severity":1,"message":"593","line":11,"column":5,"nodeType":"507","messageId":"508","endLine":11,"endColumn":9},{"ruleId":"505","severity":1,"message":"652","line":19,"column":9,"nodeType":"507","messageId":"508","endLine":19,"endColumn":22},{"ruleId":"505","severity":1,"message":"653","line":20,"column":9,"nodeType":"507","messageId":"508","endLine":20,"endColumn":24},{"ruleId":"569","severity":1,"message":"570","line":25,"column":15,"nodeType":"571","endLine":39,"endColumn":6},{"ruleId":"505","severity":1,"message":"594","line":5,"column":5,"nodeType":"507","messageId":"508","endLine":5,"endColumn":16},{"ruleId":"505","severity":1,"message":"654","line":11,"column":5,"nodeType":"507","messageId":"508","endLine":11,"endColumn":10},{"ruleId":"505","severity":1,"message":"655","line":12,"column":5,"nodeType":"507","messageId":"508","endLine":12,"endColumn":15},{"ruleId":"505","severity":1,"message":"527","line":13,"column":5,"nodeType":"507","messageId":"508","endLine":13,"endColumn":11},{"ruleId":"505","severity":1,"message":"656","line":15,"column":5,"nodeType":"507","messageId":"508","endLine":15,"endColumn":13},{"ruleId":"505","severity":1,"message":"657","line":16,"column":5,"nodeType":"507","messageId":"508","endLine":16,"endColumn":18},{"ruleId":"505","severity":1,"message":"551","line":19,"column":5,"nodeType":"507","messageId":"508","endLine":19,"endColumn":11},{"ruleId":"505","severity":1,"message":"542","line":24,"column":9,"nodeType":"507","messageId":"508","endLine":24,"endColumn":16},{"ruleId":"505","severity":1,"message":"658","line":25,"column":9,"nodeType":"507","messageId":"508","endLine":25,"endColumn":24},{"ruleId":"505","severity":1,"message":"543","line":26,"column":8,"nodeType":"507","messageId":"508","endLine":26,"endColumn":13},{"ruleId":"505","severity":1,"message":"544","line":46,"column":25,"nodeType":"507","messageId":"508","endLine":46,"endColumn":39},{"ruleId":"569","severity":1,"message":"659","line":86,"column":8,"nodeType":"599","endLine":86,"endColumn":10,"suggestions":"660"},{"ruleId":"545","severity":1,"message":"546","line":109,"column":17,"nodeType":"547","messageId":"548","endLine":109,"endColumn":29},{"ruleId":"545","severity":1,"message":"546","line":112,"column":17,"nodeType":"547","messageId":"548","endLine":112,"endColumn":33},{"ruleId":"505","severity":1,"message":"524","line":6,"column":5,"nodeType":"507","messageId":"508","endLine":6,"endColumn":12},{"ruleId":"505","severity":1,"message":"661","line":14,"column":5,"nodeType":"507","messageId":"508","endLine":14,"endColumn":10},{"ruleId":"505","severity":1,"message":"662","line":15,"column":26,"nodeType":"507","messageId":"508","endLine":15,"endColumn":37},{"ruleId":"505","severity":1,"message":"623","line":17,"column":13,"nodeType":"507","messageId":"508","endLine":17,"endColumn":17},{"ruleId":"505","severity":1,"message":"532","line":17,"column":19,"nodeType":"507","messageId":"508","endLine":17,"endColumn":26},{"ruleId":"505","severity":1,"message":"523","line":17,"column":28,"nodeType":"507","messageId":"508","endLine":17,"endColumn":37},{"ruleId":"505","severity":1,"message":"663","line":19,"column":9,"nodeType":"507","messageId":"508","endLine":19,"endColumn":18},{"ruleId":"505","severity":1,"message":"664","line":20,"column":9,"nodeType":"507","messageId":"508","endLine":20,"endColumn":23},{"ruleId":"505","severity":1,"message":"665","line":20,"column":25,"nodeType":"507","messageId":"508","endLine":20,"endColumn":32},{"ruleId":"505","severity":1,"message":"666","line":20,"column":43,"nodeType":"507","messageId":"508","endLine":20,"endColumn":53},{"ruleId":"569","severity":1,"message":"570","line":30,"column":15,"nodeType":"571","endLine":47,"endColumn":6},{"ruleId":"569","severity":1,"message":"667","line":47,"column":8,"nodeType":"599","endLine":47,"endColumn":10,"suggestions":"668"},{"ruleId":"505","severity":1,"message":"669","line":20,"column":33,"nodeType":"507","messageId":"508","endLine":20,"endColumn":41},{"ruleId":"569","severity":1,"message":"624","line":32,"column":8,"nodeType":"599","endLine":32,"endColumn":10,"suggestions":"670"},{"ruleId":"619","severity":1,"message":"626","line":164,"column":66,"nodeType":"621","messageId":"622","endLine":164,"endColumn":68},{"ruleId":"505","severity":1,"message":"524","line":8,"column":5,"nodeType":"507","messageId":"508","endLine":8,"endColumn":12},{"ruleId":"505","severity":1,"message":"671","line":25,"column":12,"nodeType":"507","messageId":"508","endLine":25,"endColumn":18},{"ruleId":"505","severity":1,"message":"672","line":25,"column":20,"nodeType":"507","messageId":"508","endLine":25,"endColumn":29},{"ruleId":"505","severity":1,"message":"673","line":32,"column":11,"nodeType":"507","messageId":"508","endLine":32,"endColumn":16},{"ruleId":"569","severity":1,"message":"674","line":41,"column":8,"nodeType":"599","endLine":41,"endColumn":10,"suggestions":"675"},{"ruleId":"505","severity":1,"message":"676","line":16,"column":17,"nodeType":"507","messageId":"508","endLine":16,"endColumn":23},{"ruleId":"505","severity":1,"message":"591","line":21,"column":19,"nodeType":"507","messageId":"508","endLine":21,"endColumn":26},{"ruleId":"505","severity":1,"message":"677","line":9,"column":24,"nodeType":"507","messageId":"508","endLine":9,"endColumn":40},{"ruleId":"505","severity":1,"message":"590","line":20,"column":12,"nodeType":"507","messageId":"508","endLine":20,"endColumn":26},{"ruleId":"505","severity":1,"message":"678","line":1,"column":8,"nodeType":"507","messageId":"508","endLine":1,"endColumn":19},{"ruleId":"505","severity":1,"message":"618","line":3,"column":5,"nodeType":"507","messageId":"508","endLine":3,"endColumn":8},{"ruleId":"505","severity":1,"message":"679","line":4,"column":5,"nodeType":"507","messageId":"508","endLine":4,"endColumn":11},{"ruleId":"505","severity":1,"message":"525","line":6,"column":5,"nodeType":"507","messageId":"508","endLine":6,"endColumn":15},{"ruleId":"505","severity":1,"message":"526","line":7,"column":5,"nodeType":"507","messageId":"508","endLine":7,"endColumn":10},{"ruleId":"505","severity":1,"message":"680","line":8,"column":5,"nodeType":"507","messageId":"508","endLine":8,"endColumn":9},{"ruleId":"505","severity":1,"message":"681","line":9,"column":5,"nodeType":"507","messageId":"508","endLine":9,"endColumn":15},{"ruleId":"505","severity":1,"message":"682","line":9,"column":17,"nodeType":"507","messageId":"508","endLine":9,"endColumn":25},{"ruleId":"505","severity":1,"message":"683","line":10,"column":5,"nodeType":"507","messageId":"508","endLine":10,"endColumn":13},{"ruleId":"505","severity":1,"message":"532","line":12,"column":5,"nodeType":"507","messageId":"508","endLine":12,"endColumn":12},{"ruleId":"505","severity":1,"message":"610","line":12,"column":14,"nodeType":"507","messageId":"508","endLine":12,"endColumn":27},{"ruleId":"505","severity":1,"message":"584","line":13,"column":5,"nodeType":"507","messageId":"508","endLine":13,"endColumn":11},{"ruleId":"505","severity":1,"message":"684","line":15,"column":9,"nodeType":"507","messageId":"508","endLine":15,"endColumn":20},{"ruleId":"505","severity":1,"message":"685","line":15,"column":22,"nodeType":"507","messageId":"508","endLine":15,"endColumn":28},{"ruleId":"505","severity":1,"message":"686","line":15,"column":30,"nodeType":"507","messageId":"508","endLine":15,"endColumn":42},{"ruleId":"505","severity":1,"message":"653","line":16,"column":9,"nodeType":"507","messageId":"508","endLine":16,"endColumn":24},{"ruleId":"505","severity":1,"message":"535","line":16,"column":26,"nodeType":"507","messageId":"508","endLine":16,"endColumn":34},{"ruleId":"505","severity":1,"message":"536","line":16,"column":36,"nodeType":"507","messageId":"508","endLine":16,"endColumn":44},{"ruleId":"505","severity":1,"message":"687","line":17,"column":8,"nodeType":"507","messageId":"508","endLine":17,"endColumn":18},{"ruleId":"505","severity":1,"message":"565","line":20,"column":8,"nodeType":"507","messageId":"508","endLine":20,"endColumn":19},{"ruleId":"569","severity":1,"message":"570","line":26,"column":15,"nodeType":"571","endLine":36,"endColumn":6},{"ruleId":"505","severity":1,"message":"592","line":40,"column":19,"nodeType":"507","messageId":"508","endLine":40,"endColumn":23},{"ruleId":"505","severity":1,"message":"686","line":19,"column":30,"nodeType":"507","messageId":"508","endLine":19,"endColumn":42},{"ruleId":"505","severity":1,"message":"688","line":22,"column":8,"nodeType":"507","messageId":"508","endLine":22,"endColumn":19},"no-native-reassign",["689"],"no-negated-in-lhs",["690"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'SockJS' is defined but never used.","'Stomp' is defined but never used.","'Axios' is defined but never used.","'AdminSettingProvider' is defined but never used.","'user' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setinputValue' is assigned a value but never used.","'quiz' is assigned a value but never used.","'setQuiz' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'createContext' is defined but never used.","'Checkbox' is defined but never used.","'Container' is defined but never used.","'Heading' is defined but never used.","'IconButton' is defined but never used.","'Image' is defined but never used.","'Select' is defined but never used.","'SimpleGrid' is defined but never used.","'Spacer' is defined but never used.","'Tag' is defined but never used.","'TagLabel' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'EditIcon' is defined but never used.","'TimeIcon' is defined but never used.","'ViewIcon' is defined but never used.","'CircularProgressLabel' is defined but never used.","'AiOutlineTag' is defined but never used.","'BiPen' is defined but never used.","'BsPen' is defined but never used.","'useQuiz' is defined but never used.","'axios' is defined but never used.","'setCreatedQuiz' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["689"],["690"],"'Center' is defined but never used.","'usePrevious' is defined but never used.","'randomUID' is assigned a value but never used.",["689"],["690"],"'useCreateQuiz' is defined but never used.","'SidebarWithHeader' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'SettingPage' is defined but never used.","'Component' is defined but never used.","'Avatar' is defined but never used.","'FormHelperText' is defined but never used.","'AppService' is defined but never used.","'QuizService' is defined but never used.","'data' is assigned a value but never used.",["689"],["690"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Grid' is defined but never used.","'GridItem' is defined but never used.","'Wrap' is defined but never used.","'WrapItem' is defined but never used.","'quizApi' is defined but never used.","'history' is assigned a value but never used.","'isLoading' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'HStack' is defined but never used.","'VStack' is defined but never used.","'Input' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'AddIcon' is defined but never used.","'login' is assigned a value but never used.","'getUserDetails' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","'Text' is defined but never used.","'ButtonGroup' is defined but never used.","'AiOutlineFieldNumber' is defined but never used.","'RiNumbersFill' is defined but never used.","'setDirectUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'code' and 'setFoundedQuiz'. Either include them or remove the dependency array.","ArrayExpression",["691"],"'AlertDialog' is defined but never used.","'AlertDialogBody' is defined but never used.","'AlertDialogFooter' is defined but never used.","'AlertDialogHeader' is defined but never used.","'AlertDialogContent' is defined but never used.","'AlertDialogOverlay' is defined but never used.","React Hook useEffect has missing dependencies: 'foundedQuiz', 'getQuizInfo', 'getQuizQuestions', and 'setFoundedQuiz'. Either include them or remove the dependency array.",["692"],"'ListIcon' is defined but never used.","'useDisclosure' is defined but never used.","'BiShare' is defined but never used.","React Hook useEffect has a missing dependency: 'getCreatedQuizzesInfo'. Either include it or remove the dependency array.",["693"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Box' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'quizId'. Either include it or remove the dependency array.",["694"],"Expected '!==' and instead saw '!='.","'useContext' is defined but never used.","'CircularProgress' is defined but never used.","'BrowserRouter' is defined but never used.","'DragDropContext' is defined but never used.","'ReactNode' is defined but never used.","'Link' is defined but never used.","'BoxProps' is defined but never used.","'FlexProps' is defined but never used.","'IconType' is defined but never used.","'ReactText' is defined but never used.","'PlusSquareIcon' is defined but never used.","'RLink' is defined but never used.","'FcLibrary' is defined but never used.","'AdminContext' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchQuizDetails'. Either include it or remove the dependency array.",["695"],"'options' is assigned a value but never used.","'setOptions' is assigned a value but never used.","'organizations' is assigned a value but never used.","'setOrganizations' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSubject'. Either include it or remove the dependency array.",["696"],"React Hook useEffect has a missing dependency: 'selectedQuestion'. Either include it or remove the dependency array. If 'setQuestion' needs the current value of 'selectedQuestion', you can also switch to useReducer instead of useState and read 'selectedQuestion' in the reducer.",["697"],"'Stack' is defined but never used.","'AiOutlineUser' is defined but never used.","'ChevronDownIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'useRadio' is defined but never used.","'useRadioGroup' is defined but never used.","'MdArrowDropDown' is defined but never used.","React Hook useEffect has a missing dependency: 'createdQuiz'. Either include it or remove the dependency array.",["698"],"'Tfoot' is defined but never used.","'TagLeftIcon' is defined but never used.","'CloseIcon' is defined but never used.","'AiOutlineCheck' is defined but never used.","'BsCheck' is defined but never used.","'IoIosClose' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["699"],"'MdPublic' is defined but never used.",["700"],"'emails' is assigned a value but never used.","'setEmails' is assigned a value but never used.","'toast' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getQuizDetail' and 'id'. Either include them or remove the dependency array.",["701"],"'RRLink' is defined but never used.","'FormErrorMessage' is defined but never used.","'axiosClient' is defined but never used.","'Button' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'MenuList' is defined but never used.","'BsListCheck' is defined but never used.","'BsPlay' is defined but never used.","'MdAssignment' is defined but never used.","'dateFormat' is defined but never used.","'UserService' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},{"desc":"718","fix":"719"},{"desc":"708","fix":"720"},{"desc":"721","fix":"722"},"Update the dependencies array to be: [code, setFoundedQuiz]",{"range":"723","text":"724"},"Update the dependencies array to be: [foundedQuiz, getQuizInfo, getQuizQuestions, setFoundedQuiz]",{"range":"725","text":"726"},"Update the dependencies array to be: [getCreatedQuizzesInfo, params, setParams]",{"range":"727","text":"728"},"Update the dependencies array to be: [quizId]",{"range":"729","text":"730"},"Update the dependencies array to be: [fetchQuizDetails]",{"range":"731","text":"732"},"Update the dependencies array to be: [getSubject]",{"range":"733","text":"734"},"Update the dependencies array to be: [selectedQuestion]",{"range":"735","text":"736"},"Update the dependencies array to be: [createdQuiz]",{"range":"737","text":"738"},"Update the dependencies array to be: [id]",{"range":"739","text":"740"},{"range":"741","text":"730"},"Update the dependencies array to be: [getQuizDetail, id]",{"range":"742","text":"743"},[1200,1202],"[code, setFoundedQuiz]",[2455,2457],"[foundedQuiz, getQuizInfo, getQuizQuestions, setFoundedQuiz]",[1590,1609],"[getCreatedQuizzesInfo, params, setParams]",[1403,1405],"[quizId]",[2373,2375],"[fetchQuizDetails]",[805,807],"[getSubject]",[903,905],"[selectedQuestion]",[2629,2631],"[createdQuiz]",[1343,1345],"[id]",[788,790],[1294,1296],"[getQuizDetail, id]"]