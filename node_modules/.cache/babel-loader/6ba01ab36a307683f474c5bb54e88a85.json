{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\edit_quiz\\\\QuestionEntry.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box, Button, Checkbox, Container, HStack, IconButton, Select, SimpleGrid, Spacer, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport { AiOutlineTag, BsPen } from \"react-icons/all\";\nimport { CopyIcon, DeleteIcon } from \"@chakra-ui/icons\";\nimport { useQuiz } from \"../../context/QuizProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionEntry = ({\n  index,\n  question\n}) => {\n  _s();\n\n  //TODO:update question id\n  const {\n    savedQuestions,\n    setSavedQuestions\n  } = useQuiz();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      boxShadow: 'sm',\n      my: 5,\n      borderRadius: 'md',\n      align: 'start',\n      textAlign: 'start',\n      h: '100%',\n      bg: 'white',\n      maxW: '600px',\n      minW: '600px',\n      children: [/*#__PURE__*/_jsxDEV(HStack, {\n        p: 2,\n        bg: 'gray.200',\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [\"Question \", index]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          label: 'edit',\n          color: 'teal.200',\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            icon: /*#__PURE__*/_jsxDEV(BsPen, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          color: 'red.500',\n          label: 'remove',\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => {\n              let tmp = savedQuestions;\n              tmp = tmp.filter(q => q.title != question.title);\n              setSavedQuestions(tmp);\n            },\n            icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          label: 'duplicate',\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            icon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VStack, {\n        align: 'start',\n        p: 2,\n        spacing: 5,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          maxW: \"3xl\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            maxW: \"3xl\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: 'medium',\n              children: question.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n          w: '100%',\n          align: 'start',\n          columns: 2,\n          spacing: 2,\n          children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(Container, {\n            maxW: \"xl\",\n            centerContent: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              py: 4,\n              w: '100%',\n              maxW: \"3xl\",\n              align: 'start',\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                w: '100%',\n                size: 'sm',\n                disabled: true,\n                isChecked: option.isChecked,\n                children: option.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(HStack, {\n        bg: 'gray.200',\n        p: 1,\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          size: 'sm',\n          maxW: '100',\n          bg: 'white',\n          name: 'queston seconds',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"option1\",\n            children: \"30 secs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"option2\",\n            children: \"15 secs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"option3\",\n            children: \"45 secs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: 'sm',\n          colorScheme: 'white',\n          variant: 'ghost',\n          leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineTag, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 39\n          }, this),\n          children: \"Tag topics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(QuestionEntry, \"en5VnTIo4H4Oyg5oZmrh07AwsyM=\", false, function () {\n  return [useQuiz];\n});\n\n_c = QuestionEntry;\nexport default QuestionEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionEntry\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/edit_quiz/QuestionEntry.js"],"names":["React","Box","Button","Checkbox","Container","HStack","IconButton","Select","SimpleGrid","Spacer","Text","Tooltip","VStack","AiOutlineTag","BsPen","CopyIcon","DeleteIcon","useQuiz","QuestionEntry","index","question","savedQuestions","setSavedQuestions","tmp","filter","q","title","options","map","option","isChecked","content"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    Box, Button,\r\n    Checkbox,\r\n    Container,\r\n    HStack,\r\n    IconButton, Select,\r\n    SimpleGrid,\r\n    Spacer,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {AiOutlineTag, BsPen} from \"react-icons/all\";\r\nimport {CopyIcon, DeleteIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../context/QuizProvider\";\r\n\r\nconst QuestionEntry = ({index, question}) => {\r\n    //TODO:update question id\r\n    const {\r\n        savedQuestions,\r\n        setSavedQuestions\r\n    } = useQuiz();\r\n    return (\r\n        <>\r\n            <Box boxShadow={'sm'} my={5} borderRadius={'md'} align={'start'}\r\n                 textAlign={'start'}\r\n                 h={'100%'} bg={'white'} maxW={'600px'}\r\n                 minW={'600px'}>\r\n                {/*Edit bar*/}\r\n                <HStack p={2} bg={'gray.200'}>\r\n                    {/*QUESTION INDEX*/}\r\n                    <Text>Question {index}</Text>\r\n                    <Spacer/>\r\n                    <Tooltip label={'edit'} color={'teal.200'}>\r\n                        <IconButton icon={<BsPen/>}/>\r\n                    </Tooltip>\r\n                    <Tooltip color={'red.500'} label={'remove'}>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                let tmp = savedQuestions;\r\n                                tmp = tmp.filter(q => q.title != question.title);\r\n                                setSavedQuestions(tmp);\r\n                            }}\r\n                            icon={<DeleteIcon/>}/>\r\n                    </Tooltip>\r\n                    <Tooltip label={'duplicate'}>\r\n                        <IconButton icon={<CopyIcon/>}/>\r\n                    </Tooltip>\r\n                </HStack>\r\n                <VStack align={'start'}\r\n                        p={2}\r\n                        spacing={5}>\r\n                    {/*QUESTION TITLE*/}\r\n                    <Container maxW=\"3xl\">\r\n                        <Box maxW=\"3xl\">\r\n                            <Text fontWeight={'medium'}>{question.title}</Text>\r\n                        </Box>\r\n                    </Container>\r\n                    <SimpleGrid w={'100%'} align={'start'}\r\n                                columns={2} spacing={2}>\r\n                        {\r\n                            question.options.map((option, index) => (\r\n                                <Container\r\n                                    key={index} maxW=\"xl\" centerContent>\r\n                                    <Box py={4}\r\n                                         w={'100%'}\r\n                                         maxW=\"3xl\" align={'start'}>\r\n                                        <Checkbox w={'100%'} size={'sm'} disabled={true} isChecked={option.isChecked}>\r\n                                            {option.content}\r\n                                        </Checkbox>\r\n                                    </Box>\r\n                                </Container>\r\n                            ))\r\n                        }\r\n                    </SimpleGrid>\r\n                </VStack>\r\n                <HStack bg={'gray.200'} p={1}>\r\n                    <Select size={'sm'} maxW={'100'} bg={'white'} name={'queston seconds'}>\r\n                        <option value=\"option1\">30 secs</option>\r\n                        <option value=\"option2\">15 secs</option>\r\n                        <option value=\"option3\">45 secs</option>\r\n                    </Select>\r\n                    <Button size={'sm'} colorScheme={'white'} variant={'ghost'}\r\n                            leftIcon={<AiOutlineTag/>}>Tag topics</Button>\r\n                </HStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuestionEntry;"]},"metadata":{},"sourceType":"module"}