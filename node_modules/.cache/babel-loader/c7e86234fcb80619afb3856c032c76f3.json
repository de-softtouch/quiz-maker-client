{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\providers\\\\QuizEditProvider.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport React from 'react';\nimport QuizService from \"../service/QuizService\";\nimport UserService from \"../service/UserService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuizEditContext = /*#__PURE__*/createContext();\n\nconst QuizEditProvider = ({\n  children\n}) => {\n  _s();\n\n  const [quiz, setQuiz] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const value = {\n    quiz,\n    setQuiz,\n    isLoading,\n    setLoading,\n    getQuizDetail,\n    handleSaveQuiz\n  };\n\n  const getQuizDetail = async id => {\n    const resp = await UserService.getUserQuiz(id);\n    setQuiz(resp.data);\n    return resp.data;\n  };\n\n  const handleSaveQuiz = async () => {\n    try {\n      setLoading(true);\n      const resp = await QuizService.saveQuiz(quiz);\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(QuizEditContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuizEditProvider, \"YFdEM4KPdhGmSbT7LVJB5yh6uQs=\");\n\n_c = QuizEditProvider;\nexport default QuizEditProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEditProvider\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/providers/QuizEditProvider.js"],"names":["createContext","useState","React","QuizService","UserService","QuizEditContext","QuizEditProvider","children","quiz","setQuiz","isLoading","setLoading","value","getQuizDetail","handleSaveQuiz","id","resp","getUserQuiz","data","saveQuiz","error","response","console","log","status","headers"],"mappings":";;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAsC,OAAtC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,OAAO,MAAMC,eAAe,gBAAGL,aAAa,EAArC;;AAEP,MAAMM,gBAAgB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAErC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACS,SAAD,EAAYC,UAAZ,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMW,KAAK,GAAG;AACVJ,IAAAA,IADU;AACJC,IAAAA,OADI;AACKC,IAAAA,SADL;AACgBC,IAAAA,UADhB;AAC4BE,IAAAA,aAD5B;AAC2CC,IAAAA;AAD3C,GAAd;;AAIA,QAAMD,aAAa,GAAG,MAAOE,EAAP,IAAc;AAChC,UAAMC,IAAI,GAAG,MAAMZ,WAAW,CAACa,WAAZ,CAAwBF,EAAxB,CAAnB;AACAN,IAAAA,OAAO,CAACO,IAAI,CAACE,IAAN,CAAP;AACA,WAAOF,IAAI,CAACE,IAAZ;AACH,GAJD;;AAKA,QAAMJ,cAAc,GAAG,YAAY;AAC/B,QAAI;AACAH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMK,IAAI,GAAG,MAAMb,WAAW,CAACgB,QAAZ,CAAqBX,IAArB,CAAnB;AACH,KAHD,CAGE,OAAOY,KAAP,EAAc;AACZ,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,QAAN,CAAeH,IAA3B;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,QAAN,CAAeG,MAA3B;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,QAAN,CAAeI,OAA3B;AACH;AACJ,KATD,SASU;AACNd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAbD;;AAcA,sBAEI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEC,KAAjC;AAAA,cACKL;AADL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAMH,CAlCD;;GAAMD,gB;;KAAAA,gB;AAoCN,eAAeA,gBAAf","sourcesContent":["import {createContext, useState} from \"react\";\r\n\r\nimport React from 'react';\r\nimport QuizService from \"../service/QuizService\";\r\nimport UserService from \"../service/UserService\";\r\n\r\nexport const QuizEditContext = createContext();\r\n\r\nconst QuizEditProvider = ({children}) => {\r\n\r\n    const [quiz, setQuiz] = useState(null);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const value = {\r\n        quiz, setQuiz, isLoading, setLoading, getQuizDetail, handleSaveQuiz\r\n    }\r\n\r\n    const getQuizDetail = async (id) => {\r\n        const resp = await UserService.getUserQuiz(id);\r\n        setQuiz(resp.data);\r\n        return resp.data;\r\n    }\r\n    const handleSaveQuiz = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const resp = await QuizService.saveQuiz(quiz);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    return (\r\n\r\n        <QuizEditContext.Provider value={value}>\r\n            {children}\r\n        </QuizEditContext.Provider>\r\n    );\r\n};\r\n\r\nexport default QuizEditProvider;"]},"metadata":{},"sourceType":"module"}