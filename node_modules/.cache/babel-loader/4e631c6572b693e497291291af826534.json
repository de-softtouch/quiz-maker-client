{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\quiz maker client\\\\src\\\\pages\\\\admin\\\\assign\\\\Assignment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Box, Button, Flex, FormControl, FormLabel, forwardRef, Heading, HStack, Input, Tag, TagCloseButton, TagLabel, Text, Textarea, useToast, VStack, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport DatePicker from \"react-datepicker\";\nimport { useParams } from \"react-router-dom\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AdminContext } from \"../../../providers/AdminSettingProvider\";\nimport UserService from \"../../../service/UserService\";\nimport dateFormat from \"dateformat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Assignment = () => {\n  _s();\n\n  const {\n    getQuizDetail,\n    quiz\n  } = useContext(QuizEditContext);\n  const {\n    isLoading,\n    setLoading\n  } = useContext(AdminContext);\n  const {\n    id\n  } = useParams();\n  const [email, setEmail] = useState(\"\");\n  const [err, setErr] = useState('');\n  const [assignment, setAssignment] = useState({\n    quizId: id,\n    emails: [],\n    startDate: new Date() // finishDate: new Date()\n\n  });\n  const toast = useToast();\n  const ExampleCustomInput = forwardRef(({\n    value,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"example-custom-input\",\n    onClick: onClick,\n    ref: ref,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    console.log(id);\n    getQuizDetail(id);\n  }, []);\n\n  const assignToUsers = async () => {\n    if (assignment.startDate != null && assignment.finishDate != null && assignment.title != null) {\n      console.log('assigning....');\n\n      try {\n        const data = await UserService.assignToUsers(assignment);\n        console.log(\"assign success\");\n      } catch (e) {\n        console.log(\"Could not assign quiz to users! \", e);\n      }\n    }\n\n    console.log(assignment);\n  };\n\n  const formatDate = date => {\n    return dateFormat(date, \"yyyy-MM-dd HH:mm\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    w: '100%',\n    minH: '100vh',\n    children: !isLoading && /*#__PURE__*/_jsxDEV(VStack, {\n      w: '100%',\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        bg: 'white',\n        w: '100%',\n        children: /*#__PURE__*/_jsxDEV(HStack, {\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            children: quiz && quiz.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        w: '100%',\n        children: [/*#__PURE__*/_jsxDEV(VStack, {\n          flex: 8,\n          w: '100%',\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            w: '100%',\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"title\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                onChange: e => setAssignment(prev => ({ ...prev,\n                  title: e.target.value\n                })),\n                value: assignment.title,\n                bg: 'white',\n                placeholder: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"Description\",\n            isRequired: true,\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              onChange: e => setAssignment(prev => ({ ...prev,\n                description: e.target.value\n              })),\n              value: assignment.description,\n              bg: 'white',\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flex: 3,\n          bg: 'white',\n          p: 2,\n          mx: 2,\n          minH: '100vh',\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            align: 'start',\n            w: '100%',\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(VStack, {\n              w: '100%',\n              align: 'start',\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: \"Deadline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                customInput: /*#__PURE__*/_jsxDEV(ExampleCustomInput, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 58\n                }, this),\n                selected: assignment.startDate,\n                onChange: date => setAssignment(prev => ({ ...prev,\n                  startDate: formatDate(date)\n                })),\n                showTimeSelect: true,\n                timeFormat: \"HH:mm\",\n                dateFormat: \"yyyy-MM-dd HH:mm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                customInput: /*#__PURE__*/_jsxDEV(ExampleCustomInput, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 58\n                }, this),\n                selected: assignment.finishDate,\n                onChange: date => setAssignment(prev => ({ ...prev,\n                  finishDate: formatDate(date)\n                })),\n                showTimeSelect: true,\n                timeFormat: \"HH:mm\",\n                dateFormat: \"yyyy-MM-dd HH:mm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(VStack, {\n              children: [/*#__PURE__*/_jsxDEV(Wrap, {\n                w: \"100%\",\n                children: assignment.emails && assignment.emails.map(email => /*#__PURE__*/_jsxDEV(WrapItem, {\n                  children: /*#__PURE__*/_jsxDEV(Tag, {\n                    size: \"sm\",\n                    borderRadius: \"full\",\n                    variant: \"solid\",\n                    colorScheme: \"green\",\n                    children: [/*#__PURE__*/_jsxDEV(TagLabel, {\n                      children: email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(TagCloseButton, {\n                      onClick: () => {\n                        console.log(email);\n                        setAssignment(prev => ({ ...prev,\n                          emails: prev.emails.filter(e => e !== email)\n                        }));\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 53\n                  }, this)\n                }, email, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(HStack, {\n                w: \"100%\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  size: \"sm\",\n                  value: email,\n                  onChange: e => setEmail(e.target.value),\n                  placeholder: \"Email to share. Ex: test@gmail.com\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => {\n                    if (!assignment.emails.includes(email)) {\n                      setAssignment(prev => ({ ...prev,\n                        emails: [...prev.emails, email]\n                      }));\n                    }\n\n                    setEmail(\"\");\n                  },\n                  isDisabled: email.length === 0,\n                  size: \"sm\",\n                  colorScheme: \"purple\",\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: 'sm',\n              onClick: assignToUsers,\n              alignSelf: 'end',\n              colorScheme: 'blue',\n              children: \"Giao B\\xE0i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Assignment, \"zA54vYiMlQle6TET/JiQlaUl/bM=\", false, function () {\n  return [useParams, useToast];\n});\n\n_c = Assignment;\nexport default Assignment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Assignment\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/quiz maker client/src/pages/admin/assign/Assignment.js"],"names":["React","useContext","useEffect","useState","Box","Button","Flex","FormControl","FormLabel","forwardRef","Heading","HStack","Input","Tag","TagCloseButton","TagLabel","Text","Textarea","useToast","VStack","Wrap","WrapItem","DatePicker","useParams","QuizEditContext","AdminContext","UserService","dateFormat","Assignment","getQuizDetail","quiz","isLoading","setLoading","id","email","setEmail","err","setErr","assignment","setAssignment","quizId","emails","startDate","Date","toast","ExampleCustomInput","value","onClick","ref","console","log","assignToUsers","finishDate","title","data","e","formatDate","date","prev","target","description","map","filter","includes","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,SACIC,GADJ,EAEIC,MAFJ,EAGIC,IAHJ,EAIIC,WAJJ,EAKIC,SALJ,EAKeC,UALf,EAMIC,OANJ,EAOIC,MAPJ,EAQIC,KARJ,EAQWC,GARX,EAQgBC,cARhB,EAQgCC,QARhC,EAQ0CC,IAR1C,EASIC,QATJ,EAUIC,QAVJ,EAWIC,MAXJ,EAWYC,IAXZ,EAWkBC,QAXlB,QAYO,kBAZP;AAaA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,eAAR,QAA8B,qCAA9B;AACA,SAAQC,YAAR,QAA2B,yCAA3B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,MAAwB7B,UAAU,CAACuB,eAAD,CAAxC;AACA,QAAM;AAACO,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA0B/B,UAAU,CAACwB,YAAD,CAA1C;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAOV,SAAS,EAAtB;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBhC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACiC,GAAD,EAAMC,MAAN,IAAgBlC,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACmC,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CAAC;AACzCqC,IAAAA,MAAM,EAAEP,EADiC;AAEzCQ,IAAAA,MAAM,EAAE,EAFiC;AAGzCC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,EAH8B,CAIzC;;AAJyC,GAAD,CAA5C;AAMA,QAAMC,KAAK,GAAG1B,QAAQ,EAAtB;AACA,QAAM2B,kBAAkB,GAAGpC,UAAU,CAAC,CAAC;AAACqC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAmBC,GAAnB,kBAClC;AAAQ,IAAA,SAAS,EAAC,sBAAlB;AAAyC,IAAA,OAAO,EAAED,OAAlD;AAA2D,IAAA,GAAG,EAAEC,GAAhE;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADiC,CAArC;AAKA5C,EAAAA,SAAS,CAAC,MAAM;AACZ+C,IAAAA,OAAO,CAACC,GAAR,CAAYjB,EAAZ;AACAJ,IAAAA,aAAa,CAACI,EAAD,CAAb;AACH,GAHQ,EAGN,EAHM,CAAT;;AAIA,QAAMkB,aAAa,GAAG,YAAY;AAC9B,QAAIb,UAAU,CAACI,SAAX,IAAwB,IAAxB,IAAgCJ,UAAU,CAACc,UAAX,IAAyB,IAAzD,IAAiEd,UAAU,CAACe,KAAX,IAAoB,IAAzF,EAA+F;AAC3FJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,UAAI;AACA,cAAMI,IAAI,GAAG,MAAM5B,WAAW,CAACyB,aAAZ,CAA0Bb,UAA1B,CAAnB;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,OAHD,CAGE,OAAOK,CAAP,EAAU;AACRN,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDK,CAAhD;AACH;AACJ;;AACDN,IAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ;AACH,GAXD;;AAYA,QAAMkB,UAAU,GAAIC,IAAD,IAAS;AACzB,WAAO9B,UAAU,CAAC8B,IAAD,EAAM,kBAAN,CAAjB;AACF,GAFD;;AAGA,sBACI,QAAC,GAAD;AAAK,IAAA,CAAC,EAAE,MAAR;AAAgB,IAAA,IAAI,EAAE,OAAtB;AAAA,cAEQ,CAAC1B,SAAD,iBACI,QAAC,MAAD;AAAQ,MAAA,CAAC,EAAE,MAAX;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAW,QAAA,EAAE,EAAE,OAAf;AAAwB,QAAA,CAAC,EAAE,MAA3B;AAAA,+BACI,QAAC,MAAD;AAAA,iCACI,QAAC,IAAD;AAAA,sBAAOD,IAAI,IAAIA,IAAI,CAACuB;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,IAAD;AAAM,QAAA,CAAC,EAAE,MAAT;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAE,CAAd;AAAiB,UAAA,CAAC,EAAE,MAApB;AAA4B,UAAA,OAAO,EAAE,CAArC;AAAA,kCAEI,QAAC,MAAD;AAAQ,YAAA,CAAC,EAAE,MAAX;AAAA,mCACI,QAAC,WAAD;AAAa,cAAA,EAAE,EAAC,OAAhB;AAAwB,cAAA,UAAU,MAAlC;AAAA,sCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AACI,gBAAA,QAAQ,EAAGE,CAAD,IACNhB,aAAa,CAACmB,IAAI,KACd,EACI,GAAGA,IADP;AAEIL,kBAAAA,KAAK,EAAEE,CAAC,CAACI,MAAF,CAASb;AAFpB,iBADc,CAAL,CAFrB;AAQI,gBAAA,KAAK,EAAER,UAAU,CAACe,KARtB;AASI,gBAAA,EAAE,EAAE,OATR;AASiB,gBAAA,WAAW,EAAC;AAT7B;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAkBI,QAAC,WAAD;AAAa,YAAA,EAAE,EAAC,aAAhB;AAA8B,YAAA,UAAU,MAAxC;AAAA,oCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,QAAD;AACI,cAAA,QAAQ,EAAGE,CAAD,IACNhB,aAAa,CAACmB,IAAI,KACd,EACI,GAAGA,IADP;AAEIE,gBAAAA,WAAW,EAAEL,CAAC,CAACI,MAAF,CAASb;AAF1B,eADc,CAAL,CAFrB;AAQI,cAAA,KAAK,EAAER,UAAU,CAACsB,WARtB;AAUI,cAAA,EAAE,EAAE,OAVR;AAUiB,cAAA,WAAW,EAAC;AAV7B;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAkCI,QAAC,GAAD;AAAK,UAAA,IAAI,EAAE,CAAX;AAAc,UAAA,EAAE,EAAE,OAAlB;AAA2B,UAAA,CAAC,EAAE,CAA9B;AAAiC,UAAA,EAAE,EAAE,CAArC;AAAwC,UAAA,IAAI,EAAE,OAA9C;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAE,OAAf;AAAwB,YAAA,CAAC,EAAE,MAA3B;AAAmC,YAAA,OAAO,EAAE,CAA5C;AAAA,oCAEI,QAAC,MAAD;AAAQ,cAAA,CAAC,EAAE,MAAX;AAAmB,cAAA,KAAK,EAAE,OAA1B;AAAA,sCACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAGI,QAAC,UAAD;AACI,gBAAA,WAAW,eAAE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,wBADjB;AAEI,gBAAA,QAAQ,EAAEtB,UAAU,CAACI,SAFzB;AAII,gBAAA,QAAQ,EAAGe,IAAD,IAAUlB,aAAa,CAAEmB,IAAD,KAAW,EACzC,GAAGA,IADsC;AAEzChB,kBAAAA,SAAS,EAAEc,UAAU,CAACC,IAAD;AAFoB,iBAAX,CAAD,CAJrC;AAQI,gBAAA,cAAc,MARlB;AASI,gBAAA,UAAU,EAAC,OATf;AAWI,gBAAA,UAAU,EAAC;AAXf;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAgBI,QAAC,UAAD;AACI,gBAAA,WAAW,eAAE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,wBADjB;AAEI,gBAAA,QAAQ,EAAEnB,UAAU,CAACc,UAFzB;AAII,gBAAA,QAAQ,EAAGK,IAAD,IAAUlB,aAAa,CAAEmB,IAAD,KAAW,EACzC,GAAGA,IADsC;AAEzCN,kBAAAA,UAAU,EAAEI,UAAU,CAACC,IAAD;AAFmB,iBAAX,CAAD,CAJrC;AAQI,gBAAA,cAAc,MARlB;AASI,gBAAA,UAAU,EAAC,OATf;AAWI,gBAAA,UAAU,EAAC;AAXf;AAAA;AAAA;AAAA;AAAA,sBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eA8CI,QAAC,MAAD;AAAA,sCACI,QAAC,IAAD;AAAM,gBAAA,CAAC,EAAE,MAAT;AAAA,0BACKnB,UAAU,CAACG,MAAX,IAAqBH,UAAU,CAACG,MAAX,CAAkBoB,GAAlB,CAAuB3B,KAAD,iBACxC,QAAC,QAAD;AAAA,yCACI,QAAC,GAAD;AACI,oBAAA,IAAI,EAAE,IADV;AAEI,oBAAA,YAAY,EAAC,MAFjB;AAGI,oBAAA,OAAO,EAAC,OAHZ;AAII,oBAAA,WAAW,EAAC,OAJhB;AAAA,4CAMI,QAAC,QAAD;AAAA,gCAAWA;AAAX;AAAA;AAAA;AAAA;AAAA,4BANJ,eAOI,QAAC,cAAD;AACI,sBAAA,OAAO,EAAE,MAAM;AACXe,wBAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACAK,wBAAAA,aAAa,CAACmB,IAAI,KAAK,EACnB,GAAGA,IADgB;AAEnBjB,0BAAAA,MAAM,EAAEiB,IAAI,CAACjB,MAAL,CAAYqB,MAAZ,CAAmBP,CAAC,IAAIA,CAAC,KAAKrB,KAA9B;AAFW,yBAAL,CAAL,CAAb;AAIH;AAPL;AAAA;AAAA;AAAA;AAAA,4BAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA,wBADkB;AAD1B;AAAA;AAAA;AAAA;AAAA,sBADJ,eAyBI,QAAC,MAAD;AAAQ,gBAAA,CAAC,EAAE,MAAX;AAAA,wCACI,QAAC,KAAD;AACI,kBAAA,IAAI,EAAE,IADV;AAEI,kBAAA,KAAK,EAAEA,KAFX;AAGI,kBAAA,QAAQ,EAAGqB,CAAD,IAAOpB,QAAQ,CAACoB,CAAC,CAACI,MAAF,CAASb,KAAV,CAH7B;AAII,kBAAA,WAAW,EACP;AALR;AAAA;AAAA;AAAA;AAAA,wBADJ,eASI,QAAC,MAAD;AACI,kBAAA,OAAO,EAAE,MAAM;AACX,wBAAI,CAACR,UAAU,CAACG,MAAX,CAAkBsB,QAAlB,CAA2B7B,KAA3B,CAAL,EAAwC;AACpCK,sBAAAA,aAAa,CAACmB,IAAI,KAAK,EACnB,GAAGA,IADgB;AAEnBjB,wBAAAA,MAAM,EAAE,CAAC,GAAGiB,IAAI,CAACjB,MAAT,EAAiBP,KAAjB;AAFW,uBAAL,CAAL,CAAb;AAIH;;AACDC,oBAAAA,QAAQ,CAAC,EAAD,CAAR;AAEH,mBAVL;AAWI,kBAAA,UAAU,EAAED,KAAK,CAAC8B,MAAN,KAAiB,CAXjC;AAYI,kBAAA,IAAI,EAAE,IAZV;AAaI,kBAAA,WAAW,EAAE,QAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA9CJ,eAmGI,QAAC,MAAD;AACI,cAAA,IAAI,EAAE,IADV;AAEI,cAAA,OAAO,EAAEb,aAFb;AAGI,cAAA,SAAS,EAAE,KAHf;AAGsB,cAAA,WAAW,EAAE,MAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4JH,CAlMD;;GAAMvB,U;UAIWL,S,EASCL,Q;;;KAbZU,U;AAoMN,eAAeA,UAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Flex,\r\n    FormControl,\r\n    FormLabel, forwardRef,\r\n    Heading,\r\n    HStack,\r\n    Input, Tag, TagCloseButton, TagLabel, Text,\r\n    Textarea,\r\n    useToast,\r\n    VStack, Wrap, WrapItem\r\n} from \"@chakra-ui/react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport dateFormat from \"dateformat\";\r\n\r\nconst Assignment = () => {\r\n\r\n    const {getQuizDetail, quiz} = useContext(QuizEditContext);\r\n    const {isLoading, setLoading} = useContext(AdminContext);\r\n    const {id} = useParams();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [err, setErr] = useState('');\r\n    const [assignment, setAssignment] = useState({\r\n        quizId: id,\r\n        emails: [],\r\n        startDate: new Date(),\r\n        // finishDate: new Date()\r\n    })\r\n    const toast = useToast();\r\n    const ExampleCustomInput = forwardRef(({value, onClick}, ref) => (\r\n        <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\r\n            {value}\r\n        </button>\r\n    ));\r\n    useEffect(() => {\r\n        console.log(id);\r\n        getQuizDetail(id);\r\n    }, [])\r\n    const assignToUsers = async () => {\r\n        if (assignment.startDate != null && assignment.finishDate != null && assignment.title != null) {\r\n            console.log('assigning....')\r\n            try {\r\n                const data = await UserService.assignToUsers(assignment);\r\n                console.log(\"assign success\")\r\n            } catch (e) {\r\n                console.log(\"Could not assign quiz to users! \", e)\r\n            }\r\n        }\r\n        console.log(assignment)\r\n    }\r\n    const formatDate = (date) =>{\r\n       return dateFormat(date,\"yyyy-MM-dd HH:mm\");\r\n    }\r\n    return (\r\n        <Box w={'100%'} minH={'100vh'}>\r\n            {\r\n                !isLoading && (\r\n                    <VStack w={'100%'}>\r\n                        <Box p={5} bg={'white'} w={'100%'}>\r\n                            <HStack>\r\n                                <Text>{quiz && quiz.title}</Text>\r\n                            </HStack>\r\n                        </Box>\r\n                        <Flex w={'100%'}>\r\n                            <VStack flex={8} w={'100%'} spacing={2}>\r\n                                {/*TITLE*/}\r\n                                <HStack w={'100%'}>\r\n                                    <FormControl id=\"title\" isRequired>\r\n                                        <FormLabel>Title</FormLabel>\r\n                                        <Input\r\n                                            onChange={(e) =>\r\n                                                setAssignment(prev => (\r\n                                                    {\r\n                                                        ...prev,\r\n                                                        title: e.target.value\r\n                                                    }\r\n                                                ))}\r\n                                            value={assignment.title}\r\n                                            bg={'white'} placeholder=\"Title\"/>\r\n                                    </FormControl>\r\n                                </HStack>\r\n                                {/*    DESCRIPTION*/}\r\n                                <FormControl id=\"Description\" isRequired>\r\n                                    <FormLabel>Description</FormLabel>\r\n                                    <Textarea\r\n                                        onChange={(e) =>\r\n                                            setAssignment(prev => (\r\n                                                {\r\n                                                    ...prev,\r\n                                                    description: e.target.value\r\n                                                }\r\n                                            ))}\r\n                                        value={assignment.description}\r\n\r\n                                        bg={'white'} placeholder=\"Description\"/>\r\n                                </FormControl>\r\n                            </VStack>\r\n                            <Box flex={3} bg={'white'} p={2} mx={2} minH={'100vh'}>\r\n                                <VStack align={'start'} w={'100%'} spacing={5}>\r\n\r\n                                    <VStack w={'100%'} align={'start'}>\r\n                                        <Text>Deadline</Text>\r\n\r\n                                        <DatePicker\r\n                                            customInput={<ExampleCustomInput/>}\r\n                                            selected={assignment.startDate}\r\n\r\n                                            onChange={(date) => setAssignment((prev) => ({\r\n                                                ...prev,\r\n                                                startDate: formatDate(date)\r\n                                            }))}\r\n                                            showTimeSelect\r\n                                            timeFormat=\"HH:mm\"\r\n\r\n                                            dateFormat=\"yyyy-MM-dd HH:mm\"\r\n                                        />\r\n                                        <DatePicker\r\n                                            customInput={<ExampleCustomInput/>}\r\n                                            selected={assignment.finishDate}\r\n\r\n                                            onChange={(date) => setAssignment((prev) => ({\r\n                                                ...prev,\r\n                                                finishDate: formatDate(date)\r\n                                            }))}\r\n                                            showTimeSelect\r\n                                            timeFormat=\"HH:mm\"\r\n\r\n                                            dateFormat=\"yyyy-MM-dd HH:mm\"\r\n                                        />\r\n                                        {/*<DatePicker*/}\r\n                                        {/*    selectsRange={true}*/}\r\n                                        {/*    startDate={assignment.startDate}*/}\r\n                                        {/*    endDate={assignment.finishDate}*/}\r\n                                        {/*    onChange={(update) => {*/}\r\n                                        {/*        setAssignment(prev => ({*/}\r\n                                        {/*            ...prev,*/}\r\n                                        {/*            startDate: update[0],*/}\r\n                                        {/*            finishDate: update[1]*/}\r\n                                        {/*        }))*/}\r\n                                        {/*    }}*/}\r\n                                        {/*    withPortal*/}\r\n                                        {/*/>*/}\r\n\r\n                                    </VStack>\r\n                                    <VStack>\r\n                                        <Wrap w={\"100%\"}>\r\n                                            {assignment.emails && assignment.emails.map((email) => (\r\n                                                <WrapItem key={email}>\r\n                                                    <Tag\r\n                                                        size={\"sm\"}\r\n                                                        borderRadius=\"full\"\r\n                                                        variant=\"solid\"\r\n                                                        colorScheme=\"green\"\r\n                                                    >\r\n                                                        <TagLabel>{email}</TagLabel>\r\n                                                        <TagCloseButton\r\n                                                            onClick={() => {\r\n                                                                console.log(email)\r\n                                                                setAssignment(prev => ({\r\n                                                                    ...prev,\r\n                                                                    emails: prev.emails.filter(e => e !== email)\r\n                                                                }))\r\n                                                            }}\r\n                                                        />\r\n                                                    </Tag>\r\n                                                </WrapItem>\r\n                                            ))}\r\n                                        </Wrap>\r\n                                        {/*INPUT & ADD BUTTOn*/}\r\n                                        <HStack w={\"100%\"}>\r\n                                            <Input\r\n                                                size={\"sm\"}\r\n                                                value={email}\r\n                                                onChange={(e) => setEmail(e.target.value)}\r\n                                                placeholder={\r\n                                                    \"Email to share. Ex: test@gmail.com\"\r\n                                                }\r\n                                            />\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    if (!assignment.emails.includes(email)) {\r\n                                                        setAssignment(prev => ({\r\n                                                            ...prev,\r\n                                                            emails: [...prev.emails, email]\r\n                                                        }))\r\n                                                    }\r\n                                                    setEmail(\"\");\r\n\r\n                                                }}\r\n                                                isDisabled={email.length === 0}\r\n                                                size={\"sm\"}\r\n                                                colorScheme={\"purple\"}\r\n                                            >\r\n                                                Add\r\n                                            </Button>\r\n                                        </HStack>\r\n                                    </VStack>\r\n                                    <Button\r\n                                        size={'sm'}\r\n                                        onClick={assignToUsers}\r\n                                        alignSelf={'end'} colorScheme={'blue'}>Giao Bài</Button>\r\n                                </VStack>\r\n                            </Box>\r\n                        </Flex>\r\n                    </VStack>\r\n                )\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Assignment;"]},"metadata":{},"sourceType":"module"}