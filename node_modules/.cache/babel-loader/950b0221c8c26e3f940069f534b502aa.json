{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport { useEffect, useState } from \"react\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport LoginPage from \"./components/public/login/LoginPage\";\nimport Axios from \"axios\";\nimport { PrivateRoute } from \"./routes/privateRoute\";\nimport Public from \"./components/public/Public\";\nimport Admin from \"./components/admin/Admin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  var stompClient;\n  const [inputValue, setinputValue] = useState(\"\");\n  const [quiz, setQuiz] = useState(null);\n\n  const fetchData = async () => {\n    //fetch quiz by code\n    Axios.get(\"http://localhost:8080/api/v1/public/quiz?code=vtrSzV\").then(resp => {\n      //if success\n      if (resp.status == 200) {\n        const data = resp.data;\n        let quiz = new QuizModel();\n        quiz.quizId = data.quizId;\n        quiz.title = data.title;\n        quiz.code = data.code;\n        let questions = []; //get questions\n\n        data.questions.forEach(questionItem => {\n          let question = new QuestionModel();\n          question.title = questionItem.title;\n          question.questionId = questionItem.questionId;\n          question.optionType = questionItem.optionType;\n          let options = []; //get options\n\n          questionItem.options.forEach(optionItem => {\n            let option = new OptionModel(optionItem.optionId, optionItem.content, optionItem.score);\n            options.push(option);\n          }); //add option to question\n\n          question.options = options; //add to list question\n\n          questions.push(question);\n        }); //add questions to quiz\n\n        quiz.questions = questions; //update state\n\n        setQuiz(quiz);\n        console.log(quiz);\n      }\n    });\n  };\n\n  useEffect(() => {// fetchData();\n    // try {\n    //     var sock = new SockJS(\"http://localhost:8081/ws\");\n    //     sock.onopen = function () {\n    //         console.log(\"open\");\n    //     };\n    //     sock.onclose = function () {\n    //         console.log(\"close\");\n    //     };\n    //     stompClient = Stomp.over(sock);\n    //     stompClient.connect(\n    //         {},\n    //         function (frame) {\n    //             console.log(\"connected: \" + frame);\n    //             // stompClient.subscribe('/topic/notification', function(notification){\n    //             //   refetchTanks(); // call fetch tanks -> can't use \"this\"\n    //             // })\n    //         },\n    //         function (err) {\n    //             console.log(\"err\", err);\n    //         }\n    //     );\n    //     stompClient.subscribe(\"/topic/messages\", (message) => {\n    //         console.log(\"MEssagege\");\n    //     });\n    // } catch (error) {}\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(PrivateRoute, {\n      path: '/admin',\n      children: /*#__PURE__*/_jsxDEV(Admin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      component: LoginPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      component: Public\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"4G7P0IQ6782AZpF/gcVJcnICb4E=\", false, function () {\n  return [useAuth];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/App.js"],"names":["BrowserRouter","Router","Switch","Route","useAuth","useEffect","useState","SockJS","Stomp","LoginPage","Axios","PrivateRoute","Public","Admin","App","user","stompClient","inputValue","setinputValue","quiz","setQuiz","fetchData","get","then","resp","status","data","QuizModel","quizId","title","code","questions","forEach","questionItem","question","QuestionModel","questionId","optionType","options","optionItem","option","OptionModel","optionId","content","score","push","console","log"],"mappings":"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","sourcesContent":["import {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport {useAuth} from \"./hooks/useAuth\";\nimport {useEffect, useState} from \"react\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport LoginPage from \"./components/public/login/LoginPage\";\nimport Axios from \"axios\";\nimport {PrivateRoute} from \"./routes/privateRoute\";\nimport Public from \"./components/public/Public\";\nimport Admin from \"./components/admin/Admin\";\n\nfunction App() {\n    const {user} = useAuth();\n    var stompClient;\n    const [inputValue, setinputValue] = useState(\"\");\n    const [quiz, setQuiz] = useState(null);\n    const fetchData = async () => {\n        //fetch quiz by code\n        Axios.get(\"http://localhost:8080/api/v1/public/quiz?code=vtrSzV\").then(\n            (resp) => {\n                //if success\n                if (resp.status == 200) {\n                    const data = resp.data;\n                    let quiz = new QuizModel();\n                    quiz.quizId = data.quizId;\n                    quiz.title = data.title;\n                    quiz.code = data.code;\n                    let questions = [];\n                    //get questions\n                    data.questions.forEach((questionItem) => {\n                        let question = new QuestionModel();\n                        question.title = questionItem.title;\n                        question.questionId = questionItem.questionId;\n                        question.optionType = questionItem.optionType;\n                        let options = [];\n                        //get options\n                        questionItem.options.forEach((optionItem) => {\n                            let option = new OptionModel(\n                                optionItem.optionId,\n                                optionItem.content,\n                                optionItem.score\n                            );\n                            options.push(option);\n                        });\n                        //add option to question\n                        question.options = options;\n                        //add to list question\n                        questions.push(question);\n                    });\n                    //add questions to quiz\n                    quiz.questions = questions;\n                    //update state\n                    setQuiz(quiz);\n                    console.log(quiz);\n                }\n            }\n        );\n    };\n    useEffect(() => {\n        // fetchData();\n        // try {\n        //     var sock = new SockJS(\"http://localhost:8081/ws\");\n        //     sock.onopen = function () {\n        //         console.log(\"open\");\n        //     };\n        //     sock.onclose = function () {\n        //         console.log(\"close\");\n        //     };\n        //     stompClient = Stomp.over(sock);\n        //     stompClient.connect(\n        //         {},\n        //         function (frame) {\n        //             console.log(\"connected: \" + frame);\n        //             // stompClient.subscribe('/topic/notification', function(notification){\n        //             //   refetchTanks(); // call fetch tanks -> can't use \"this\"\n        //             // })\n        //         },\n        //         function (err) {\n        //             console.log(\"err\", err);\n        //         }\n        //     );\n        //     stompClient.subscribe(\"/topic/messages\", (message) => {\n        //         console.log(\"MEssagege\");\n        //     });\n        // } catch (error) {}\n    }, []);\n\n    return (\n        <Switch>\n            <PrivateRoute path={'/admin'}>\n                <Admin/>\n            </PrivateRoute>\n            {/*<Route  path='/admin' component={Admin}/>*/}\n            <Route  path='/login' component={LoginPage}/>\n            <Route path='/' component={Public}/>\n        </Switch>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}