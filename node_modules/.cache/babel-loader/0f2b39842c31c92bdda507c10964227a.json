{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\components\\\\EditQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button, HStack, IconButton, Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Text, Textarea, useToast, VStack } from \"@chakra-ui/react\";\nimport { BiFullscreen } from \"react-icons/all\";\nimport { QuizEditContext } from \"../../../../providers/QuizEditProvider\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditQuestionDialog = ({\n  visible,\n  setVisible,\n  size,\n  setSize,\n  selectedQuestion,\n  setSelectedQuestion\n}) => {\n  _s();\n\n  const {\n    quiz,\n    setQuiz\n  } = useContext(QuizEditContext);\n  const toast = useToast();\n  const [question, setQuestion] = useState(null);\n  const [options, setOptions] = useState([{}, {}]); // useEffect(() => {\n  //     setQuestion(selectedQuestion);\n  //     setOptions(selectedQuestion.options);\n  // }, [selectedQuestion, setSelectedQuestion])\n\n  const onOptionChange = (e, index) => {\n    //push new option if it is the last index option\n    if (index === options.length - 1) {\n      options.push({});\n    }\n\n    setOptions(prevState => prevState.map((option, i) => i === index ? { ...option,\n      content: e.target.value,\n      score: 0\n    } : option));\n    setQuestion(prevState => ({ ...prevState,\n      options: options.filter(option => option.content && option.content.length > 0)\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => {\n        setVisible(false);\n        setOptions([{}, {}]);\n        setQuestion(null);\n      },\n      size: size,\n      isOpen: visible,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \"Edit question index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(BiFullscreen, {\n              onClick: () => size === 'full' ? setSize('xl') : setSize('full')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          p: 5,\n          spacing: 5,\n          maxH: '900px',\n          overflowY: 'scroll',\n          children: [/*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textAlign: 'start',\n              w: '100%',\n              fontWeight: 'medium',\n              children: \"Question title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              value: question && question.title,\n              onChange: e => setQuestion(prevState => ({ ...prevState,\n                title: e.target.value\n              })),\n              borderColor: 'black.800',\n              placeholder: \"Type your question title here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: options && options.map((option, index) => /*#__PURE__*/_jsxDEV(HStack, {\n              w: '100%',\n              children: [/*#__PURE__*/_jsxDEV(Select, {\n                onChange: e => {\n                  setOptions(prevState => options.map((item, i) => i === index ? { ...item,\n                    score: parseInt(e.target.value, 10)\n                  } : item));\n                },\n                bg: 'gray.200' // defaultValue={0}\n                ,\n                placeholder: \"score\",\n                maxW: '100px',\n                children: [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: item,\n                  children: item\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                borderWidth: option.score && option.score > 0 && 1.5,\n                borderColor: option.score && option.score > 0 && 'green',\n                color: option.score && option.score > 0 && 'green',\n                focusBorderColor: option.score && option.score > 0 && 'green',\n                colorScheme: 'blue',\n                value: option.content,\n                onChange: e => onOptionChange(e, index),\n                placeholder: \"option\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"s\",\n                icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 76\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setVisible(false);\n              setOptions([{}, {}]);\n              setQuestion(null);\n              setSelectedQuestion(null);\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            ml: 4,\n            colorScheme: 'blue',\n            onClick: () => {},\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditQuestionDialog, \"WaA6oOzXLUN+xiqs+pHOa95S7hI=\", false, function () {\n  return [useToast];\n});\n\n_c = EditQuestionDialog;\nexport default EditQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/components/EditQuestionDialog.js"],"names":["React","useContext","useEffect","useState","Button","HStack","IconButton","Input","Modal","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Select","Text","Textarea","useToast","VStack","BiFullscreen","QuizEditContext","DeleteIcon","EditQuestionDialog","visible","setVisible","size","setSize","selectedQuestion","setSelectedQuestion","quiz","setQuiz","toast","question","setQuestion","options","setOptions","onOptionChange","e","index","length","push","prevState","map","option","i","content","target","value","score","filter","title","item","parseInt"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack, IconButton,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport {DeleteIcon} from \"@chakra-ui/icons\";\r\n\r\nconst EditQuestionDialog = ({visible, setVisible, size, setSize, selectedQuestion, setSelectedQuestion}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState(null);\r\n    const [options, setOptions] = useState([{}, {}]);\r\n\r\n    // useEffect(() => {\r\n    //     setQuestion(selectedQuestion);\r\n    //     setOptions(selectedQuestion.options);\r\n    // }, [selectedQuestion, setSelectedQuestion])\r\n\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === options.length - 1) {\r\n            options.push({});\r\n        }\r\n        setOptions((prevState) => (\r\n            prevState.map((option, i) => i === index\r\n                ? {\r\n                    ...option,\r\n                    content: e.target.value,\r\n                    score: 0,\r\n                }\r\n                : option)\r\n        ));\r\n        setQuestion((prevState) => ({\r\n                ...prevState,\r\n                options: options.filter(option => (option.content && option.content.length > 0))\r\n            }\r\n        ));\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setOptions([{}, {}])\r\n                setQuestion(null)\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text>Edit question index</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n\r\n                            <Textarea\r\n                                value={question && question.title}\r\n                                onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                options && options.map((option, index) => (\r\n                                    <HStack key={index} w={'100%'}>\r\n                                        <Select\r\n                                            onChange={(e) => {\r\n                                                setOptions((prevState) => (\r\n                                                    options.map((item, i) => i === index ? {\r\n                                                        ...item,\r\n                                                        score: parseInt(e.target.value, 10)\r\n                                                    } : item)\r\n                                                ))\r\n                                            }}\r\n                                            bg={'gray.200'}\r\n                                            // defaultValue={0}\r\n                                            placeholder='score'\r\n                                            maxW={'100px'}>\r\n                                            {\r\n                                                [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                    <option key={i} value={item}>{item}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                        <Input\r\n                                            borderWidth={option.score && option.score > 0 && 1.5}\r\n                                            borderColor={option.score && option.score > 0 && 'green'}\r\n                                            color={option.score && option.score > 0 && 'green'}\r\n                                            focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                            colorScheme={'blue'}\r\n                                            value={option.content}\r\n                                            onChange={(e) => onOptionChange(e, index)}\r\n                                            key={index}\r\n                                            placeholder={\"option\"}/>\r\n                                        <IconButton aria-label={\"s\"} icon={<DeleteIcon/>}/>\r\n                                    </HStack>\r\n                                ))\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setOptions([{}, {}])\r\n                            setQuestion(null)\r\n                            setSelectedQuestion(null)\r\n                        }}>Close</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={() => {\r\n                        }}>Save</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;"]},"metadata":{},"sourceType":"module"}