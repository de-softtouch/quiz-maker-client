{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\components\\\\EditQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Button, HStack, IconButton, Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Text, Textarea, useToast, VStack } from \"@chakra-ui/react\";\nimport { BiFullscreen, CgRemove } from \"react-icons/all\";\nimport { QuizEditContext } from \"../../../../providers/QuizEditProvider\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditQuestionDialog = ({\n  visible,\n  setVisible,\n  size,\n  setSize,\n  selectedQuestion\n}) => {\n  _s();\n\n  const {\n    quiz,\n    setQuiz\n  } = useContext(QuizEditContext);\n  const toast = useToast();\n  const [question, setQuestion] = useState({\n    title: '',\n    options: [{}, {}]\n  });\n  const [options, setOptions] = useState([{}, {}]);\n  const [removeOptionIds, setRemoveOptionIds] = useState([]);\n  useEffect(() => {\n    setQuestion(selectedQuestion);\n  }, []);\n\n  const onTitleChange = e => {\n    setQuestion(prev => ({ ...prev,\n      title: e.target.value\n    }));\n  };\n\n  const onOptionChange = (e, index) => {\n    //push new option if it is the last index option\n    if (index === question.options.length - 1 && e.target.value.length > 0) {\n      setQuestion(prev => ({ ...prev,\n        options: [...prev.options, {}]\n      }));\n    }\n\n    setQuestion(prevState => ({ ...prevState,\n      options: prevState.options.map((option, i) => {\n        if (i === index) {\n          return { ...option,\n            content: e.target.value\n          };\n        }\n\n        return option;\n      })\n    }));\n  };\n\n  const onSaveOption = async () => {\n    //check question have title\n    if (!question || !question.title || question.title.length === 0) {\n      return toast({\n        title: `Your question does not have title!`,\n        position: \"bottom-left\",\n        isClosable: true,\n        status: \"error\",\n        variant: \"solid\",\n        duration: 1500\n      });\n    } //check question have question\n\n\n    if (!question.options[0] || !question.options[0].content || !question.options[0].content.length === 0) {\n      toast({\n        title: `Your question must have at least 1 or 2 options!`,\n        position: \"bottom-left\",\n        isClosable: true,\n        status: \"error\",\n        variant: \"solid\",\n        duration: 1500\n      });\n      return;\n    }\n\n    let score = 0;\n\n    for (const option of question.options) {\n      if (option && option.score) {\n        score += option.score;\n      }\n    }\n\n    if (score === 0) {\n      return toast({\n        title: `Your question must have at least 1 true option!`,\n        position: \"bottom-left\",\n        isClosable: true,\n        status: \"error\",\n        variant: \"solid\",\n        duration: 1500\n      });\n    }\n\n    let modifiedQuestion = { ...question,\n      options: question.options.filter(option => option.content && option.content.length > 0)\n    };\n    let tmpQuestions = quiz.questions;\n    tmpQuestions = tmpQuestions.map(item => item.id === selectedQuestion.id ? modifiedQuestion : item);\n    console.log(tmpQuestions);\n    setQuiz(prev => ({ ...prev,\n      questions: [...tmpQuestions]\n    }));\n    setVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => {\n        setVisible(false);\n        setQuestion({\n          title: '',\n          options: [{}, {}]\n        });\n      },\n      size: size,\n      isOpen: visible,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \"Edit Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(BiFullscreen, {\n              onClick: () => size === 'full' ? setSize('xl') : setSize('full')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          p: 5,\n          spacing: 5,\n          maxH: '900px',\n          overflowY: 'scroll',\n          children: [/*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textAlign: 'start',\n              w: '100%',\n              fontWeight: 'medium',\n              children: \"Question title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              value: question && question.title // onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\n              ,\n              onChange: onTitleChange,\n              borderColor: 'black.800',\n              placeholder: \"Type your question title here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: question.options.map((option, index) => {\n              let handleScoreChange = e => {\n                setQuestion(prev => ({ ...prev,\n                  options: prev.options.map((option, i) => i === index ? { ...option,\n                    score: parseFloat(e.target.value)\n                  } : option)\n                }));\n              };\n\n              const handleRemoveOption = async () => {\n                // const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/questions/options/${option.id}`\n                // try {\n                //     const resp = await axios.delete(url, {\n                //         headers: {\n                //             \"Content-Type\": \"application/json\"\n                //         }\n                //     });\n                //     if (resp.status === 200) {\n                setQuestion(pre => ({ ...pre,\n                  options: pre.options.filter((item, i) => i !== index)\n                })); //     }\n                // } catch (e) {\n                //\n                // }\n              };\n\n              return /*#__PURE__*/_jsxDEV(HStack, {\n                w: '100%',\n                children: [/*#__PURE__*/_jsxDEV(Select, {\n                  value: option.score ? option.score : 0,\n                  onChange: handleScoreChange,\n                  bg: 'gray.200' // defaultValue={0}\n                  ,\n                  placeholder: \"score\",\n                  maxW: '100px',\n                  children: [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: item,\n                    children: item\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  value: option.content && option.content,\n                  borderWidth: option.score && option.score > 0 ? 1.5 : 1,\n                  borderColor: option.score && option.score > 0 && 'green',\n                  color: option.score && option.score > 0 && 'green',\n                  focusBorderColor: option.score && option.score > 0 && 'green',\n                  colorScheme: 'blue',\n                  onChange: e => onOptionChange(e, index),\n                  placeholder: \"option\"\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: handleRemoveOption,\n                  \"aria-label\": 'remove',\n                  icon: /*#__PURE__*/_jsxDEV(CgRemove, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 77\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setVisible(false);\n              setQuestion({\n                title: '',\n                options: [{}, {}]\n              });\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            ml: 4,\n            colorScheme: 'blue',\n            onClick: onSaveOption,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditQuestionDialog, \"MvnenqGz9+vAxqVhgTdRvMzfvaM=\", false, function () {\n  return [useToast];\n});\n\n_c = EditQuestionDialog;\nexport default EditQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/components/EditQuestionDialog.js"],"names":["React","useContext","useEffect","useState","Button","HStack","IconButton","Input","Modal","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Select","Text","Textarea","useToast","VStack","BiFullscreen","CgRemove","QuizEditContext","axios","EditQuestionDialog","visible","setVisible","size","setSize","selectedQuestion","quiz","setQuiz","toast","question","setQuestion","title","options","setOptions","removeOptionIds","setRemoveOptionIds","onTitleChange","e","prev","target","value","onOptionChange","index","length","prevState","map","option","i","content","onSaveOption","position","isClosable","status","variant","duration","score","modifiedQuestion","filter","tmpQuestions","questions","item","id","console","log","handleScoreChange","parseFloat","handleRemoveOption","pre"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack, IconButton,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen, CgRemove} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst EditQuestionDialog = ({visible, setVisible, size, setSize, selectedQuestion}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState({title: '', options: [{}, {}]});\r\n    const [options, setOptions] = useState([{}, {}]);\r\n    const [removeOptionIds, setRemoveOptionIds] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setQuestion(selectedQuestion);\r\n    }, [])\r\n    const onTitleChange = (e) => {\r\n        setQuestion((prev) => ({\r\n            ...prev,\r\n            title: e.target.value,\r\n        }))\r\n    }\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === question.options.length - 1 && e.target.value.length > 0) {\r\n            setQuestion((prev) => ({\r\n                ...prev,\r\n                options: [...prev.options, {}]\r\n            }))\r\n        }\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((option, i) => {\r\n                if (i === index) {\r\n                    return {\r\n                        ...option,\r\n                        content: e.target.value,\r\n                    }\r\n                }\r\n                return option;\r\n            })\r\n        }))\r\n    }\r\n    const onSaveOption = async () => {\r\n        //check question have title\r\n        if (!question || !question.title || question.title.length === 0) {\r\n            return toast({\r\n                title: `Your question does not have title!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        //check question have question\r\n        if (!question.options[0] || !question.options[0].content || !question.options[0].content.length === 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 or 2 options!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n\r\n        let score = 0;\r\n        for (const option of question.options) {\r\n            if (option && option.score) {\r\n                score += option.score;\r\n            }\r\n        }\r\n        if (score === 0) {\r\n            return toast({\r\n                title: `Your question must have at least 1 true option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n        }\r\n        let modifiedQuestion = {\r\n            ...question,\r\n            options: question.options.filter((option) => option.content && option.content.length > 0)\r\n        };\r\n        let tmpQuestions = quiz.questions;\r\n        tmpQuestions = tmpQuestions.map(item => item.id === selectedQuestion.id ? modifiedQuestion : item);\r\n        console.log(tmpQuestions)\r\n        setQuiz((prev) => ({\r\n            ...prev,\r\n            questions: [...tmpQuestions]\r\n        }))\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setQuestion({\r\n                    title: '',\r\n                    options: [{}, {}]\r\n                })\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text>Edit Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n                            {/*QUESTION TITLE INPUT*/}\r\n                            <Textarea\r\n                                value={question && question.title}\r\n                                // onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                onChange={onTitleChange}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                question.options.map((option, index) => {\r\n                                    let handleScoreChange = (e) => {\r\n                                        setQuestion((prev) => (\r\n                                            {\r\n                                                ...prev,\r\n                                                options: prev.options\r\n                                                    .map((option, i) =>\r\n                                                        i === index ? {\r\n                                                            ...option,\r\n                                                            score: parseFloat(e.target.value)\r\n                                                        } : option)\r\n                                            }\r\n                                        ))\r\n                                    };\r\n                                    const handleRemoveOption = async () => {\r\n                                        // const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/questions/options/${option.id}`\r\n                                        // try {\r\n                                        //     const resp = await axios.delete(url, {\r\n                                        //         headers: {\r\n                                        //             \"Content-Type\": \"application/json\"\r\n                                        //         }\r\n                                        //     });\r\n                                        //     if (resp.status === 200) {\r\n                                        setQuestion((pre) => ({\r\n                                            ...pre,\r\n                                            options: pre.options.filter((item, i) => i !== index)\r\n                                        }))\r\n                                        //     }\r\n                                        // } catch (e) {\r\n                                        //\r\n                                        // }\r\n                                    }\r\n                                    return (\r\n                                        <HStack key={index} w={'100%'}>\r\n                                            <Select\r\n                                                value={option.score ? option.score : 0}\r\n                                                onChange={handleScoreChange}\r\n                                                bg={'gray.200'}\r\n                                                // defaultValue={0}\r\n                                                placeholder='score'\r\n                                                maxW={'100px'}>\r\n                                                {\r\n                                                    [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                        <option key={i} value={item}>{item}</option>\r\n                                                    ))\r\n                                                }\r\n                                            </Select>\r\n                                            <Input\r\n                                                value={option.content && option.content}\r\n                                                borderWidth={(option.score && option.score > 0) ? 1.5 : 1}\r\n                                                borderColor={option.score && option.score > 0 && 'green'}\r\n                                                color={option.score && option.score > 0 && 'green'}\r\n                                                focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                                colorScheme={'blue'}\r\n                                                onChange={(e) => onOptionChange(e, index)}\r\n                                                key={index}\r\n                                                placeholder={\"option\"}/>\r\n                                            <IconButton\r\n                                                onClick={handleRemoveOption}\r\n                                                aria-label={'remove'} icon={<CgRemove/>}/>\r\n                                        </HStack>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setQuestion({\r\n                                title: '',\r\n                                options: [{}, {}]\r\n                            })\r\n                        }}>Close</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;"]},"metadata":{},"sourceType":"module"}