{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\QuizEditor.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Checkbox, CircularProgress, Container, Flex, Heading, HStack, IconButton, Select, SimpleGrid, Spacer, Stack, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AiOutlineTag, BiSave, BsPen, MdArrowDropDown } from \"react-icons/all\";\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\nimport QuizEditDialog from \"./components/QuizEditDialog\";\nimport EditQuestionDialog from \"./components/EditQuestionDialog\";\nimport { AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizEditor = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    quiz,\n    setQuiz,\n    isLoading,\n    setLoading\n  } = useContext(QuizEditContext);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [sort, setSort] = useState('column-reverse'); //\n\n  const [isOpen, setOpen] = useState(false);\n  const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\n  const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\n  const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false); //\n\n  const [size, setSize] = useState('full');\n  const cancelRef = useRef(); //fetch quiz details\n\n  const fetchQuizDetails = async () => {\n    const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/${id}`;\n\n    try {\n      const resp = await axios.get(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n      });\n      resp.status === 200 && setQuiz(resp.data);\n      console.log(resp.data);\n    } catch (e) {\n      console.log(\"Failed to get quiz details with id \" + id);\n    }\n  };\n\n  useEffect(() => {\n    fetchQuizDetails();\n  }, []);\n\n  const handleSaveQuiz = async () => {\n    try {\n      setLoading(true);\n      const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes`;\n      const resp = await axios.post(url, quiz, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }); // setQuiz(resp.data);\n\n      fetchQuizDetails();\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onRemoveQuestion = async (question, index) => {\n    // const url = ``\n    console.log('remove question');\n    console.log(question);\n    console.log(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: 'center',\n      justifyItems: 'center',\n      alignContent: 'center',\n      direction: 'row',\n      children: [/*#__PURE__*/_jsxDEV(VStack, {\n        align: 'center',\n        w: '100%',\n        minH: '100vh',\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          mb: 4,\n          align: 'start',\n          alignSelf: 'start',\n          spacing: 4,\n          color: 'white',\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: 'sm',\n            onClick: () => setShowNewQuestionDialog(true),\n            px: 4,\n            colorScheme: 'linkedin',\n            leftIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 43\n            }, this),\n            children: \"New Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            size: 'sm',\n            onChange: e => {\n              setSort(e.target.value);\n              const reversed = quiz.questions.reverse();\n              setQuiz(prevState => ({ ...prevState,\n                questions: reversed\n              }));\n            },\n            bg: \"tomato\",\n            borderColor: \"tomato\",\n            color: \"white\",\n            maxW: 100,\n            icon: /*#__PURE__*/_jsxDEV(MdArrowDropDown, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 35\n            }, this) // variant=\"filled\"\n            ,\n            defaultValue: sort,\n            placeholder: \"Sort by\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: 'column',\n              children: \"Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 'column-reverse',\n              children: \"Reverse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: sort,\n          children: quiz && quiz.questions.map((question, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              boxShadow: \"sm\",\n              my: 5,\n              borderRadius: \"md\",\n              align: \"start\",\n              textAlign: \"start\",\n              h: \"100%\",\n              bg: 'white',\n              maxW: \"600px\",\n              minW: \"600px\",\n              children: [/*#__PURE__*/_jsxDEV(HStack, {\n                p: 2,\n                bg: \"gray.700\",\n                color: 'white',\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  children: [\"Question \", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  label: \"edit\",\n                  color: \"teal.200\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    bg: 'transparent',\n                    onClick: () => {\n                      setSelectedQuestion(question);\n                      setShowEditQuestionDialog(true);\n                    },\n                    icon: /*#__PURE__*/_jsxDEV(BsPen, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 59\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  color: \"red.500\",\n                  label: \"remove\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: () => {\n                      setOpen(true);\n                      setSelectedQuestion(question);\n                    },\n                    bg: 'transparent',\n                    icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 59\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  label: \"duplicate\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    bg: 'transparent',\n                    icon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 59\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(VStack, {\n                align: \"start\",\n                p: 2,\n                spacing: 5,\n                children: [/*#__PURE__*/_jsxDEV(Container, {\n                  maxW: \"3xl\",\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    maxW: \"3xl\",\n                    children: /*#__PURE__*/_jsxDEV(Text, {\n                      fontWeight: \"medium\",\n                      children: question.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n                  w: \"100%\",\n                  align: \"start\",\n                  columns: 2,\n                  spacing: 2,\n                  children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(Container, {\n                    maxW: \"xl\",\n                    centerContent: true,\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      py: 4,\n                      w: \"100%\",\n                      maxW: \"3xl\",\n                      align: \"start\",\n                      children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                        color: option.score > 0 && 'green',\n                        isChecked: option.score > 0 && true,\n                        colorScheme: option.score > 0 && 'green',\n                        w: \"100%\",\n                        size: \"md\" // disabled={true}\n                        // isChecked={option.isChecked}\n                        ,\n                        children: option.content\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 65\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 198,\n                      columnNumber: 61\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(HStack, {\n                bg: \"gray.200\",\n                p: 1,\n                children: [/*#__PURE__*/_jsxDEV(Select, {\n                  size: \"sm\",\n                  maxW: \"100\",\n                  bg: \"white\",\n                  name: \"queston seconds\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"option1\",\n                    children: \"30 secs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 230,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"option2\",\n                    children: \"15 secs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"option3\",\n                    children: \"45 secs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"sm\",\n                  colorScheme: \"white\",\n                  variant: \"ghost\",\n                  leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineTag, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 59\n                  }, this),\n                  children: \"Tag topics\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this)\n          }, void 0, false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        minW: '300px',\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          w: '100%',\n          p: 4,\n          bg: 'white',\n          h: '300px',\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: quiz && quiz.status ? quiz.status : 0,\n              onChange: e => setQuiz(prevState => ({ ...prevState,\n                status: e.target.value\n              })),\n              size: 'sm',\n              maxW: 20,\n              bg: 'blue.200',\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 0 && 'selected',\n                value: \"0\",\n                children: \"Draft\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 1 && 'selected',\n                value: \"1\",\n                children: \"Private\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 2 && 'selected',\n                value: \"2\",\n                children: \"Public\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            w: '100%',\n            size: 'sm',\n            onClick: () => {\n              setShowQuickEditQuiz(true);\n            },\n            colorScheme: 'teal',\n            leftIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 60\n            }, this),\n            children: quiz && quiz.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleSaveQuiz(),\n            alignSelf: 'end',\n            leftIcon: /*#__PURE__*/_jsxDEV(BiSave, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 57\n            }, this),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NewQuestionDialog, {\n      size: size,\n      setSize: setSize,\n      visible: showNewQuestionDialog,\n      setVisible: setShowNewQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditQuestionDialog, {\n      selectedQuestion: selectedQuestion,\n      setSelectedQuestion: setSelectedQuestion,\n      size: size,\n      setSize: setSize,\n      visible: showEditQuestionDialog,\n      setVisible: setShowEditQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuizEditDialog, {\n      isOpen: showQuickEditQuiz,\n      setOpen: setShowQuickEditQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n      position: 'fixed',\n      bottom: 10,\n      right: '10',\n      zIndex: 800,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        bg: 'teal',\n        color: 'white',\n        icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        bg: 'teal',\n        color: 'white',\n        icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        left: 0,\n        position: 'fixed',\n        top: 0,\n        minW: '100vw',\n        minH: '100vh',\n        zIndex: 100000,\n        bg: 'gray.100',\n        opacity: .5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n        transform: 'translate(50%,-50%)',\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        isIndeterminate: true,\n        color: \"green.300\",\n        zIndex: 100001,\n        align: 'center'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(AlertDialog, {\n      isOpen: isOpen,\n      leastDestructiveRef: cancelRef,\n      onClose: () => setOpen(false),\n      children: /*#__PURE__*/_jsxDEV(AlertDialogOverlay, {\n        children: /*#__PURE__*/_jsxDEV(AlertDialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(AlertDialogHeader, {\n            fontSize: \"lg\",\n            fontWeight: \"bold\",\n            children: \"Remove Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogBody, {\n            children: \"Are you sure? You can't undo this action afterwards.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              ref: cancelRef,\n              onClick: () => setOpen(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"red\",\n              onClick: onRemoveQuestion,\n              ml: 3,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuizEditor, \"+c9MBOpeTbrwWUKbkkjqnn/XzOg=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizEditor;\nexport default QuizEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEditor\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/QuizEditor.js"],"names":["Box","Button","Checkbox","CircularProgress","Container","Flex","Heading","HStack","IconButton","Select","SimpleGrid","Spacer","Stack","Text","Tooltip","VStack","React","useContext","useEffect","useRef","useState","axios","useParams","AddIcon","ArrowDownIcon","ArrowUpIcon","CopyIcon","DeleteIcon","EditIcon","QuizEditContext","AiOutlineTag","BiSave","BsPen","MdArrowDropDown","NewQuestionDialog","QuizEditDialog","EditQuestionDialog","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","QuizEditor","id","quiz","setQuiz","isLoading","setLoading","selectedQuestion","setSelectedQuestion","sort","setSort","isOpen","setOpen","showNewQuestionDialog","setShowNewQuestionDialog","showEditQuestionDialog","setShowEditQuestionDialog","showQuickEditQuiz","setShowQuickEditQuiz","size","setSize","cancelRef","fetchQuizDetails","url","resp","get","headers","localStorage","getItem","status","data","console","log","e","handleSaveQuiz","post","error","response","onRemoveQuestion","question","index","target","value","reversed","questions","reverse","prevState","map","title","options","option","score","content"],"mappings":"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","sourcesContent":["import {\r\n    Box,\r\n    Button, Checkbox, CircularProgress,\r\n    Container, Flex,\r\n    Heading,\r\n    HStack,\r\n    IconButton, Select,\r\n    SimpleGrid,\r\n    Spacer, Stack,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport React, {useContext, useEffect, useRef, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon} from \"@chakra-ui/icons\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AiOutlineTag, BiSave, BsPen, MdArrowDropDown} from \"react-icons/all\";\r\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\r\nimport QuizEditDialog from \"./components/QuizEditDialog\";\r\nimport EditQuestionDialog from \"./components/EditQuestionDialog\";\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\"\r\n\r\nconst QuizEditor = () => {\r\n    const {id} = useParams();\r\n    const {quiz, setQuiz, isLoading, setLoading} = useContext(QuizEditContext);\r\n    const [selectedQuestion, setSelectedQuestion] = useState(null);\r\n    const [sort, setSort] = useState('column-reverse');\r\n    //\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\r\n    const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\r\n    const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false);\r\n    //\r\n    const [size, setSize] = useState('full');\r\n    const cancelRef = useRef();\r\n    //fetch quiz details\r\n    const fetchQuizDetails = async () => {\r\n        const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/${id}`;\r\n        try {\r\n            const resp = await axios.get(url, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n\r\n                }\r\n            })\r\n            resp.status === 200 && setQuiz(resp.data);\r\n            console.log(resp.data)\r\n        } catch (e) {\r\n            console.log(\"Failed to get quiz details with id \" + id);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetchQuizDetails();\r\n    }, [])\r\n\r\n    const handleSaveQuiz = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes`\r\n            const resp = await axios.post(url, quiz, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            // setQuiz(resp.data);\r\n            fetchQuizDetails();\r\n\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const onRemoveQuestion = async (question, index) => {\r\n        // const url = ``\r\n        console.log('remove question')\r\n        console.log(question)\r\n        console.log(index)\r\n    }\r\n    return (\r\n        <>\r\n            <Flex justifyContent={'center'} justifyItems={'center'} alignContent={'center'} direction={'row'}>\r\n                {/*QUESTIONS EDITOR*/}\r\n                <VStack align={'center'} w={'100%'} minH={'100vh'}>\r\n                    <HStack mb={4} align={'start'} alignSelf={'start'} spacing={4} color={'white'}>\r\n\r\n                        <Button size={'sm'} onClick={() => setShowNewQuestionDialog(true)} px={4}\r\n                                colorScheme={'linkedin'}\r\n                                leftIcon={<AddIcon/>}>\r\n                            New Question\r\n                        </Button>\r\n\r\n                        <Select\r\n                            size={'sm'}\r\n                            onChange={(e) => {\r\n                                setSort(e.target.value);\r\n                                const reversed = quiz.questions.reverse();\r\n                                setQuiz((prevState) => ({\r\n                                    ...prevState,\r\n                                    questions: reversed,\r\n                                }))\r\n                                ;\r\n                            }}\r\n                            bg=\"tomato\"\r\n                            borderColor=\"tomato\"\r\n                            color=\"white\"\r\n                            maxW={100}\r\n                            icon={<MdArrowDropDown/>}\r\n                            // variant=\"filled\"\r\n                            defaultValue={sort}\r\n                            placeholder=\"Sort by\">\r\n                            <option value={'column'}>Default</option>\r\n                            <option value={'column-reverse'}>Reverse</option>\r\n                        </Select>\r\n                    </HStack>\r\n                    {/*    QUESTIONS*/}\r\n                    <Stack direction={sort}>\r\n                        {\r\n                            quiz && quiz.questions.map((question, index) => (\r\n                                <>\r\n                                    <Box\r\n                                        key={index}\r\n                                        boxShadow={\"sm\"}\r\n                                        my={5}\r\n                                        borderRadius={\"md\"}\r\n                                        align={\"start\"}\r\n                                        textAlign={\"start\"}\r\n                                        h={\"100%\"}\r\n                                        bg={'white'}\r\n                                        maxW={\"600px\"}\r\n                                        minW={\"600px\"}\r\n                                    >\r\n\r\n                                        <HStack p={2} bg={\"gray.700\"} color={'white'}>\r\n                                            {/*QUESTION INDEX*/}\r\n                                            <Text>Question {index + 1}</Text>\r\n                                            <Spacer/>\r\n                                            <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                                                <IconButton\r\n                                                    bg={'transparent'}\r\n                                                    onClick={() => {\r\n                                                        setSelectedQuestion(question)\r\n\r\n                                                        setShowEditQuestionDialog(true)\r\n                                                    }}\r\n\r\n                                                    icon={<BsPen/>}/>\r\n                                            </Tooltip>\r\n                                            <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                                                <IconButton\r\n                                                    onClick={() => {\r\n                                                        setOpen(true)\r\n                                                        setSelectedQuestion(question)\r\n\r\n                                                    }}\r\n                                                    bg={'transparent'}\r\n                                                    icon={<DeleteIcon/>}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip label={\"duplicate\"}>\r\n                                                <IconButton\r\n                                                    bg={'transparent'}\r\n                                                    icon={<CopyIcon/>}/>\r\n                                            </Tooltip>\r\n                                        </HStack>\r\n                                        {/*QUESTION*/}\r\n                                        <VStack align={\"start\"} p={2} spacing={5}>\r\n                                            {/*QUESTION TITLE*/}\r\n                                            <Container maxW=\"3xl\">\r\n                                                <Box maxW=\"3xl\">\r\n                                                    <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                                                </Box>\r\n                                            </Container>\r\n                                            <SimpleGrid\r\n                                                w={\"100%\"}\r\n                                                align={\"start\"}\r\n                                                columns={2}\r\n                                                spacing={2}\r\n                                            >\r\n                                                {\r\n                                                    question.options.map((option, index) => (\r\n                                                        <Container key={index} maxW=\"xl\" centerContent>\r\n                                                            <Box\r\n                                                                py={4}\r\n                                                                w={\"100%\"}\r\n                                                                maxW=\"3xl\"\r\n                                                                align={\"start\"}\r\n                                                            >\r\n\r\n                                                                <Checkbox\r\n                                                                    color={option.score > 0 && 'green'}\r\n                                                                    isChecked={option.score > 0 && true}\r\n                                                                    colorScheme={option.score > 0 && 'green'}\r\n                                                                    key={index}\r\n                                                                    w={\"100%\"}\r\n                                                                    size={\"md\"}\r\n                                                                    // disabled={true}\r\n                                                                    // isChecked={option.isChecked}\r\n                                                                >\r\n                                                                    {option.content}\r\n                                                                </Checkbox>\r\n                                                            </Box>\r\n                                                        </Container>\r\n                                                    ))\r\n                                                }\r\n                                            </SimpleGrid>\r\n                                        </VStack>\r\n                                        <HStack bg={\"gray.200\"} p={1}>\r\n                                            <Select\r\n                                                size={\"sm\"}\r\n                                                maxW={\"100\"}\r\n                                                bg={\"white\"}\r\n                                                name={\"queston seconds\"}\r\n                                            >\r\n                                                <option value=\"option1\">30 secs</option>\r\n                                                <option value=\"option2\">15 secs</option>\r\n                                                <option value=\"option3\">45 secs</option>\r\n                                            </Select>\r\n                                            <Button\r\n                                                size={\"sm\"}\r\n                                                colorScheme={\"white\"}\r\n                                                variant={\"ghost\"}\r\n                                                leftIcon={<AiOutlineTag/>}\r\n                                            >\r\n                                                Tag topics\r\n                                            </Button>\r\n                                        </HStack>\r\n                                    </Box>\r\n\r\n\r\n                                </>\r\n\r\n                            ))\r\n                        }\r\n                    </Stack>\r\n                </VStack>\r\n\r\n                {/*ACTION SIDEBAR*/}\r\n                <Box minW={'300px'}>\r\n                    <VStack w={'100%'} p={4} bg={'white'} h={'300px'}>\r\n                        {/*PUBLIC*/}\r\n                        <HStack w={'100%'}>\r\n                            <Spacer/>\r\n                            <Select\r\n                                defaultValue={quiz && quiz.status ? quiz.status : 0}\r\n                                onChange={(e) => setQuiz(prevState => ({\r\n                                    ...prevState,\r\n                                    status: e.target.value\r\n                                }))}\r\n                                size={'sm'} maxW={20} bg={'blue.200'}>\r\n                                <option selected={quiz && quiz.status === 0 && 'selected'} value=\"0\">Draft</option>\r\n                                <option selected={quiz && quiz.status === 1 && 'selected'} value=\"1\">Private</option>\r\n                                <option selected={quiz && quiz.status === 2 && 'selected'} value=\"2\">Public</option>\r\n                            </Select>\r\n                        </HStack>\r\n                        {/*    */}\r\n                        <Button\r\n                            w={'100%'}\r\n                            size={'sm'}\r\n                            onClick={() => {\r\n                                setShowQuickEditQuiz(true)\r\n                            }}\r\n                            colorScheme={'teal'} leftIcon={<EditIcon/>}>\r\n                            {quiz && quiz.title}\r\n                        </Button>\r\n                        <Spacer/>\r\n                        <Button\r\n                            onClick={() => handleSaveQuiz()}\r\n                            alignSelf={'end'} leftIcon={<BiSave/>}>Save</Button>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/*DIAlOGS*/}\r\n            <NewQuestionDialog size={size} setSize={setSize}\r\n                               visible={showNewQuestionDialog}\r\n                               setVisible={setShowNewQuestionDialog}/>\r\n            <EditQuestionDialog selectedQuestion={selectedQuestion}\r\n                                setSelectedQuestion={setSelectedQuestion} size={size}\r\n                                setSize={setSize}\r\n                                visible={showEditQuestionDialog}\r\n                                setVisible={setShowEditQuestionDialog}/>\r\n            <QuizEditDialog isOpen={showQuickEditQuiz} setOpen={setShowQuickEditQuiz}/>\r\n\r\n            <HStack position={'fixed'} bottom={10} right={'10'} zIndex={800}>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowUpIcon/>}/>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowDownIcon/>}/>\r\n            </HStack>\r\n\r\n            {\r\n                isLoading && <>\r\n                    <Box\r\n                        left={0}\r\n                        position={'fixed'} top={0} minW={'100vw'} minH={'100vh'} zIndex={100000} bg={'gray.100'}\r\n                        opacity={.5}>\r\n\r\n                    </Box>\r\n                    <CircularProgress\r\n                        transform={\r\n                            'translate(50%,-50%)'\r\n                        }\r\n                        position={'fixed'} top={'50%'}\r\n                        left={'50%'}\r\n                        isIndeterminate color=\"green.300\" zIndex={100001} align={'center'}/>\r\n                </>\r\n            }\r\n\r\n            <AlertDialog\r\n                isOpen={isOpen}\r\n                leastDestructiveRef={cancelRef}\r\n                onClose={() => setOpen(false)}\r\n            >\r\n                <AlertDialogOverlay>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                            Remove Question\r\n                        </AlertDialogHeader>\r\n\r\n                        <AlertDialogBody>\r\n                            Are you sure? You can't undo this action afterwards.\r\n                        </AlertDialogBody>\r\n\r\n                        <AlertDialogFooter>\r\n                            <Button\r\n                                ref={cancelRef}\r\n                                onClick={() => setOpen(false)}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button colorScheme=\"red\"\r\n                                    onClick={onRemoveQuestion}\r\n                                    ml={3}>\r\n                                Delete\r\n                            </Button>\r\n                        </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                </AlertDialogOverlay>\r\n            </AlertDialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuizEditor;"]},"metadata":{},"sourceType":"module"}