{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\edit_quiz\\\\EditQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Box, Button, Center, Checkbox, Container, HStack, Input, Select, Text, Textarea, usePrevious, VStack } from \"@chakra-ui/react\";\nimport { MdArrowDropDown } from \"react-icons/all\";\nimport { useQuiz } from \"../../context/QuizProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditQuestionDialog = ({\n  setVisible\n}) => {\n  _s();\n\n  const {\n    savedQuestions,\n    setSavedQuestions\n  } = useQuiz();\n\n  const randomUID = () => {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  };\n\n  const [question, setQuestion] = useState({\n    title: \"this is question title\",\n    options: [{\n      optionId: randomUID,\n      content: \"this is option 1\"\n    }, {\n      optionId: randomUID,\n      content: \"\"\n    }, {\n      optionId: randomUID,\n      content: \"\"\n    }, {\n      optionId: randomUID,\n      content: \"\"\n    }]\n  }); //on title change\n\n  const onQuizTitleChange = e => {\n    setQuestion(prevState => ({ ...prevState,\n      title: e.target.value\n    }));\n  };\n\n  const onOptionChange = (e, i) => {\n    setQuestion(prevState => ({ ...prevState,\n      options: prevState.options.map((savedOption, index) => {\n        if (i === index) {\n          return { ...prevState.options[i],\n            content: e.target.value\n          };\n        }\n\n        return savedOption;\n      })\n    }));\n  };\n\n  const onAddOption = () => {\n    setQuestion(prevState => ({ ...prevState,\n      title: prevState.title,\n      options: [...prevState.options, {\n        content: \"\"\n      }]\n    }));\n  };\n\n  const onCheckBoxChange = (e, optionID) => {\n    setQuestion(prevState => ({ ...prevState,\n      options: prevState.options.map((savedOption, index) => {\n        if (optionID === index) {\n          return { ...prevState.options[optionID],\n            isChecked: e.target.checked\n          };\n        }\n\n        return savedOption;\n      })\n    }));\n  };\n\n  function onScoreChange(e, optionId) {\n    setQuestion(prevState => ({ ...prevState,\n      options: prevState.options.map((savedOption, index) => {\n        if (optionId === index) {\n          return { ...prevState.options[optionId],\n            score: e.target.value\n          };\n        }\n\n        return savedOption;\n      })\n    }));\n  }\n\n  const handleBtnSaveClicked = () => {\n    // setQuestion(prevState => ({\n    //     ...prevState,\n    //     options: prevState.options.filter(item => item.content.length > 0),\n    // }))\n    let score = 0;\n    question.options.forEach(item => {\n      if (item.score != null) {\n        score += item.score;\n      }\n    });\n\n    if (score > 0) {\n      // setTimeout(() => {\n      //     setVisible(false);\n      //     setSavedQuestions(prev => [...prev, question]);\n      // }, 1000)\n      setVisible(false);\n      setSavedQuestions(prev => [...prev, { ...question,\n        options: question.options.filter(item => item.content.length > 0)\n      }]);\n    } else {\n      setVisible(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      onClick: () => {\n        console.log(\"HAHHAHA\");\n      },\n      position: \"fixed\",\n      zIndex: 9000,\n      top: 0,\n      bg: \"gray.300\",\n      align: \"center\",\n      alignItems: \"center\",\n      opacity: 0.4,\n      justifyContent: \"center\",\n      width: \"100vw\",\n      height: \"100vh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      boxShadow: \"md\",\n      borderRadius: \"md\",\n      position: \"fixed\",\n      zIndex: 9001,\n      top: \"50%\",\n      right: \"50%\",\n      transform: \"translate(50%,-50%)\",\n      minW: \"700px\",\n      bg: \"white\",\n      maxW: \"700px\",\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          bg: \"gray.700\",\n          p: 5,\n          w: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            color: \"white\",\n            fontWeight: \"medium\",\n            children: [\"Question \", savedQuestions.length + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          p: 2,\n          w: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(Textarea, {\n            onChange: e => onQuizTitleChange(e),\n            value: question.title,\n            css: {\n              \"&::-webkit-scrollbar\": {\n                width: \"0px\",\n                background: \"transparent\"\n              }\n            },\n            resize: \"none\",\n            overflow: \"hidden\",\n            placeholder: \"Type your question here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          p: 4,\n          spacing: 4,\n          w: \"100%\",\n          children: question.options.map((item, i) => /*#__PURE__*/_jsxDEV(HStack, {\n            w: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n              onChange: e => onCheckBoxChange(e, i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: question.options[i].content,\n              onChange: e => onOptionChange(e, i),\n              wordBreak: \"break-all\",\n              wordwrap: \"break-word\" // isFullWidth\n              ,\n              size: \"md\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              bg: \"teal\",\n              color: \"gray.800\",\n              onChange: e => onScoreChange(e, i),\n              isDisabled: item.isChecked == null || item.isChecked === false,\n              defaultValue: 0,\n              icon: /*#__PURE__*/_jsxDEV(MdArrowDropDown, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 43\n              }, this),\n              iconSize: 0,\n              maxW: 70,\n              size: \"xs\",\n              variant: \"outline\",\n              children: [0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2].map((score, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: score,\n                children: score\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          align: \"start\",\n          p: 2,\n          w: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onAddOption,\n            size: \"sm\",\n            variant: \"outline\",\n            alignSelf: \"start\",\n            colorScheme: \"teal\",\n            children: \"Add answer option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          w: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            p: 2,\n            bg: \"gray.700\",\n            justifyContent: \"end\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setVisible(false);\n              },\n              size: \"sm\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleBtnSaveClicked,\n              size: \"sm\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditQuestionDialog, \"jo18Xp7ZamZZe44SriXJAx/sDFA=\", false, function () {\n  return [useQuiz];\n});\n\n_c = EditQuestionDialog;\nexport default EditQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/edit_quiz/EditQuestionDialog.js"],"names":["React","useState","Box","Button","Center","Checkbox","Container","HStack","Input","Select","Text","Textarea","usePrevious","VStack","MdArrowDropDown","useQuiz","EditQuestionDialog","setVisible","savedQuestions","setSavedQuestions","randomUID","Math","floor","random","toString","substring","question","setQuestion","title","options","optionId","content","onQuizTitleChange","e","prevState","target","value","onOptionChange","i","map","savedOption","index","onAddOption","onCheckBoxChange","optionID","isChecked","checked","onScoreChange","score","handleBtnSaveClicked","forEach","item","prev","filter","length","console","log","width","background"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Checkbox,\r\n    Container,\r\n    HStack,\r\n    Input,\r\n    Select,\r\n    Text,\r\n    Textarea,\r\n    usePrevious,\r\n    VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { MdArrowDropDown } from \"react-icons/all\";\r\nimport { useQuiz } from \"../../context/QuizProvider\";\r\n\r\nconst EditQuestionDialog = ({ setVisible }) => {\r\n    const { savedQuestions, setSavedQuestions } = useQuiz();\r\n    const randomUID = () => {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16)\r\n            .substring(1);\r\n    };\r\n    const [question, setQuestion] = useState({\r\n        title: \"this is question title\",\r\n        options: [\r\n            { optionId: randomUID, content: \"this is option 1\" },\r\n            { optionId: randomUID, content: \"\" },\r\n            { optionId: randomUID, content: \"\" },\r\n            { optionId: randomUID, content: \"\" },\r\n        ],\r\n    });\r\n\r\n    //on title change\r\n    const onQuizTitleChange = (e) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            title: e.target.value,\r\n        }));\r\n    };\r\n\r\n    const onOptionChange = (e, i) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (i === index) {\r\n                    return { ...prevState.options[i], content: e.target.value };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    };\r\n\r\n    const onAddOption = () => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            title: prevState.title,\r\n            options: [...prevState.options, { content: \"\" }],\r\n        }));\r\n    };\r\n\r\n    const onCheckBoxChange = (e, optionID) => {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (optionID === index) {\r\n                    return {\r\n                        ...prevState.options[optionID],\r\n                        isChecked: e.target.checked,\r\n                    };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    };\r\n\r\n    function onScoreChange(e, optionId) {\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: prevState.options.map((savedOption, index) => {\r\n                if (optionId === index) {\r\n                    return {\r\n                        ...prevState.options[optionId],\r\n                        score: e.target.value,\r\n                    };\r\n                }\r\n                return savedOption;\r\n            }),\r\n        }));\r\n    }\r\n\r\n    const handleBtnSaveClicked = () => {\r\n        // setQuestion(prevState => ({\r\n        //     ...prevState,\r\n        //     options: prevState.options.filter(item => item.content.length > 0),\r\n        // }))\r\n\r\n        let score = 0;\r\n        question.options.forEach((item) => {\r\n            if (item.score != null) {\r\n                score += item.score;\r\n            }\r\n        });\r\n\r\n        if (score > 0) {\r\n            // setTimeout(() => {\r\n            //     setVisible(false);\r\n            //     setSavedQuestions(prev => [...prev, question]);\r\n            // }, 1000)\r\n            setVisible(false);\r\n            setSavedQuestions((prev) => [\r\n                ...prev,\r\n                {\r\n                    ...question,\r\n                    options: question.options.filter(\r\n                        (item) => item.content.length > 0\r\n                    ),\r\n                },\r\n            ]);\r\n        } else {\r\n            setVisible(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                onClick={() => {\r\n                    console.log(\"HAHHAHA\");\r\n                }}\r\n                position={\"fixed\"}\r\n                zIndex={9000}\r\n                top={0}\r\n                bg={\"gray.300\"}\r\n                align={\"center\"}\r\n                alignItems={\"center\"}\r\n                opacity={0.4}\r\n                justifyContent={\"center\"}\r\n                width={\"100vw\"}\r\n                height={\"100vh\"}\r\n            ></Box>\r\n\r\n            <Box\r\n                boxShadow={\"md\"}\r\n                borderRadius={\"md\"}\r\n                position={\"fixed\"}\r\n                zIndex={9001}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                minW={\"700px\"}\r\n                bg={\"white\"}\r\n                maxW={\"700px\"}\r\n            >\r\n                <VStack>\r\n                    <HStack bg={\"gray.700\"} p={5} w={\"100%\"}>\r\n                        <Text color={\"white\"} fontWeight={\"medium\"}>\r\n                            Question {savedQuestions.length + 1}\r\n                        </Text>\r\n                    </HStack>\r\n                    {/*Question input title*/}\r\n                    <Box p={2} w={\"100%\"}>\r\n                        <Textarea\r\n                            onChange={(e) => onQuizTitleChange(e)}\r\n                            value={question.title}\r\n                            css={{\r\n                                \"&::-webkit-scrollbar\": {\r\n                                    width: \"0px\",\r\n                                    background: \"transparent\",\r\n                                },\r\n                            }}\r\n                            resize={\"none\"}\r\n                            overflow={\"hidden\"}\r\n                            placeholder={\"Type your question here\"}\r\n                        />\r\n                    </Box>\r\n                    <VStack p={4} spacing={4} w={\"100%\"}>\r\n                        {question.options.map((item, i) => (\r\n                            <HStack key={i} w={\"100%\"}>\r\n                                <Checkbox\r\n                                    onChange={(e) => onCheckBoxChange(e, i)}\r\n                                />\r\n                                <Input\r\n                                    value={question.options[i].content}\r\n                                    onChange={(e) => onOptionChange(e, i)}\r\n                                    wordBreak={\"break-all\"}\r\n                                    wordwrap={\"break-word\"}\r\n                                    // isFullWidth\r\n                                    size={\"md\"}\r\n                                />\r\n                                <Select\r\n                                    bg={\"teal\"}\r\n                                    color={\"gray.800\"}\r\n                                    onChange={(e) => onScoreChange(e, i)}\r\n                                    isDisabled={\r\n                                        item.isChecked == null ||\r\n                                        item.isChecked === false\r\n                                    }\r\n                                    defaultValue={0}\r\n                                    icon={<MdArrowDropDown />}\r\n                                    iconSize={0}\r\n                                    maxW={70}\r\n                                    size=\"xs\"\r\n                                    variant=\"outline\"\r\n                                >\r\n                                    {[\r\n                                        0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75,\r\n                                        2,\r\n                                    ].map((score, index) => (\r\n                                        <option key={index} value={score}>\r\n                                            {score}\r\n                                        </option>\r\n                                    ))}\r\n                                </Select>\r\n                            </HStack>\r\n                        ))}\r\n                    </VStack>\r\n                    {/*BUTTON ADD ANSWER*/}\r\n                    <Box align={\"start\"} p={2} w={\"100%\"}>\r\n                        <Button\r\n                            onClick={onAddOption}\r\n                            size={\"sm\"}\r\n                            variant={\"outline\"}\r\n                            alignSelf={\"start\"}\r\n                            colorScheme={\"teal\"}\r\n                        >\r\n                            Add answer option\r\n                        </Button>\r\n                    </Box>\r\n                    {/*BUTTON SAVE*/}\r\n                    <Box w={\"100%\"}>\r\n                        <HStack p={2} bg={\"gray.700\"} justifyContent={\"end\"}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setVisible(false);\r\n                                }}\r\n                                size={\"sm\"}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={handleBtnSaveClicked} size={\"sm\"}>\r\n                                Save\r\n                            </Button>\r\n                        </HStack>\r\n                    </Box>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;\r\n"]},"metadata":{},"sourceType":"module"}