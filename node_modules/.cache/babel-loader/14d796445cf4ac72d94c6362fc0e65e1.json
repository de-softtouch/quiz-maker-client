{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\grade\\\\GradeQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Checkbox, Container, Divider, Flex, Heading, HStack, IconButton, Progress, SimpleGrid, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport SettingDialog from \"./SettingDialog\";\nimport { ArrowDownIcon, ArrowUpIcon, TimeIcon } from \"@chakra-ui/icons\";\nimport { useQuiz } from \"../../context/QuizProvider\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GradeQuiz = () => {\n  _s();\n\n  const history = useHistory(); //get id in params\n\n  const {\n    id\n  } = useParams();\n  const pageRef = useRef(null);\n  const {\n    foundedQuiz,\n    setFoundedQuiz\n  } = useQuiz();\n  const [showSetting, setShowSetting] = useState(true);\n  const [progress, setProgress] = useState(0); // const [userAnswers, setUserAnswers] = useState(new Map([\n  //     [100, [1, 2, 3]],\n  //     [2, [5, 23, 31]],\n  // ]));\n\n  const [userAnswers, setUserAnswers] = useState(new Map([]));\n  useEffect(() => {\n    setShowSetting(true);\n    fetchQuiz();\n\n    if (history.action === \"POP\") {\n      alert(\"Are you sure to exit\");\n    }\n\n    return () => {\n      if (history.action === \"POP\") {\n        alert(\"Are you sure to exit\");\n      }\n    }; // console.log(userAnswers)\n  }, []);\n\n  const fetchQuiz = async () => {\n    try {\n      const resp = await axios.get(`http://localhost:8080/api/v1/public/quiz?code=${id}`);\n\n      if (resp.status === 200) {\n        setFoundedQuiz(resp.data);\n      }\n    } catch (e) {}\n  }; // [100, [1, 2, 3]],\n  //     [2, [5, 23, 31]],\n\n\n  function onSelectedOption(e, optionId, questionId) {\n    let tempUserAnswers = userAnswers;\n    let isChecked = e.target.checked;\n\n    if (isChecked) {\n      //get options by questionID key\n      let options = tempUserAnswers.get(questionId); //create new array if get options by questionId key null\n\n      if (options == null) {\n        options = [optionId]; //update progress\n      } //push new optionID if exist questionId key\n      else {\n        options.push(optionId);\n      }\n\n      tempUserAnswers.set(questionId, options);\n    } else {\n      let options = tempUserAnswers.get(questionId);\n\n      if (options == null) {\n        options = [];\n      } else {\n        //remove optionId\n        options = options.filter(oId => oId !== optionId); //alse remove optionId key if questions empty\n\n        if (options == null || options.length === 0) {\n          tempUserAnswers.delete(questionId);\n        } else {\n          tempUserAnswers.set(questionId, options);\n        }\n      }\n    } //update userAnswers state\n\n\n    setUserAnswers(new Map(tempUserAnswers.entries()));\n    setProgress(userAnswers.size / foundedQuiz.questions.length * 100); // if (userAnswers != null && userAnswers.size === 0) {\n    //     console.log(\"Answer = 0\")\n    //     let tmp = ((1) / foundedQuiz.questions.length) * 100;\n    //     setProgress(tmp);\n    //     console.log(tmp);\n    // } else {\n    //     if (userAnswers.has(questionId)) {\n    //         console.log(\"Ole question\")\n    //     } else {\n    //         console.log(\"New question addedd\")\n    //         let tmp = ((userAnswers.size + 1) / foundedQuiz.questions.length) * 100;\n    //         setProgress(tmp);\n    //     }\n    //\n    // }\n    // //         setUserAnswers(prevState =>\n    // //             new Map([...prevState, [questionId,optionId]])\n    // //         );\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: pageRef,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      minH: '100vh',\n      bg: 'gray.100',\n      p: 10,\n      align: 'center',\n      children: [showSetting && /*#__PURE__*/_jsxDEV(SettingDialog, {\n        setShow: setShowSetting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }, this), !showSetting && /*#__PURE__*/_jsxDEV(Box, {\n        m: 10,\n        bg: 'white',\n        borderRadius: 'md',\n        boxShadow: 'xl',\n        minH: '100vh',\n        maxW: '860px',\n        p: 10,\n        children: [/*#__PURE__*/_jsxDEV(VStack, {\n          position: 'relative',\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            pb: 10,\n            fontSize: 25,\n            children: foundedQuiz.title != null ? foundedQuiz.title : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontWeight: 'medium',\n            color: 'teal',\n            letterSpacing: 1,\n            fontStyle: 'italic',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            m: 5,\n            children: [foundedQuiz.questions.length, \" Questions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 33\n          }, this), foundedQuiz.questions.map((question, i) => /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            align: 'start',\n            textAlign: 'start',\n            p: 2,\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(Container, {\n              w: '100%',\n              maxW: \"4xl\",\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                maxW: \"4xl\",\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 'medium',\n                  children: [i + 1, \". \", question.title, \" \\\\t QuestionID : \", question.questionId]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              w: '100%',\n              columns: 2,\n              spacing: 2,\n              align: 'start',\n              textAlign: 'start',\n              children: question.options.map((option, i) => /*#__PURE__*/_jsxDEV(Container, {\n                w: '100%',\n                minW: 300,\n                maxW: \"xl\",\n                align: 'start',\n                textAlign: 'start',\n                alignItems: 'start',\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  padding: \"1\",\n                  maxW: \"3xl\",\n                  children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    onChange: e => onSelectedOption(e, option.optionId, question.questionId),\n                    value: option.optionId,\n                    colorScheme: 'teal',\n                    size: 'md',\n                    children: [option.content, \" \\\\t OptionID : \", option.optionId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 65\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 61\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 57\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 45\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 41\n          }, this)), /*#__PURE__*/_jsxDEV(Box, {\n            py: 5,\n            align: 'end',\n            alignSelf: 'end',\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              alignSelf: 'end',\n              size: 'lg',\n              colorScheme: 'teal',\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          zIndex: 100,\n          position: 'fixed',\n          bottom: 10,\n          right: 20,\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to top\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => window.scrollTo(0, 0),\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to bottom\",\n            children: /*#__PURE__*/_jsxDEV(IconButton // aria-label={\"\"}\n            , {\n              onClick: () => {\n                pageRef.current.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"end\",\n                  inline: \"nearest\"\n                });\n              },\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          p: 1,\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          m: 10,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: 'md',\n            colorScheme: 'teal',\n            variant: 'outline',\n            leftIcon: /*#__PURE__*/_jsxDEV(TimeIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 104\n            }, this),\n            children: \"23:00 left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Progress, {\n      transition: \"all 0.3s ease\" // alignSelf={'start'}\n      ,\n      size: 'sm' // left={'50%'}\n      // transform={'translateX(-50%)'}\n      ,\n      minW: '100vw',\n      colorScheme: 'pink',\n      position: 'fixed',\n      bottom: 0,\n      value: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GradeQuiz, \"/eoHkP6YzoWHpL9vn6K0nMVkBNY=\", false, function () {\n  return [useHistory, useParams, useQuiz];\n});\n\n_c = GradeQuiz;\nexport default GradeQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"GradeQuiz\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/grade/GradeQuiz.js"],"names":["React","useEffect","useRef","useState","Box","Button","Checkbox","Container","Divider","Flex","Heading","HStack","IconButton","Progress","SimpleGrid","Text","Tooltip","VStack","useHistory","useParams","SettingDialog","ArrowDownIcon","ArrowUpIcon","TimeIcon","useQuiz","axios","GradeQuiz","history","id","pageRef","foundedQuiz","setFoundedQuiz","showSetting","setShowSetting","progress","setProgress","userAnswers","setUserAnswers","Map","fetchQuiz","action","alert","resp","get","status","data","e","onSelectedOption","optionId","questionId","tempUserAnswers","isChecked","target","checked","options","push","set","filter","oId","length","delete","entries","size","questions","title","map","question","i","option","content","window","scrollTo","current","scrollIntoView","behavior","block","inline"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox, Container,\r\n    Divider,\r\n    Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    Progress,\r\n    SimpleGrid,\r\n    Text, Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport SettingDialog from \"./SettingDialog\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../context/QuizProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst GradeQuiz = () => {\r\n\r\n    const history = useHistory();\r\n    //get id in params\r\n    const {id} = useParams();\r\n    const pageRef = useRef(null);\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const [showSetting, setShowSetting] = useState(true);\r\n\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    // const [userAnswers, setUserAnswers] = useState(new Map([\r\n    //     [100, [1, 2, 3]],\r\n    //     [2, [5, 23, 31]],\r\n    // ]));\r\n    const [userAnswers, setUserAnswers] = useState(new Map([]));\r\n\r\n    useEffect(() => {\r\n        setShowSetting(true);\r\n        fetchQuiz();\r\n        if (history.action === \"POP\") {\r\n            alert(\"Are you sure to exit\");\r\n        }\r\n        return () => {\r\n            if (history.action === \"POP\") {\r\n                alert(\"Are you sure to exit\");\r\n            }\r\n        }\r\n        // console.log(userAnswers)\r\n    }, []);\r\n    const fetchQuiz = async () => {\r\n        try {\r\n            const resp = await axios.get(`http://localhost:8080/api/v1/public/quiz?code=${id}`);\r\n            if (resp.status === 200) {\r\n                setFoundedQuiz(resp.data);\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    // [100, [1, 2, 3]],\r\n    //     [2, [5, 23, 31]],\r\n\r\n    function onSelectedOption(e, optionId, questionId) {\r\n\r\n        let tempUserAnswers = userAnswers;\r\n        let isChecked = e.target.checked;\r\n\r\n        if (isChecked) {\r\n            //get options by questionID key\r\n            let options = tempUserAnswers.get(questionId);\r\n            //create new array if get options by questionId key null\r\n            if (options == null) {\r\n                options = [optionId];\r\n                //update progress\r\n\r\n            }\r\n            //push new optionID if exist questionId key\r\n            else {\r\n                options.push(optionId);\r\n            }\r\n            tempUserAnswers.set(questionId, options);\r\n        } else {\r\n            let options = tempUserAnswers.get(questionId);\r\n            if (options == null) {\r\n                options = [];\r\n            } else {\r\n                //remove optionId\r\n                options = options.filter(oId => oId !== optionId);\r\n                //alse remove optionId key if questions empty\r\n                if (options == null || options.length === 0) {\r\n\r\n                    tempUserAnswers.delete(questionId)\r\n                } else {\r\n                    tempUserAnswers.set(questionId, options);\r\n                }\r\n            }\r\n        }\r\n        //update userAnswers state\r\n        setUserAnswers(new Map(tempUserAnswers.entries()));\r\n        setProgress((userAnswers.size / foundedQuiz.questions.length) * 100)\r\n\r\n\r\n        // if (userAnswers != null && userAnswers.size === 0) {\r\n        //     console.log(\"Answer = 0\")\r\n        //     let tmp = ((1) / foundedQuiz.questions.length) * 100;\r\n        //     setProgress(tmp);\r\n        //     console.log(tmp);\r\n        // } else {\r\n        //     if (userAnswers.has(questionId)) {\r\n        //         console.log(\"Ole question\")\r\n        //     } else {\r\n        //         console.log(\"New question addedd\")\r\n        //         let tmp = ((userAnswers.size + 1) / foundedQuiz.questions.length) * 100;\r\n        //         setProgress(tmp);\r\n        //     }\r\n        //\r\n        // }\r\n\r\n        // //         setUserAnswers(prevState =>\r\n        // //             new Map([...prevState, [questionId,optionId]])\r\n        // //         );\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div ref={pageRef}>\r\n            <Box\r\n                minH={'100vh'}\r\n                bg={'gray.100'}\r\n                p={10}\r\n                align={'center'}>\r\n\r\n                {/*<Box minH={'80px'}></Box>*/}\r\n                {showSetting && <SettingDialog setShow={setShowSetting}/>}\r\n                {/*A4*/}\r\n                {\r\n                    !showSetting && (\r\n                        <Box\r\n                            m={10}\r\n                            bg={'white'}\r\n                            borderRadius={'md'}\r\n                            boxShadow={'xl'}\r\n                            minH={'100vh'}\r\n                            maxW={'860px'}\r\n                            p={10}>\r\n                            <VStack position={'relative'}>\r\n                                {/*\r\n                        QUIZ TITLE\r\n                        */}\r\n                                <Heading\r\n                                    pb={10}\r\n                                    fontSize={25}>\r\n                                    {foundedQuiz.title != null ? foundedQuiz.title : ''}\r\n                                </Heading>\r\n                                <Text\r\n                                    fontWeight={'medium'}\r\n                                    color={'teal'}\r\n                                    letterSpacing={1}\r\n                                    fontStyle={'italic'}\r\n                                    position={'absolute'}\r\n                                    top={0}\r\n                                    right={0}\r\n                                    m={5}>\r\n                                    {foundedQuiz.questions.length} Questions\r\n                                </Text>\r\n                                {/*QUESTIONS*/}\r\n                                {\r\n                                    foundedQuiz.questions.map((question, i) => (\r\n                                        <VStack\r\n                                            w={'100%'}\r\n                                            align={'start'}\r\n                                            textAlign={'start'\r\n                                            } key={i}\r\n                                            p={2}\r\n                                            spacing={5}>\r\n                                            {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                            <Container w={'100%'} maxW=\"4xl\">\r\n                                                <Box maxW=\"4xl\">\r\n                                                    <Text fontWeight={'medium'}>\r\n                                                        {i + 1}. {question.title} \\t QuestionID : {question.questionId}\r\n                                                    </Text>\r\n                                                </Box>\r\n                                            </Container>\r\n                                            {/*OPTIONS*/}\r\n                                            <SimpleGrid\r\n                                                w={'100%'}\r\n                                                columns={2}\r\n                                                spacing={2}\r\n                                                align={'start'}\r\n                                                textAlign={'start'}>\r\n                                                {\r\n                                                    question.options.map((option, i) => (\r\n                                                        <Container\r\n                                                            w={'100%'}\r\n                                                            minW={300}\r\n                                                            key={i}\r\n                                                            maxW=\"xl\"\r\n                                                            align={'start'}\r\n                                                            textAlign={'start'}\r\n                                                            alignItems={'start'}\r\n                                                        >\r\n                                                            <Box padding=\"1\" maxW=\"3xl\">\r\n                                                                <Checkbox\r\n                                                                    onChange={(e) => onSelectedOption(e, option.optionId, question.questionId)}\r\n                                                                    value={option.optionId}\r\n                                                                    colorScheme={'teal'}\r\n                                                                    size={'md'}>\r\n                                                                    {option.content} \\t OptionID : {option.optionId}\r\n                                                                </Checkbox>\r\n                                                            </Box>\r\n                                                        </Container>\r\n                                                    ))\r\n                                                }\r\n                                            </SimpleGrid>\r\n                                            <Divider/>\r\n                                        </VStack>\r\n                                    ))\r\n                                }\r\n                                {/* Submit button*/}\r\n                                <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                    <Button alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                                </Box>\r\n                            </VStack>\r\n\r\n                            {/* FIXED CONTENTS*/}\r\n                            <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                                <Tooltip label={\"Scroll to top\"}>\r\n                                    <IconButton\r\n                                        onClick={() => window.scrollTo(0, 0)}\r\n                                        colorScheme={'teal'}\r\n                                        icon={<ArrowUpIcon/>}/>\r\n                                </Tooltip>\r\n                                <Tooltip label={\"Scroll to bottom\"}>\r\n                                    <IconButton\r\n                                        // aria-label={\"\"}\r\n                                        onClick={() => {\r\n                                            pageRef.current.scrollIntoView({\r\n                                                behavior: \"smooth\",\r\n                                                block: \"end\",\r\n                                                inline: \"nearest\"\r\n                                            })\r\n                                        }}\r\n                                        colorScheme={'teal'}\r\n                                        icon={<ArrowDownIcon/>}/>\r\n                                </Tooltip>\r\n                            </HStack>\r\n                            <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                                <Button size={'md'} colorScheme={'teal'} variant={'outline'} leftIcon={<TimeIcon/>}>23:00\r\n                                    left</Button>\r\n                            </Flex>\r\n                            {/*<Box*/}\r\n                            {/*    bg={'red'}*/}\r\n                            {/*    minW={'100vw'}*/}\r\n                            {/*    w={'100%'}*/}\r\n                            {/*    position={'fixed'}*/}\r\n                            {/*    bottom={0}*/}\r\n                            {/*    bg={'blue'}*/}\r\n                            {/*    align={'start'}*/}\r\n                            {/*>*/}\r\n                            {/*    <Progress*/}\r\n                            {/*        // alignSelf={'start'}*/}\r\n                            {/*        size={'sm'}*/}\r\n                            {/*        // left={'50%'}*/}\r\n                            {/*        // transform={'translateX(-50%)'}*/}\r\n                            {/*        minW={'860px'}*/}\r\n                            {/*        // maxW={'860px'}*/}\r\n                            {/*        // minW={'100vw'}*/}\r\n                            {/*        colorScheme={'red'}*/}\r\n                            {/*        maxW={'860px'}*/}\r\n                            {/*        position={'fixed'}*/}\r\n                            {/*        bottom={0}*/}\r\n                            {/*        value={progress}/>*/}\r\n                            {/*</Box>*/}\r\n\r\n                        </Box>\r\n\r\n\r\n                    )\r\n                }\r\n\r\n\r\n            </Box>\r\n            <Progress\r\n\r\n                transition={\r\n                    \"all 0.3s ease\"\r\n                }\r\n                // alignSelf={'start'}\r\n                size={'sm'}\r\n                // left={'50%'}\r\n                // transform={'translateX(-50%)'}\r\n                minW={'100vw'}\r\n                colorScheme={'pink'}\r\n                position={'fixed'}\r\n                bottom={0}\r\n                value={progress}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GradeQuiz;"]},"metadata":{},"sourceType":"module"}