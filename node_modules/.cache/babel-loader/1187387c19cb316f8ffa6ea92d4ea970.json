{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\public\\\\start_quiz\\\\StartQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Button, Checkbox, Container, Divider, Flex, Heading, HStack, IconButton, SimpleGrid, Text, Tooltip, VStack, AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay } from \"@chakra-ui/react\";\nimport { ArrowDownIcon, ArrowUpIcon, TimeIcon } from \"@chakra-ui/icons\";\nimport { useQuiz } from \"../../../context/QuizProvider\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport quizApi from \"../../../api/quizApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StartQuiz = () => {\n  _s();\n\n  const {\n    foundedQuiz,\n    setFoundedQuiz\n  } = useQuiz();\n  const {\n    code\n  } = useParams();\n  const [isLoading, setLoading] = useState(true);\n  const [isOpen, setOption] = useState(false);\n  useEffect(() => {\n    const getQuizDetails = async () => {\n      setLoading(true);\n\n      try {\n        const data = await quizApi.getQuizDetailsByCode(code);\n        setFoundedQuiz(data);\n        setLoading(false);\n        console.log(data);\n      } catch (e) {\n        setLoading(false);\n        console.log('Failed to get quiz details');\n      }\n    };\n\n    getQuizDetails();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AlertDialog, {\n      isOpen: isOpen,\n      leastDestructiveRef: cancelRef,\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxDEV(AlertDialogOverlay, {\n        children: /*#__PURE__*/_jsxDEV(AlertDialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(AlertDialogHeader, {\n            fontSize: \"lg\",\n            fontWeight: \"bold\",\n            children: \"Delete Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogBody, {\n            children: \"Are you sure? You can't undo this action afterwards.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              ref: cancelRef,\n              onClick: onClose,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"red\",\n              onClick: onClose,\n              ml: 3,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      minH: '100vh',\n      bg: 'blue.100',\n      p: 10,\n      align: 'center',\n      children: !isLoading && /*#__PURE__*/_jsxDEV(Box, {\n        bg: 'white',\n        borderRadius: 'md',\n        boxShadow: 'xl',\n        minH: '100vh',\n        maxW: '860px',\n        p: 10,\n        children: [/*#__PURE__*/_jsxDEV(VStack, {\n          position: 'relative',\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            pb: 10,\n            color: 'purple.600',\n            fontSize: 30,\n            children: foundedQuiz != null ? foundedQuiz.title : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontWeight: 'medium',\n            color: 'teal',\n            letterSpacing: 1,\n            fontStyle: 'italic',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            m: 5,\n            children: [foundedQuiz.questions && foundedQuiz.questions.length, \" Questions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), foundedQuiz.questions.map((question, i) => /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            align: 'start',\n            textAlign: 'start',\n            p: 2,\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(Container, {\n              w: '100%',\n              maxW: \"4xl\",\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                maxW: \"4xl\",\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 'medium',\n                  fontSize: 20,\n                  color: 'purple.900',\n                  children: [i + 1, \". \", question.title, \" \\\\t QuestionID : \", question.questionId]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              w: '100%',\n              columns: 2,\n              spacing: 4,\n              align: 'start',\n              textAlign: 'start',\n              children: question.options.map((option, i) => /*#__PURE__*/_jsxDEV(Container, {\n                w: '100%',\n                minW: 300,\n                // maxW=\"xl\"\n                align: 'start',\n                textAlign: 'start',\n                alignItems: 'start',\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  padding: 1 // maxW=\"3xl\"\n                  ,\n                  children: /*#__PURE__*/_jsxDEV(Checkbox // onChange={(e) => onSelectedOption(e, option.optionId, question.questionId)}\n                  , {\n                    value: option.optionId,\n                    colorScheme: 'teal',\n                    size: 'lg',\n                    children: [option.content, \" \\\\t OptionID : \", option.optionId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 57\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 53\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 41\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 37\n          }, this)), /*#__PURE__*/_jsxDEV(Box, {\n            py: 5,\n            align: 'end',\n            alignSelf: 'end',\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              alignSelf: 'end',\n              size: 'lg',\n              colorScheme: 'teal',\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          zIndex: 100,\n          position: 'fixed',\n          bottom: 10,\n          right: 20,\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to top\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => window.scrollTo(0, 0),\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to bottom\",\n            children: /*#__PURE__*/_jsxDEV(IconButton // aria-label={\"\"}\n            , {\n              onClick: () => {// pageRef.current.scrollIntoView({\n                //     behavior: \"smooth\",\n                //     block: \"end\",\n                //     inline: \"nearest\"\n                // })\n              },\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          p: 1,\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          m: 10,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: 'md',\n            colorScheme: 'teal',\n            variant: 'outline',\n            leftIcon: /*#__PURE__*/_jsxDEV(TimeIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 100\n            }, this),\n            children: \"23:00 left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StartQuiz, \"B6ACkXzKN9N5b0EmzjwluMjjzI4=\", false, function () {\n  return [useQuiz, useParams];\n});\n\n_c = StartQuiz;\nexport default StartQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/public/start_quiz/StartQuiz.js"],"names":["React","useEffect","useState","Box","Button","Checkbox","Container","Divider","Flex","Heading","HStack","IconButton","SimpleGrid","Text","Tooltip","VStack","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","ArrowDownIcon","ArrowUpIcon","TimeIcon","useQuiz","axios","useParams","quizApi","StartQuiz","foundedQuiz","setFoundedQuiz","code","isLoading","setLoading","isOpen","setOption","getQuizDetails","data","getQuizDetailsByCode","console","log","e","cancelRef","onClose","title","questions","length","map","question","i","questionId","options","option","optionId","content","window","scrollTo"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../context/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport quizApi from \"../../../api/quizApi\";\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {code} = useParams();\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isOpen, setOption] = useState(false);\r\n    useEffect(() => {\r\n        const getQuizDetails = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const data = await quizApi.getQuizDetailsByCode(code);\r\n                setFoundedQuiz(data);\r\n                setLoading(false);\r\n                console.log(data);\r\n            } catch (e) {\r\n                setLoading(false);\r\n                console.log('Failed to get quiz details');\r\n            }\r\n        }\r\n        getQuizDetails();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <AlertDialog\r\n                isOpen={isOpen}\r\n                leastDestructiveRef={cancelRef}\r\n                onClose={onClose}\r\n            >\r\n                <AlertDialogOverlay>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                            Delete Customer\r\n                        </AlertDialogHeader>\r\n\r\n                        <AlertDialogBody>\r\n                            Are you sure? You can't undo this action afterwards.\r\n                        </AlertDialogBody>\r\n\r\n                        <AlertDialogFooter>\r\n                            <Button ref={cancelRef} onClick={onClose}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button colorScheme=\"red\" onClick={onClose} ml={3}>\r\n                                Delete\r\n                            </Button>\r\n                        </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                </AlertDialogOverlay>\r\n            </AlertDialog>\r\n            <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n                 align={'center'}>\r\n                {\r\n                    !isLoading && <Box\r\n                        bg={'white'}\r\n                        borderRadius={'md'}\r\n                        boxShadow={'xl'}\r\n                        minH={'100vh'}\r\n                        maxW={'860px'}\r\n                        p={10}>\r\n                        <VStack position={'relative'}>\r\n                            {/*\r\n                           QUIZ TITLE\r\n                           */}\r\n                            <Heading\r\n                                pb={10}\r\n                                color={'purple.600'}\r\n                                fontSize={30}>\r\n                                {foundedQuiz != null ? foundedQuiz.title : ''}\r\n                            </Heading>\r\n                            {/*NUMBER OF QUESTIONS*/}\r\n                            <Text\r\n                                fontWeight={'medium'}\r\n                                color={'teal'}\r\n                                letterSpacing={1}\r\n                                fontStyle={'italic'}\r\n                                position={'absolute'}\r\n                                top={0}\r\n                                right={0}\r\n                                m={5}>\r\n                                {foundedQuiz.questions && foundedQuiz.questions.length} Questions\r\n                            </Text>\r\n                            {/*QUESTIONS*/}\r\n                            {\r\n                                foundedQuiz.questions.map((question, i) => (\r\n                                    <VStack\r\n                                        w={'100%'}\r\n                                        align={'start'}\r\n                                        textAlign={'start'} key={i}\r\n                                        p={2}\r\n                                        spacing={5}>\r\n                                        {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                        <Container w={'100%'} maxW=\"4xl\">\r\n                                            <Box maxW=\"4xl\">\r\n                                                <Text fontWeight={'medium'} fontSize={20} color={'purple.900'}>\r\n                                                    {i + 1}. {question.title} \\t QuestionID : {question.questionId}\r\n                                                </Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        {/*OPTIONS*/}\r\n                                        <SimpleGrid\r\n                                            w={'100%'}\r\n                                            columns={2}\r\n                                            spacing={4}\r\n                                            align={'start'}\r\n                                            textAlign={'start'}>\r\n                                            {\r\n                                                question.options.map((option, i) => (\r\n                                                    <Container\r\n                                                        w={'100%'}\r\n                                                        minW={300}\r\n                                                        key={i}\r\n                                                        // maxW=\"xl\"\r\n                                                        align={'start'}\r\n                                                        textAlign={'start'}\r\n                                                        alignItems={'start'}\r\n                                                    >\r\n                                                        <Box\r\n                                                            padding={1}\r\n                                                            // maxW=\"3xl\"\r\n                                                        >\r\n                                                            <Checkbox\r\n                                                                // onChange={(e) => onSelectedOption(e, option.optionId, question.questionId)}\r\n                                                                value={option.optionId}\r\n                                                                colorScheme={'teal'}\r\n                                                                size={'lg'}>\r\n                                                                {option.content} \\t OptionID : {option.optionId}\r\n                                                            </Checkbox>\r\n                                                        </Box>\r\n                                                    </Container>\r\n                                                ))\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                        <Divider/>\r\n                                    </VStack>\r\n                                ))\r\n                            }\r\n                            {/* Submit button*/}\r\n                            <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                <Button alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                            </Box>\r\n                        </VStack>\r\n\r\n                        {/* FIXED CONTENTS*/}\r\n                        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                            <Tooltip label={\"Scroll to top\"}>\r\n                                <IconButton\r\n                                    onClick={() => window.scrollTo(0, 0)}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowUpIcon/>}/>\r\n                            </Tooltip>\r\n                            <Tooltip label={\"Scroll to bottom\"}>\r\n                                <IconButton\r\n                                    // aria-label={\"\"}\r\n                                    onClick={() => {\r\n                                        // pageRef.current.scrollIntoView({\r\n                                        //     behavior: \"smooth\",\r\n                                        //     block: \"end\",\r\n                                        //     inline: \"nearest\"\r\n                                        // })\r\n                                    }}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowDownIcon/>}/>\r\n                            </Tooltip>\r\n                        </HStack>\r\n                        <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                            <Button size={'md'} colorScheme={'teal'} variant={'outline'} leftIcon={<TimeIcon/>}>23:00\r\n                                left</Button>\r\n                        </Flex>\r\n                    </Box>\r\n\r\n\r\n                }\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;"]},"metadata":{},"sourceType":"module"}