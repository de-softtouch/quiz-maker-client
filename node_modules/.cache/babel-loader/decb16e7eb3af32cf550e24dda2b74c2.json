{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\admin\\\\quiz_edit\\\\QuizEditor.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { Box, Flex, Avatar, HStack, Link, IconButton, Button, Menu, MenuButton, MenuList, MenuItem, MenuDivider, useDisclosure, useColorModeValue, Stack, Heading, Center, Text, ButtonGroup, CircularProgress, VStack, Input } from '@chakra-ui/react';\nimport { HamburgerIcon, CloseIcon, AddIcon, ArrowBackIcon } from '@chakra-ui/icons';\nimport EditQuestionDialog from \"../../edit_quiz/EditQuestionDialog\";\nimport QuestionEntry from \"../../edit_quiz/QuestionEntry\";\nimport { useCreateQuiz } from \"../../../context/CreateQuizProvider\";\n/*\r\nEditor Page\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizEditor = () => {\n  _s();\n\n  //get id of quiz\n  const {\n    id\n  } = useParams();\n  const [visible, setVisible] = useState(false);\n  const [showCreateQ, setShowCQD] = useState(false);\n  const {\n    createdQuiz,\n    setCreatedQuiz\n  } = useCreateQuiz();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"#F7FAFC\",\n      children: [showCreateQ && /*#__PURE__*/_jsxDEV(EditQuestionDialog, {\n        setVisible: setShowCQD\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(HeaderWithActionBar, {\n        setShowCQD: setShowCQD\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        pt: \"150px\",\n        minH: \"100vh\",\n        bg: \"#F7FAFC\",\n        position: \"relative\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          direction: \"column\",\n          justifyContent: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            mt: 10,\n            w: \"100%\",\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              children: \"button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              children: \"button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              children: \"button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              children: \"button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            w: \"100%\",\n            maxW: \"1000px\",\n            children: /*#__PURE__*/_jsxDEV(Center, {\n              children: /*#__PURE__*/_jsxDEV(Stack, {\n                w: \"100%\",\n                direction: \"column\",\n                align: \"center\",\n                children: createdQuiz != null && createdQuiz.questions.length > 0 && createdQuiz.questions.map((item, i) => /*#__PURE__*/_jsxDEV(QuestionEntry, {\n                  index: i + 1,\n                  question: item\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(QuizEditor, \"v+nOsj0+r9gr0F8CBrWJEKuAG7A=\", false, function () {\n  return [useParams, useCreateQuiz];\n});\n\n_c = QuizEditor;\nexport default QuizEditor;\n\nconst HeaderWithActionBar = ({\n  setShowCQD\n}) => {\n  _s2();\n\n  const [isLoading, setLoading] = useState(false);\n\n  const onSaveQuiz = async () => {\n    setLoading(true); // const resp = await axios.post(\n    //     `http://localhost:8080/api/v1/public/${createdQuiz.quizId}/question`,\n    //     JSON.parse()\n    // );\n    // let modifiledQuestions = createdQuiz.questions.map((question) => ({\n    //     ...question,\n    //     options: question.options.map((option) => ({\n    //         ...option,\n    //         optionId: null,\n    //     })),\n    // }));\n    // setCreatedQuiz((prevState) => ({\n    //     ...prevState,\n    //     questions: modifiledQuestions,\n    // }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    zIndex: 500,\n    bg: \"red\",\n    position: \"fixed\",\n    top: 0,\n    w: \"100%\",\n    bg: \"#F7FAFC\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      bg: \"red\",\n      maxH: \"60px\",\n      bg: \"teal.600\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        px: 8,\n        py: 2,\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n          size: \"md\",\n          color: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"white\",\n          fontWeight: \"medium\",\n          fontStyle: \"italic\",\n          children: \"Editted 1 minute ago\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            onClick: onSaveQuiz,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            children: \"Publish\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      position: \"fixed\",\n      top: \"50%\",\n      right: \"50%\",\n      zIndex: 800,\n      value: 30,\n      isIndeterminate: true,\n      color: \"orange.400\",\n      thickness: \"12px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"#F7FAFC\",\n      maxW: \"860px\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            boxShadow: \"md\",\n            p: 4,\n            borderBottomRadius: \"xl\",\n            spacing: 4,\n            bg: \"white\",\n            children: [/*#__PURE__*/_jsxDEV(VStack, {\n              w: \"400px\",\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                alignSelf: \"start\",\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(VStack, {\n              align: \"end\",\n              w: \"200px\",\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: \"New question\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  setShowCQD(true);\n                },\n                size: \"md\",\n                rightIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 48\n                }, this),\n                variant: \"solid\",\n                colorScheme: \"teal\",\n                children: \"New question\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(HeaderWithActionBar, \"L2kia1mxOZVbKExDfCbHuwhndlw=\");\n\n_c2 = HeaderWithActionBar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuizEditor\");\n$RefreshReg$(_c2, \"HeaderWithActionBar\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/admin/quiz_edit/QuizEditor.js"],"names":["React","Component","useState","useParams","Box","Flex","Avatar","HStack","Link","IconButton","Button","Menu","MenuButton","MenuList","MenuItem","MenuDivider","useDisclosure","useColorModeValue","Stack","Heading","Center","Text","ButtonGroup","CircularProgress","VStack","Input","HamburgerIcon","CloseIcon","AddIcon","ArrowBackIcon","EditQuestionDialog","QuestionEntry","useCreateQuiz","QuizEditor","id","visible","setVisible","showCreateQ","setShowCQD","createdQuiz","setCreatedQuiz","questions","length","map","item","i","HeaderWithActionBar","isLoading","setLoading","onSaveQuiz"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {\r\n    Box,\r\n    Flex,\r\n    Avatar,\r\n    HStack,\r\n    Link,\r\n    IconButton,\r\n    Button,\r\n    Menu,\r\n    MenuButton,\r\n    MenuList,\r\n    MenuItem,\r\n    MenuDivider,\r\n    useDisclosure,\r\n    useColorModeValue,\r\n    Stack, Heading, Center, Text, ButtonGroup, CircularProgress, VStack, Input,\r\n} from '@chakra-ui/react';\r\nimport {HamburgerIcon, CloseIcon, AddIcon, ArrowBackIcon} from '@chakra-ui/icons';\r\nimport EditQuestionDialog from \"../../edit_quiz/EditQuestionDialog\";\r\nimport QuestionEntry from \"../../edit_quiz/QuestionEntry\";\r\nimport {useCreateQuiz} from \"../../../context/CreateQuizProvider\";\r\n\r\n/*\r\nEditor Page\r\n */\r\nconst QuizEditor = () => {\r\n\r\n    //get id of quiz\r\n    const {id} = useParams();\r\n\r\n    const [visible,setVisible]  = useState(false);\r\n    const [showCreateQ, setShowCQD] = useState(false);\r\n    const { createdQuiz, setCreatedQuiz } = useCreateQuiz();\r\n    return (\r\n        <>\r\n            <Box bg={\"#F7FAFC\"}>\r\n                {/*  Header with action bar*/}\r\n                {showCreateQ && <EditQuestionDialog setVisible={setShowCQD} />}\r\n\r\n                <HeaderWithActionBar setShowCQD={setShowCQD} />\r\n                {/*   Content with right sidebar*/}\r\n                <Box\r\n                    pt={\"150px\"}\r\n                    minH={\"100vh\"}\r\n                    bg={\"#F7FAFC\"}\r\n                    position={\"relative\"}\r\n                >\r\n                    <Flex direction={\"column\"} justifyContent=\"center\">\r\n                        {/*  */}\r\n                        <HStack mt={10} w=\"100%\" align=\"center\">\r\n                            <Button>button</Button>\r\n                            <Button>button</Button>\r\n                            <Button>button</Button>\r\n                            <Button>button</Button>\r\n                            <Button>button</Button>\r\n                        </HStack>\r\n                        {/*QUESTION*/}\r\n                        <Box w={\"100%\"} maxW={\"1000px\"}>\r\n                            <Center>\r\n                                {/*SAVED QUESTIONS*/}\r\n                                <Stack\r\n                                    w={\"100%\"}\r\n                                    direction={\"column\"}\r\n                                    align={\"center\"}\r\n                                >\r\n                                    {/* {savedQuestions.length > 0 &&\r\n                                    savedQuestions.map((item, i) => (\r\n                                        <QuestionEntry\r\n                                            key={i}\r\n                                            index={i + 1}\r\n                                            question={item}\r\n                                        />\r\n                                    ))} */}\r\n                                    {createdQuiz != null &&\r\n                                    createdQuiz.questions.length > 0 &&\r\n                                    createdQuiz.questions.map((item, i) => (\r\n                                        <QuestionEntry\r\n                                            key={i}\r\n                                            index={i + 1}\r\n                                            question={item}\r\n                                        />\r\n                                    ))}\r\n                                </Stack>\r\n                            </Center>\r\n                        </Box>\r\n                        {/**/}\r\n                        {/* <Box\r\n                        overflowY={\"scroll\"}\r\n                        top={\"150\"}\r\n                        zIndex={10}\r\n                        position={\"sticky\"}\r\n                        bg={\"white\"}\r\n                        boxShadow={\"md\"}\r\n                        minW={\"300px\"}\r\n                        maxW={\"300px\"}\r\n                        minH={\"400px\"}\r\n                        height={\"100%\"}\r\n                    >\r\n                        <Box p={4} mb={100}>\r\n                            <VStack spacing={5}>\r\n                                <Input type={\"file\"} />\r\n                                <HStack>\r\n                                    <Tooltip label={\"Quiz title\"}>\r\n                                        <Heading\r\n                                            fontWeight={\"medium\"}\r\n                                            fontSize={\"25px\"}\r\n                                        >\r\n                                            {createdQuiz != null &&\r\n                                            createdQuiz.title != null\r\n                                                ? createdQuiz.title\r\n                                                : \"\"}\r\n                                        </Heading>\r\n                                    </Tooltip>\r\n                                    <IconButton\r\n                                        colorScheme={\"teal\"}\r\n                                        onClick={() => {}}\r\n                                        icon={<EditIcon />}\r\n                                    />\r\n                                </HStack>\r\n                                <HStack>\r\n                                    <Tooltip\r\n                                        zIndex={100}\r\n                                        label={\r\n                                            \"Public: visible to everyone ;\\n Private: visible to you and shared ones\"\r\n                                        }\r\n                                    >\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            leftIcon={<ViewIcon />}\r\n                                            variant={\"solid\"}\r\n                                            colorScheme={\"white\"}\r\n                                            color={\"blue.400\"}\r\n                                        >\r\n                                            public\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                    <Tooltip\r\n                                        zIndex={100}\r\n                                        label={\"Default time for all questions\"}\r\n                                    >\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            leftIcon={<TimeIcon />}\r\n                                            variant={\"solid\"}\r\n                                            colorScheme={\"white\"}\r\n                                            color={\"blue.400\"}\r\n                                        >\r\n                                            30 secs\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                */}\r\n                    </Flex>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuizEditor;\r\n\r\nconst HeaderWithActionBar = ({ setShowCQD }) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const onSaveQuiz = async () => {\r\n        setLoading(true);\r\n        // const resp = await axios.post(\r\n        //     `http://localhost:8080/api/v1/public/${createdQuiz.quizId}/question`,\r\n        //     JSON.parse()\r\n        // );\r\n        // let modifiledQuestions = createdQuiz.questions.map((question) => ({\r\n        //     ...question,\r\n        //     options: question.options.map((option) => ({\r\n        //         ...option,\r\n        //         optionId: null,\r\n        //     })),\r\n        // }));\r\n        // setCreatedQuiz((prevState) => ({\r\n        //     ...prevState,\r\n        //     questions: modifiledQuestions,\r\n        // }));\r\n    };\r\n    return (\r\n        <Box\r\n            zIndex={500}\r\n            bg={\"red\"}\r\n            position={\"fixed\"}\r\n            top={0}\r\n            w={\"100%\"}\r\n            bg={\"#F7FAFC\"}\r\n        >\r\n            {/*Header*/}\r\n            <Box bg={\"red\"} maxH={\"60px\"} bg={\"teal.600\"}>\r\n                <Flex\r\n                    align={\"center\"}\r\n                    px={8}\r\n                    py={2}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                >\r\n                    <ArrowBackIcon size={\"md\"} color={\"white\"} />\r\n                    <Text\r\n                        color={\"white\"}\r\n                        fontWeight={\"medium\"}\r\n                        fontStyle={\"italic\"}\r\n                    >\r\n                        Editted 1 minute ago\r\n                    </Text>\r\n                    <ButtonGroup>\r\n                        <Button size={\"sm\"} onClick={onSaveQuiz}>\r\n                            Save\r\n                        </Button>\r\n                        <Button size={\"sm\"}>Publish</Button>\r\n                    </ButtonGroup>\r\n                </Flex>\r\n            </Box>\r\n            {isLoading && (\r\n                <CircularProgress\r\n                    position=\"fixed\"\r\n                    top=\"50%\"\r\n                    right=\"50%\"\r\n                    zIndex={800}\r\n                    value={30}\r\n                    isIndeterminate\r\n                    color=\"orange.400\"\r\n                    thickness=\"12px\"\r\n                />\r\n            )}\r\n            {/*Box*/}\r\n            <Box bg={\"#F7FAFC\"} maxW={\"860px\"}>\r\n                <Box>\r\n                    <Center>\r\n                        <HStack\r\n                            boxShadow={\"md\"}\r\n                            p={4}\r\n                            borderBottomRadius={\"xl\"}\r\n                            spacing={4}\r\n                            bg={\"white\"}\r\n                        >\r\n                            <VStack w={\"400px\"}>\r\n                                <Text alignSelf={\"start\"}>Search</Text>\r\n                                <Input />\r\n                            </VStack>\r\n                            <VStack align={\"end\"} w={\"200px\"}>\r\n                                <Text>New question</Text>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setShowCQD(true);\r\n                                    }}\r\n                                    size={\"md\"}\r\n                                    rightIcon={<AddIcon />}\r\n                                    variant={\"solid\"}\r\n                                    colorScheme={\"teal\"}\r\n                                >\r\n                                    New question\r\n                                </Button>\r\n                            </VStack>\r\n                        </HStack>\r\n                    </Center>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}