{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\library\\\\AssignedUsers.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, ListItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, OrderedList, Text, useDisclosure } from \"@chakra-ui/react\";\nimport quizApi from \"../../../api/quizApi\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AssignedUsers = ({\n  isOpen,\n  onOpen,\n  onClose,\n  quizId\n}) => {\n  _s();\n\n  const [users, setUsers] = useState(null);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      console.log(\"get userss\");\n\n      try {\n        const resp = await axios.get(`http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/${quizId}/users`, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n          }\n        });\n\n        if (resp.status === 200) {\n          setUsers(resp.data);\n          console.log(resp.data);\n        }\n      } catch (e) {\n        console.log(\"Failed to fetch assigned users \", e);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      closeOnOverlayClick: false,\n      isOpen: isOpen,\n      onClose: onClose,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: \"Assigned users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(OrderedList, {\n            spacing: 4,\n            children: users && users.map((user, i) => {\n              /*#__PURE__*/\n              _jsxDEV(ListItem, {\n                children: user.email\n              }, email, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(AssignedUsers, \"agkcAITZm3jfJZtUcsWKkI40X24=\");\n\n_c = AssignedUsers;\nexport default AssignedUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignedUsers\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/library/AssignedUsers.js"],"names":["React","useEffect","useState","Button","ListItem","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","OrderedList","Text","useDisclosure","quizApi","axios","AssignedUsers","isOpen","onOpen","onClose","quizId","users","setUsers","fetchUsers","console","log","resp","get","headers","localStorage","getItem","status","data","e","map","user","i","email"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SACIC,MADJ,EACYC,QADZ,EAEIC,KAFJ,EAEWC,SAFX,EAGIC,gBAHJ,EAIIC,YAJJ,EAIkBC,WAJlB,EAKIC,WALJ,EAMIC,YANJ,EAMkBC,WANlB,EAM+BC,IAN/B,EAOIC,aAPJ,QAQO,kBARP;AASA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA;AAA1B,CAAD,KAAuC;AAAA;;AACzD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,IAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMuB,UAAU,GAAG,YAAY;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,qEAAoEP,MAAO,QAAtF,EAA+F;AAC9GQ,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAEL,6BAAkB,UAASC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;AAF1D;AADqG,SAA/F,CAAnB;;AAMA,YAAIJ,IAAI,CAACK,MAAL,KAAgB,GAApB,EAAyB;AACrBT,UAAAA,QAAQ,CAACI,IAAI,CAACM,IAAN,CAAR;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACM,IAAjB;AACH;AACJ,OAXD,CAWE,OAAOC,CAAP,EAAU;AACRT,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CQ,CAA/C;AACH;AACJ,KAhBD;;AAiBAV,IAAAA,UAAU;AAEb,GApBQ,EAoBN,EApBM,CAAT;AAqBA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,mBAAmB,EAAE,KAA5B;AAAmC,MAAA,MAAM,EAAEN,MAA3C;AAAmD,MAAA,OAAO,EAAEE,OAA5D;AAAA,8BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AAAA,gCACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,SAAD;AAAA,iCACI,QAAC,WAAD;AAAa,YAAA,OAAO,EAAE,CAAtB;AAAA,sBAEQE,KAAK,IAAEA,KAAK,CAACa,GAAN,CAAU,CAACC,IAAD,EAAMC,CAAN,KAAU;AACvB;AAAA,sBAAC,QAAD;AAAA,0BAAuBD,IAAI,CAACE;AAA5B,iBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAEH,aAHM;AAFf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAeI,QAAC,WAAD;AAAA,iCAII,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAElB,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,gBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AA+BH,CAtDD;;GAAMH,a;;KAAAA,a;AAwDN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Button, ListItem,\r\n    Modal, ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent, ModalFooter,\r\n    ModalHeader,\r\n    ModalOverlay, OrderedList, Text,\r\n    useDisclosure\r\n} from \"@chakra-ui/react\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport axios from \"axios\";\r\n\r\nconst AssignedUsers = ({isOpen, onOpen, onClose, quizId}) => {\r\n    const [users, setUsers] = useState(null);\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            console.log(\"get userss\")\r\n            try {\r\n                const resp = await axios.get(`http://localhost:8080/api/v1/admin/quiz-assignment/assign-quizzes/${quizId}/users`, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\r\n                    }\r\n                })\r\n                if (resp.status === 200) {\r\n                    setUsers(resp.data);\r\n                    console.log(resp.data);\r\n                }\r\n            } catch (e) {\r\n                console.log(\"Failed to fetch assigned users \", e);\r\n            }\r\n        }\r\n        fetchUsers();\r\n\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>Assigned users</ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <ModalBody>\r\n                        <OrderedList spacing={4}>\r\n                            {\r\n                                users&&users.map((user,i)=>{\r\n                                    <ListItem key={email}>{user.email}</ListItem>\r\n\r\n                                })\r\n                            }\r\n\r\n                        </OrderedList>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        {/*<Button colorScheme=\"blue\" mr={3}>*/}\r\n                        {/*    Save*/}\r\n                        {/*</Button>*/}\r\n                        <Button onClick={onClose}>Close</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AssignedUsers;"]},"metadata":{},"sourceType":"module"}