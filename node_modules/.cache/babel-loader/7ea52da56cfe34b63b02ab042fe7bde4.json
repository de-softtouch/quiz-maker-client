{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\quiz maker client\\\\src\\\\pages\\\\admin\\\\assigned\\\\AssignedInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Box, Button, Flex, Heading, HStack, Text } from \"@chakra-ui/react\";\nimport UserService from \"../../../service/UserService\";\nimport { useParams } from \"react-router-dom\";\nimport { AdminContext } from \"../../../providers/AdminSettingProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AssignedInfo = () => {\n  _s();\n\n  const {\n    setLoading\n  } = useContext(AdminContext);\n  const {\n    id\n  } = useParams();\n  const [info, setInfo] = useState({});\n  useEffect(() => {\n    getInfo();\n  }, []);\n\n  const getInfo = async () => {\n    try {\n      setLoading(true);\n      const resp = await UserService.getAssignedQuizInfo(id);\n      console.log(resp.data);\n      setInfo(resp.data);\n    } catch (e) {} finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      bg: 'white',\n      p: '5',\n      direction: 'column',\n      flex: 7,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"TITLE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(HStack, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: info && info.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: info && info.createDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: info && info.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      w: '20px'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      bg: 'white',\n      p: '5',\n      direction: 'column',\n      justifyContent: 'space-between',\n      flex: 3,\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Not Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        w: '100%',\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: 'blue',\n          w: '100%',\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AssignedInfo, \"RvCGi1C4QtcwWn55F4DkbVSKR/U=\", false, function () {\n  return [useParams];\n});\n\n_c = AssignedInfo;\nexport default AssignedInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignedInfo\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/quiz maker client/src/pages/admin/assigned/AssignedInfo.js"],"names":["React","useContext","useEffect","useState","Box","Button","Flex","Heading","HStack","Text","UserService","useParams","AdminContext","AssignedInfo","setLoading","id","info","setInfo","getInfo","resp","getAssignedQuizInfo","console","log","data","e","title","createDate","description"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {Box, Button, Flex, Heading, HStack, Text} from \"@chakra-ui/react\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\n\r\nconst AssignedInfo = () => {\r\n    const {setLoading} = useContext(AdminContext);\r\n    const {id} = useParams();\r\n\r\n    const [info, setInfo] = useState({});\r\n    useEffect(() => {\r\n        getInfo();\r\n    }, []);\r\n\r\n    const getInfo = async () => {\r\n        try {\r\n            setLoading(true)\r\n            const resp = await UserService.getAssignedQuizInfo(id);\r\n            console.log(resp.data);\r\n            setInfo(resp.data);\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n    return (\r\n        <Flex>\r\n            <Flex bg={'white'} p={'5'} direction={'column'} flex={7}>\r\n                <Heading>TITLE</Heading>\r\n                <HStack>\r\n                    <Text>{info && info.title}</Text>\r\n                    <Text>{info && info.createDate}</Text>\r\n                </HStack>\r\n                <Text>{info && info.description}</Text>\r\n            </Flex>\r\n            <Box w={'20px'}></Box>\r\n            <Flex bg={'white'} p={'5'} direction={'column'} justifyContent={'space-between'} flex={3}>\r\n                <Flex justifyContent={\"space-between\"}>\r\n                    <Text>Status</Text>\r\n                    <Text>Not Complete</Text>\r\n\r\n                </Flex>\r\n                <Box w={'100%'}>\r\n                    <Button colorScheme={'blue'} w={'100%'}>Start</Button>\r\n                </Box>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default AssignedInfo;"]},"metadata":{},"sourceType":"module"}