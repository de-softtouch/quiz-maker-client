{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\assign\\\\Assignment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Box, Button, Flex, FormControl, FormLabel, forwardRef, Heading, HStack, Input, Tag, TagCloseButton, TagLabel, Text, Textarea, useToast, VStack, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport DatePicker from \"react-datepicker\";\nimport { useParams } from \"react-router-dom\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AdminContext } from \"../../../providers/AdminSettingProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Assignment = () => {\n  _s();\n\n  const {\n    getQuizDetail,\n    quiz\n  } = useContext(QuizEditContext);\n  const {\n    isLoading\n  } = useContext(AdminContext);\n  const {\n    id\n  } = useParams();\n  const [emails, setEmails] = useState([]);\n  const [email, setEmail] = useState(\"\");\n  const [finishDate, setFinishDate] = useState(new Date());\n  const [assignment, setAssignment] = useState({\n    quizId: id,\n    emails: []\n  });\n  const toast = useToast();\n  const ExampleCustomInput = forwardRef(({\n    value,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"example-custom-input\",\n    onClick: onClick,\n    ref: ref,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    console.log(id);\n    getQuizDetail(id);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    w: '100%',\n    minH: '100vh',\n    children: !isLoading && /*#__PURE__*/_jsxDEV(VStack, {\n      w: '100%',\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        bg: 'white',\n        w: '100%',\n        children: /*#__PURE__*/_jsxDEV(HStack, {\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            children: quiz && quiz.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        w: '100%',\n        children: [/*#__PURE__*/_jsxDEV(VStack, {\n          flex: 8,\n          w: '100%',\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            w: '100%',\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"title\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                bg: 'white',\n                placeholder: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"Description\",\n            isRequired: true,\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              bg: 'white',\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flex: 3,\n          bg: 'white',\n          p: 2,\n          mx: 2,\n          minH: '100vh',\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            align: 'start',\n            w: '100%',\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              alignSelf: 'end',\n              colorScheme: 'blue',\n              children: \"Giao B\\xE0i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(VStack, {\n              w: '100%',\n              align: 'start',\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: \"Deadline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                customInput: /*#__PURE__*/_jsxDEV(ExampleCustomInput, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 58\n                }, this),\n                selected: finishDate,\n                onChange: date => setFinishDate(date),\n                timeInputLabel: \"Time:\",\n                dateFormat: \"MM/dd/yyyy h:mm aa\",\n                showTimeInput: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(VStack, {\n              children: [/*#__PURE__*/_jsxDEV(Wrap, {\n                w: \"100%\",\n                children: emails.map(email => /*#__PURE__*/_jsxDEV(WrapItem, {\n                  children: /*#__PURE__*/_jsxDEV(Tag, {\n                    size: \"sm\",\n                    borderRadius: \"full\",\n                    variant: \"solid\",\n                    colorScheme: \"green\",\n                    children: [/*#__PURE__*/_jsxDEV(TagLabel, {\n                      children: email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 91,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(TagCloseButton, {\n                      onClick: () => {\n                        let filteredEmail = emails.filter(e => e != email);\n                        setEmails(filteredEmail);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 53\n                  }, this)\n                }, email, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(HStack, {\n                w: \"100%\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  size: \"sm\",\n                  value: email,\n                  onChange: e => setEmail(e.target.value),\n                  placeholder: \"Email to share. Ex: test@gmail.com\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => {\n                    setEmail(\"\");\n\n                    if (!emails.includes(email)) {\n                      setEmails(prevState => [...prevState, email]);\n                    }\n                  },\n                  isDisabled: email.length === 0,\n                  size: \"sm\",\n                  colorScheme: \"purple\",\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Assignment, \"wIq4/ni7SIy1z6ZTT1lQx9UdXRU=\", false, function () {\n  return [useParams, useToast];\n});\n\n_c = Assignment;\nexport default Assignment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Assignment\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/assign/Assignment.js"],"names":["React","useContext","useEffect","useState","Box","Button","Flex","FormControl","FormLabel","forwardRef","Heading","HStack","Input","Tag","TagCloseButton","TagLabel","Text","Textarea","useToast","VStack","Wrap","WrapItem","DatePicker","useParams","QuizEditContext","AdminContext","Assignment","getQuizDetail","quiz","isLoading","id","emails","setEmails","email","setEmail","finishDate","setFinishDate","Date","assignment","setAssignment","quizId","toast","ExampleCustomInput","value","onClick","ref","console","log","title","date","map","filteredEmail","filter","e","target","includes","prevState","length"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Flex,\r\n    FormControl,\r\n    FormLabel, forwardRef,\r\n    Heading,\r\n    HStack,\r\n    Input, Tag, TagCloseButton, TagLabel, Text,\r\n    Textarea,\r\n    useToast,\r\n    VStack, Wrap, WrapItem\r\n} from \"@chakra-ui/react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\n\r\nconst Assignment = () => {\r\n\r\n    const {getQuizDetail, quiz} = useContext(QuizEditContext);\r\n    const {isLoading} = useContext(AdminContext);\r\n    const {id} = useParams();\r\n    const [emails, setEmails] = useState([]);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [finishDate, setFinishDate] = useState(new Date());\r\n    const  [assignment,setAssignment] = useState({\r\n        quizId:id,\r\n        emails:[]\r\n    })\r\n    const toast = useToast();\r\n    const ExampleCustomInput = forwardRef(({value, onClick}, ref) => (\r\n        <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\r\n            {value}\r\n        </button>\r\n    ));\r\n    useEffect(() => {\r\n        console.log(id);\r\n        getQuizDetail(id);\r\n    }, [])\r\n    return (\r\n        <Box w={'100%'} minH={'100vh'}>\r\n            {\r\n                !isLoading && (\r\n                    <VStack w={'100%'}>\r\n                        <Box p={5} bg={'white'} w={'100%'}>\r\n                            <HStack>\r\n                                <Text>{quiz && quiz.title}</Text>\r\n                            </HStack>\r\n                        </Box>\r\n                        <Flex w={'100%'}>\r\n                            <VStack flex={8} w={'100%'} spacing={2}>\r\n                                {/*TITLE*/}\r\n                                <HStack w={'100%'}>\r\n                                    <FormControl id=\"title\" isRequired>\r\n                                        <FormLabel>Title</FormLabel>\r\n                                        <Input bg={'white'} placeholder=\"Title\"/>\r\n                                    </FormControl>\r\n                                </HStack>\r\n                                {/*    DESCRIPTION*/}\r\n                                <FormControl id=\"Description\" isRequired>\r\n                                    <FormLabel>Description</FormLabel>\r\n                                    <Textarea bg={'white'} placeholder=\"Description\"/>\r\n                                </FormControl>\r\n                            </VStack>\r\n                            <Box flex={3} bg={'white'} p={2} mx={2} minH={'100vh'}>\r\n                                <VStack align={'start'} w={'100%'} spacing={5}>\r\n                                    <Button alignSelf={'end'} colorScheme={'blue'}>Giao Bài</Button>\r\n                                    <VStack w={'100%'} align={'start'}>\r\n                                        <Text>Deadline</Text>\r\n                                        <DatePicker\r\n                                            customInput={<ExampleCustomInput/>}\r\n                                            selected={finishDate}\r\n                                            onChange={(date) => setFinishDate(date)}\r\n                                            timeInputLabel=\"Time:\"\r\n                                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                            showTimeInput\r\n                                        />\r\n                                    </VStack>\r\n                                    <VStack>\r\n                                        <Wrap w={\"100%\"}>\r\n                                            {emails.map((email) => (\r\n                                                <WrapItem key={email}>\r\n                                                    <Tag\r\n                                                        size={\"sm\"}\r\n                                                        borderRadius=\"full\"\r\n                                                        variant=\"solid\"\r\n                                                        colorScheme=\"green\"\r\n                                                    >\r\n                                                        <TagLabel>{email}</TagLabel>\r\n                                                        <TagCloseButton\r\n                                                            onClick={() => {\r\n                                                                let filteredEmail =\r\n                                                                    emails.filter(\r\n                                                                        (e) => e != email\r\n                                                                    );\r\n                                                                setEmails(filteredEmail);\r\n                                                            }}\r\n                                                        />\r\n                                                    </Tag>\r\n                                                </WrapItem>\r\n                                            ))}\r\n                                        </Wrap>\r\n                                        {/*INPUT & ADD BUTTOn*/}\r\n                                        <HStack w={\"100%\"}>\r\n                                            <Input\r\n                                                size={\"sm\"}\r\n                                                value={email}\r\n                                                onChange={(e) => setEmail(e.target.value)}\r\n                                                placeholder={\r\n                                                    \"Email to share. Ex: test@gmail.com\"\r\n                                                }\r\n                                            />\r\n                                            <Button\r\n                                                onClick={() => {\r\n                                                    setEmail(\"\");\r\n                                                    if (!emails.includes(email)) {\r\n                                                        setEmails((prevState) => [\r\n                                                            ...prevState,\r\n                                                            email,\r\n                                                        ]);\r\n                                                    }\r\n                                                }}\r\n                                                isDisabled={email.length === 0}\r\n                                                size={\"sm\"}\r\n                                                colorScheme={\"purple\"}\r\n                                            >\r\n                                                Add\r\n                                            </Button>\r\n                                        </HStack>\r\n                                    </VStack>\r\n                                </VStack>\r\n                            </Box>\r\n                        </Flex>\r\n                    </VStack>\r\n                )\r\n            }\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Assignment;"]},"metadata":{},"sourceType":"module"}