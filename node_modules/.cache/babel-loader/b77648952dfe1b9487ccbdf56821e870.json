{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\public\\\\start_quiz\\\\StartQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Checkbox, Container, Divider, Flex, Heading, HStack, IconButton, SimpleGrid, Text, Tooltip, VStack, AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay } from \"@chakra-ui/react\";\nimport { ArrowDownIcon, ArrowUpIcon, TimeIcon } from \"@chakra-ui/icons\";\nimport { useQuiz } from \"../../../context/QuizProvider\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport quizApi from \"../../../api/quizApi\";\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StartQuiz = () => {\n  _s();\n\n  const {\n    foundedQuiz,\n    setFoundedQuiz\n  } = useQuiz();\n  const {\n    code\n  } = useParams();\n  const [isLoading, setLoading] = useState(true);\n  const [isOpen, setOpen] = useState(false);\n  const cancelRef = useRef();\n  const [submitContent, setSubmitContent] = useState({\n    answers: []\n  });\n  const history = useHistory();\n  useEffect(() => {\n    console.log('start quiz');\n\n    const getQuizContent = async () => {\n      setLoading(true);\n\n      try {\n        const data = await quizApi.getQuizContent(code); //\n\n        if (data.status === 0 || data.visibility === 0) {\n          return history.replace('/');\n        }\n\n        if (data.visibility === 1) {\n          try {\n            await quizApi.getAssignedQuiz(data.quizId);\n            setFoundedQuiz(data);\n            setLoading(false);\n            setSubmitContent(prev => ({ ...prev,\n              quizId: data.quizId\n            }));\n          } catch (e) {\n            return history.replace(`/`);\n          }\n        }\n\n        console.log(data);\n      } catch (e) {\n        setLoading(false);\n        console.log('Failed to get quiz details');\n      }\n    };\n\n    getQuizContent();\n  }, []);\n\n  const onCheckOption = (e, question, option) => {\n    if (e.target.checked) {\n      setSubmitContent(prev => ({ ...prev,\n        answers: prev.answers.push({\n          questionId: question.questionId // options: [option.optionId]\n\n        })\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CustomAlertDialog, {\n      title: 'Submit answers',\n      description: 'Are you sure? You can\\'t undo this action afterwards.',\n      isOpen: isOpen,\n      setOpen: setOpen,\n      cancelRef: cancelRef,\n      onSubmit: () => {\n        console.log('on submit');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      minH: '100vh',\n      bg: 'blue.100',\n      p: 10,\n      align: 'center',\n      children: !isLoading && /*#__PURE__*/_jsxDEV(Box, {\n        bg: 'white',\n        borderRadius: 'md',\n        boxShadow: 'xl',\n        minH: '100vh',\n        maxW: '860px',\n        p: 10,\n        children: [/*#__PURE__*/_jsxDEV(VStack, {\n          position: 'relative',\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            pb: 10,\n            color: 'purple.600',\n            fontSize: 30,\n            children: foundedQuiz != null ? foundedQuiz.title : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontWeight: 'medium',\n            color: 'teal',\n            letterSpacing: 1,\n            fontStyle: 'italic',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            m: 5,\n            children: [foundedQuiz.questions && foundedQuiz.questions.length, \" Questions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this), foundedQuiz.questions.map((question, i) => /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            align: 'start',\n            textAlign: 'start',\n            p: 2,\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(Container, {\n              w: '100%',\n              maxW: \"4xl\",\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                maxW: \"4xl\",\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 'medium',\n                  fontSize: 20,\n                  color: 'purple.900',\n                  children: [i + 1, \". \", question.title, \" \\\\t QuestionID : \", question.questionId]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              w: '100%',\n              columns: 2,\n              spacing: 4,\n              align: 'start',\n              textAlign: 'start',\n              children: question.options.map((option, i) => /*#__PURE__*/_jsxDEV(Container, {\n                w: '100%',\n                minW: 300,\n                // maxW=\"xl\"\n                align: 'start',\n                textAlign: 'start',\n                alignItems: 'start',\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  padding: 1 // maxW=\"3xl\"\n                  ,\n                  children: /*#__PURE__*/_jsxDEV(Checkbox // onChange={(e) => onSelectedOption(e, option.optionId, question.questionId)}\n                  , {\n                    onChange: (e, i, option) => onCheckOption(e, question, option),\n                    value: option.optionId,\n                    colorScheme: 'teal',\n                    size: 'lg',\n                    children: [option.content, \" \\\\t OptionID : \", option.optionId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 57\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 53\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 41\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 37\n          }, this)), /*#__PURE__*/_jsxDEV(Box, {\n            py: 5,\n            align: 'end',\n            alignSelf: 'end',\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setOpen(true),\n              alignSelf: 'end',\n              size: 'lg',\n              colorScheme: 'teal',\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          zIndex: 100,\n          position: 'fixed',\n          bottom: 10,\n          right: 20,\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to top\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => window.scrollTo(0, 0),\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"Scroll to bottom\",\n            children: /*#__PURE__*/_jsxDEV(IconButton // aria-label={\"\"}\n            , {\n              onClick: () => {// pageRef.current.scrollIntoView({\n                //     behavior: \"smooth\",\n                //     block: \"end\",\n                //     inline: \"nearest\"\n                // })\n              },\n              colorScheme: 'teal',\n              icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          p: 1,\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          m: 10,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: 'md',\n            colorScheme: 'teal',\n            variant: 'outline',\n            leftIcon: /*#__PURE__*/_jsxDEV(TimeIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 100\n            }, this),\n            children: \"23:00 left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StartQuiz, \"+bB72Nv4ogJQzYumtFc4g8nsyro=\", false, function () {\n  return [useQuiz, useParams, useHistory];\n});\n\n_c = StartQuiz;\nexport default StartQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/public/start_quiz/StartQuiz.js"],"names":["React","useEffect","useRef","useState","Box","Button","Checkbox","Container","Divider","Flex","Heading","HStack","IconButton","SimpleGrid","Text","Tooltip","VStack","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","ArrowDownIcon","ArrowUpIcon","TimeIcon","useQuiz","axios","useHistory","useParams","quizApi","CustomAlertDialog","StartQuiz","foundedQuiz","setFoundedQuiz","code","isLoading","setLoading","isOpen","setOpen","cancelRef","submitContent","setSubmitContent","answers","history","console","log","getQuizContent","data","status","visibility","replace","getAssignedQuiz","quizId","prev","e","onCheckOption","question","option","target","checked","push","questionId","title","questions","length","map","i","options","optionId","content","window","scrollTo"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack,\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../context/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport quizApi from \"../../../api/quizApi\";\r\nimport CustomAlertDialog from \"../../../components/CustomAlertDialog\";\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {code} = useParams();\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [isOpen, setOpen] = useState(false);\r\n    const cancelRef = useRef();\r\n    const [submitContent, setSubmitContent] = useState({answers: []});\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        console.log('start quiz')\r\n        const getQuizContent = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const data = await quizApi.getQuizContent(code);\r\n                //\r\n                if (data.status === 0 || data.visibility === 0) {\r\n                    return history.replace('/');\r\n                }\r\n                if (data.visibility === 1) {\r\n                    try {\r\n                        await quizApi.getAssignedQuiz(data.quizId);\r\n                        setFoundedQuiz(data);\r\n                        setLoading(false);\r\n                        setSubmitContent((prev) => ({\r\n                            ...prev,\r\n                            quizId: data.quizId\r\n                        }))\r\n                    } catch (e) {\r\n                        return history.replace(`/`);\r\n                    }\r\n                }\r\n                console.log(data);\r\n            } catch (e) {\r\n                setLoading(false);\r\n                console.log('Failed to get quiz details');\r\n            }\r\n        }\r\n        getQuizContent();\r\n    }, []);\r\n\r\n\r\n    const onCheckOption = (e, question, option) => {\r\n        if (e.target.checked) {\r\n            setSubmitContent((prev) => ({\r\n                ...prev,\r\n                answers: prev.answers.push({\r\n                    questionId: question.questionId,\r\n                    // options: [option.optionId]\r\n                })\r\n            }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlertDialog\r\n                title={'Submit answers'}\r\n                description={'Are you sure? You can\\'t undo this action afterwards.'}\r\n                isOpen={isOpen}\r\n                setOpen={setOpen}\r\n                cancelRef={cancelRef}\r\n                onSubmit={() => {\r\n                    console.log('on submit')\r\n                }}\r\n            />\r\n            {/*<AlertDialog*/}\r\n            {/*    isOpen={isOpen}*/}\r\n            {/*    leastDestructiveRef={cancelRef}*/}\r\n            {/*    onClose={() => setOpen(false)}*/}\r\n            {/*>*/}\r\n            {/*    <AlertDialogOverlay>*/}\r\n            {/*        <AlertDialogContent>*/}\r\n            {/*            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">*/}\r\n            {/*                Submit answers*/}\r\n            {/*            </AlertDialogHeader>*/}\r\n\r\n            {/*            <AlertDialogBody>*/}\r\n            {/*                Are you sure? You can't undo this action afterwards.*/}\r\n            {/*            </AlertDialogBody>*/}\r\n\r\n            {/*            <AlertDialogFooter>*/}\r\n            {/*                <Button ref={cancelRef} onClick={() => setOpen(false)}>*/}\r\n            {/*                    Cancel*/}\r\n            {/*                </Button>*/}\r\n            {/*                <Button colorScheme=\"teal\" onClick={() => setOpen(false)} ml={3}>*/}\r\n            {/*                    Delete*/}\r\n            {/*                </Button>*/}\r\n            {/*            </AlertDialogFooter>*/}\r\n            {/*        </AlertDialogContent>*/}\r\n            {/*    </AlertDialogOverlay>*/}\r\n            {/*</AlertDialog>*/}\r\n            <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n                 align={'center'}>\r\n                {\r\n                    !isLoading && <Box\r\n                        bg={'white'}\r\n                        borderRadius={'md'}\r\n                        boxShadow={'xl'}\r\n                        minH={'100vh'}\r\n                        maxW={'860px'}\r\n                        p={10}>\r\n                        <VStack position={'relative'}>\r\n                            {/*\r\n                           QUIZ TITLE\r\n                           */}\r\n                            <Heading\r\n                                pb={10}\r\n                                color={'purple.600'}\r\n                                fontSize={30}>\r\n                                {foundedQuiz != null ? foundedQuiz.title : ''}\r\n                            </Heading>\r\n                            {/*NUMBER OF QUESTIONS*/}\r\n                            <Text\r\n                                fontWeight={'medium'}\r\n                                color={'teal'}\r\n                                letterSpacing={1}\r\n                                fontStyle={'italic'}\r\n                                position={'absolute'}\r\n                                top={0}\r\n                                right={0}\r\n                                m={5}>\r\n                                {foundedQuiz.questions && foundedQuiz.questions.length} Questions\r\n                            </Text>\r\n                            {/*QUESTIONS*/}\r\n                            {\r\n                                foundedQuiz.questions.map((question, i) => (\r\n                                    <VStack\r\n                                        w={'100%'}\r\n                                        align={'start'}\r\n                                        textAlign={'start'} key={i}\r\n                                        p={2}\r\n                                        spacing={5}>\r\n                                        {/*\r\n                                    QUESTION TITLE\r\n                                    */}\r\n                                        <Container w={'100%'} maxW=\"4xl\">\r\n                                            <Box maxW=\"4xl\">\r\n                                                <Text fontWeight={'medium'} fontSize={20} color={'purple.900'}>\r\n                                                    {i + 1}. {question.title} \\t QuestionID : {question.questionId}\r\n                                                </Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        {/*OPTIONS*/}\r\n                                        <SimpleGrid\r\n                                            w={'100%'}\r\n                                            columns={2}\r\n                                            spacing={4}\r\n                                            align={'start'}\r\n                                            textAlign={'start'}>\r\n                                            {\r\n                                                question.options.map((option, i) => (\r\n                                                    <Container\r\n                                                        w={'100%'}\r\n                                                        minW={300}\r\n                                                        key={i}\r\n                                                        // maxW=\"xl\"\r\n                                                        align={'start'}\r\n                                                        textAlign={'start'}\r\n                                                        alignItems={'start'}\r\n                                                    >\r\n                                                        <Box\r\n                                                            padding={1}\r\n                                                            // maxW=\"3xl\"\r\n                                                        >\r\n                                                            <Checkbox\r\n                                                                // onChange={(e) => onSelectedOption(e, option.optionId, question.questionId)}\r\n                                                                onChange={(e, i, option) => onCheckOption(e, question, option)}\r\n                                                                value={option.optionId}\r\n                                                                colorScheme={'teal'}\r\n                                                                size={'lg'}>\r\n                                                                {option.content} \\t OptionID : {option.optionId}\r\n                                                            </Checkbox>\r\n                                                        </Box>\r\n                                                    </Container>\r\n                                                ))\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                        <Divider/>\r\n                                    </VStack>\r\n                                ))\r\n                            }\r\n                            {/* Submit button*/}\r\n                            <Box py={5} align={'end'} alignSelf={'end'}>\r\n                                <Button\r\n                                    onClick={() => setOpen(true)}\r\n                                    alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>\r\n                            </Box>\r\n                        </VStack>\r\n\r\n                        {/* FIXED CONTENTS*/}\r\n                        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>\r\n                            <Tooltip label={\"Scroll to top\"}>\r\n                                <IconButton\r\n                                    onClick={() => window.scrollTo(0, 0)}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowUpIcon/>}/>\r\n                            </Tooltip>\r\n                            <Tooltip label={\"Scroll to bottom\"}>\r\n                                <IconButton\r\n                                    // aria-label={\"\"}\r\n                                    onClick={() => {\r\n                                        // pageRef.current.scrollIntoView({\r\n                                        //     behavior: \"smooth\",\r\n                                        //     block: \"end\",\r\n                                        //     inline: \"nearest\"\r\n                                        // })\r\n                                    }}\r\n                                    colorScheme={'teal'}\r\n                                    icon={<ArrowDownIcon/>}/>\r\n                            </Tooltip>\r\n                        </HStack>\r\n                        <Flex p={1} position={'fixed'} left={0} top={0} m={10}>\r\n                            <Button size={'md'} colorScheme={'teal'} variant={'outline'} leftIcon={<TimeIcon/>}>23:00\r\n                                left</Button>\r\n                        </Flex>\r\n                    </Box>\r\n\r\n\r\n                }\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;"]},"metadata":{},"sourceType":"module"}