{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\home\\\\CreateQuizDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Box, Button, ButtonGroup, FormControl, FormHelperText, FormLabel, HStack, Input, Radio, RadioGroup, Select, Text, useRadio, useRadioGroup, VStack, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useQuiz } from \"../../context/QuizProvider\";\nimport { MdArrowDropDown } from \"react-icons/all\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateQuizDialog = ({\n  setShow,\n  onClose\n}) => {\n  _s();\n\n  const [savedSubjects, setSubjects] = useState([]);\n  const [quizName, setQuizName] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [quizNameError, setQuizNameError] = useState(null);\n  const [subjectError, setSubjectError] = useState(null);\n  const history = useHistory();\n  const {\n    quizNew,\n    createQuiz\n  } = useQuiz();\n  useEffect(() => {\n    //\n    if (quizNew != null) {\n      setQuizName(quizNew.title == null ? '' : quizNew.title);\n      setSelectedSubject(quizNew.subject == null ? '' : quizNew.subject);\n    }\n\n    getSubjects().then(r => setSubjects(r));\n  }, [quizNew]);\n\n  const getSubjects = async () => {\n    try {\n      let resp = await axios.get(\"http://localhost:8080/api/v1/public/subject\");\n\n      if (resp.status === 200) {\n        return resp.data;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: 'gray.100' // bg={'teal.500'}\n      ,\n      zIndex: 1000,\n      position: 'fixed',\n      top: '50%',\n      boxShadow: 'xl',\n      right: '50%',\n      align: 'start',\n      borderRadius: 'xl',\n      transform: 'translate(50%,-50%)',\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        align: 'start',\n        p: 4,\n        width: '500px',\n        maxW: ['360px', '500px'],\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          align: 'start',\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: '20px',\n            fontWeight: 'medium',\n            children: \"Create a Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          color: 'gray.600',\n          align: 'start',\n          w: '100%',\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontWeight: 'normal',\n              children: \"1. Name this quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              onChange: e => {\n                setQuizName(e.target.value);\n                setQuizNameError(null);\n              },\n              value: quizName,\n              isInvalid: quizNameError != null,\n              borderColor: 'grey.600',\n              width: '100%',\n              variant: \"outline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), quizNameError && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              color: 'crimson',\n              children: quizNameError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            align: 'start',\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontWeight: 'normal',\n              children: \"2. Choose revelant subjects\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Wrap, {\n              spacing: 2,\n              children: savedSubjects.map((item, i) => /*#__PURE__*/_jsxDEV(WrapItem, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  value: item.name,\n                  onClick: e => {\n                    console.log(item.name);\n                    setSelectedSubject(item.name);\n                  },\n                  bg: item.name === selectedSubject ? 'teal' : 'white',\n                  color: item.name === selectedSubject ? 'white' : 'gray',\n                  colorScheme: 'gray',\n                  role: \"checkbox\" // defaultChecked={true}\n                  ,\n                  size: 'xs',\n                  variant: 'outline',\n                  maxH: '60',\n                  maxW: '60',\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 45\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            pt: 5,\n            w: '100%',\n            justify: 'end',\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setShow(false);\n              },\n              colorScheme: \"gray\",\n              fontWeight: 'normal',\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              fontWeight: 'normal',\n              onClick: () => {\n                if (quizName == null || quizName.length === 0) {\n                  setQuizNameError(\"Please enter a quiz name\");\n                  return;\n                }\n\n                if (selectedSubject == null || selectedSubject.length === 0) {\n                  setSubjectError('Please select a selectedSubject');\n                  return;\n                }\n\n                setShow(false);\n                createQuiz({ ...quizNew,\n                  title: quizName,\n                  subject: selectedSubject\n                });\n                onClose(); // history.push(\"/admin/quiz\");\n              },\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateQuizDialog, \"7M66SFF4XaWz+Xap22n2+UttOvc=\", false, function () {\n  return [useHistory, useQuiz];\n});\n\n_c = CreateQuizDialog;\nexport default CreateQuizDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateQuizDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/home/CreateQuizDialog.js"],"names":["React","useContext","useEffect","useState","Box","Button","ButtonGroup","FormControl","FormHelperText","FormLabel","HStack","Input","Radio","RadioGroup","Select","Text","useRadio","useRadioGroup","VStack","Wrap","WrapItem","useHistory","useQuiz","MdArrowDropDown","axios","CreateQuizDialog","setShow","onClose","savedSubjects","setSubjects","quizName","setQuizName","selectedSubject","setSelectedSubject","quizNameError","setQuizNameError","subjectError","setSubjectError","history","quizNew","createQuiz","title","subject","getSubjects","then","r","resp","get","status","data","e","console","error","target","value","map","item","i","name","log","length"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button, ButtonGroup,\r\n    FormControl, FormHelperText,\r\n    FormLabel,\r\n    HStack,\r\n    Input, Radio, RadioGroup, Select,\r\n    Text,\r\n    useRadio, useRadioGroup,\r\n    VStack,\r\n    Wrap,\r\n    WrapItem\r\n} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useQuiz} from \"../../context/QuizProvider\";\r\nimport {MdArrowDropDown} from \"react-icons/all\";\r\nimport axios from \"axios\";\r\n\r\nconst CreateQuizDialog = ({setShow, onClose}) => {\r\n\r\n    const [savedSubjects, setSubjects] = useState([]);\r\n\r\n    const [quizName, setQuizName] = useState('');\r\n    const [selectedSubject, setSelectedSubject] = useState('');\r\n    const [quizNameError, setQuizNameError] = useState(null);\r\n    const [subjectError, setSubjectError] = useState(null);\r\n\r\n    const history = useHistory();\r\n    const {quizNew, createQuiz} = useQuiz();\r\n\r\n    useEffect(() => {\r\n        //\r\n        if (quizNew != null) {\r\n            setQuizName(quizNew.title == null ? '' : quizNew.title);\r\n            setSelectedSubject(quizNew.subject == null ? '' : quizNew.subject);\r\n        }\r\n        getSubjects().then(r => setSubjects(r));\r\n    }, [quizNew]);\r\n\r\n    const getSubjects = async () => {\r\n        try {\r\n            let resp = await axios.get(\"http://localhost:8080/api/v1/public/subject\")\r\n            if (resp.status === 200) {\r\n                return resp.data;\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Box\r\n                bg={'gray.100'}\r\n                // bg={'teal.500'}\r\n                zIndex={1000}\r\n                position={'fixed'}\r\n                top={'50%'}\r\n                boxShadow={'xl'}\r\n                right={'50%'}\r\n                align={'start'}\r\n                borderRadius={'xl'}\r\n                transform={\r\n                    'translate(50%,-50%)'\r\n                }\r\n            >\r\n                <VStack align={'start'} p={4} width={'500px'} maxW={['360px', '500px']}>\r\n                    <HStack align={'start'}>\r\n                        <Text fontSize={'20px'} fontWeight={'medium'}>Create a Quiz</Text>\r\n                    </HStack>\r\n\r\n                    <VStack color={'gray.600'} align={'start'} w={'100%'}>\r\n                        <FormControl>\r\n                            <FormLabel fontWeight={'normal'}>\r\n                                1. Name this quiz\r\n                            </FormLabel>\r\n                            {/*1. quiz name*/}\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setQuizName(e.target.value);\r\n                                    setQuizNameError(null);\r\n                                }}\r\n                                value={quizName}\r\n                                isInvalid={quizNameError != null}\r\n                                borderColor={'grey.600'}\r\n                                width={'100%'}\r\n                                variant=\"outline\"/>\r\n                            {\r\n                                quizNameError && <FormHelperText color={'crimson'}>{quizNameError}</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        {/*2. CHOICE A SUBJECT*/}\r\n                        <VStack w={'100%'} align={'start'}>\r\n                            <FormLabel fontWeight={'normal'}>\r\n                                2. Choose revelant subjects\r\n                            </FormLabel>\r\n                            <Wrap spacing={2}>\r\n                                {\r\n                                    savedSubjects.map((item, i) => (\r\n                                        <WrapItem key={i}>\r\n                                            <Button\r\n                                                value={item.name}\r\n                                                onClick={(e) => {\r\n                                                    console.log(item.name);\r\n                                                    setSelectedSubject(item.name);\r\n                                                }}\r\n                                                bg={\r\n                                                    item.name === selectedSubject ?\r\n                                                        'teal' :\r\n                                                        'white'\r\n                                                }\r\n                                                color={\r\n                                                    item.name === selectedSubject ?\r\n                                                        'white' :\r\n                                                        'gray'\r\n                                                }\r\n                                                colorScheme={'gray'}\r\n                                                role={\"checkbox\"}\r\n                                                // defaultChecked={true}\r\n                                                size={'xs'}\r\n                                                variant={'outline'}\r\n                                                maxH={'60'}\r\n                                                maxW={'60'}>{item.name}</Button>\r\n                                        </WrapItem>\r\n\r\n                                    ))\r\n                                }\r\n                            </Wrap>\r\n\r\n                        </VStack>\r\n                        <HStack pt={5} w={'100%'} justify={'end'}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setShow(false);\r\n                                }}\r\n                                colorScheme=\"gray\" fontWeight={'normal'}>Cancel</Button>\r\n                            <Button\r\n                                colorScheme=\"teal\"\r\n                                fontWeight={'normal'}\r\n                                onClick={() => {\r\n                                    if (quizName == null || quizName.length === 0) {\r\n                                        setQuizNameError(\"Please enter a quiz name\");\r\n                                        return;\r\n                                    }\r\n                                    if (selectedSubject == null || selectedSubject.length === 0) {\r\n                                        setSubjectError('Please select a selectedSubject');\r\n                                        return;\r\n                                    }\r\n                                    setShow(false);\r\n\r\n                                    createQuiz({\r\n                                        ...quizNew,\r\n                                        title: quizName,\r\n                                        subject: selectedSubject,\r\n                                    });\r\n                                    onClose();\r\n                                    // history.push(\"/admin/quiz\");\r\n                                }}\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n\r\n\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CreateQuizDialog;"]},"metadata":{},"sourceType":"module"}