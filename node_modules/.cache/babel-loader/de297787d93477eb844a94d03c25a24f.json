{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\quiz maker client\\\\src\\\\pages\\\\admin\\\\assigment\\\\EditAssignment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AdminContext } from \"../../../providers/AdminSettingProvider\";\nimport UserService from \"../../../service/UserService\";\nimport { Box, Button, Flex, FormControl, FormLabel, forwardRef, HStack, Input, Tag, TagCloseButton, TagLabel, Text, Textarea, useToast, VStack, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport DatePicker from \"react-datepicker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditAssignment = () => {\n  _s();\n\n  const {\n    getQuizDetail,\n    quiz\n  } = useContext(QuizEditContext);\n  const {\n    isLoading,\n    setLoading\n  } = useContext(AdminContext);\n  const {\n    id\n  } = useParams();\n  const [email, setEmail] = useState(\"\");\n  const [err, setErr] = useState('');\n  const [assignment, setAssignment] = useState({\n    quizId: id,\n    emails: [],\n    startDate: new Date()\n  });\n  const history = useHistory();\n  useEffect(async () => {\n    var _history$location$sta;\n\n    const data = (_history$location$sta = history.location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.data;\n    await getQuizDetail(data.id); // const resp = await UserService.getAssignmentReport(id);\n  }, []);\n  const toast = useToast();\n  const ExampleCustomInput = forwardRef(({\n    value,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"example-custom-input\",\n    onClick: onClick,\n    ref: ref,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this));\n\n  const getReport = async () => {\n    setLoading(true);\n\n    try {\n      const resp = await UserService.getAssignmentReport(id); // setReport(resp.data)\n\n      console.log(resp.data);\n      const data = resp.data;\n    } catch (e) {} finally {\n      setLoading(false);\n    }\n  };\n\n  const assignToUsers = async () => {\n    if (assignment.startDate != null && assignment.finishDate != null && assignment.title != null) {\n      setLoading(true);\n      console.log('assigning....');\n\n      try {\n        const data = await UserService.assignToUsers(assignment);\n\n        for (let i = 0; i < data.users.length; i++) {\n          const email = data.users[i].userInfo.email;\n          setAssignment(prev => ({ ...prev,\n            emails: [...prev.email, email]\n          }));\n        }\n\n        console.log(\"assign success\");\n      } catch (e) {\n        console.log(\"Could not assign quiz to users! \", e);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      toast(\"Please select finish date!\");\n    }\n\n    console.log(assignment);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      w: '100%',\n      minH: '100vh',\n      children: !isLoading && /*#__PURE__*/_jsxDEV(VStack, {\n        w: '100%',\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          p: 5,\n          bg: 'white',\n          w: '100%',\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: quiz && quiz.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          w: '100%',\n          children: [/*#__PURE__*/_jsxDEV(VStack, {\n            flex: 8,\n            w: '100%',\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(HStack, {\n              w: '100%',\n              children: /*#__PURE__*/_jsxDEV(FormControl, {\n                id: \"title\",\n                isRequired: true,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  children: \"Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  onChange: e => setAssignment(prev => ({ ...prev,\n                    title: e.target.value\n                  })),\n                  value: assignment.title || '',\n                  bg: 'white',\n                  placeholder: \"Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"Description\",\n              isRequired: true,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n                onChange: e => setAssignment(prev => ({ ...prev,\n                  description: e.target.value\n                })),\n                value: assignment.description || '',\n                bg: 'white',\n                placeholder: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            flex: 3,\n            bg: 'white',\n            p: 2,\n            mx: 2,\n            minH: '100vh',\n            children: /*#__PURE__*/_jsxDEV(VStack, {\n              align: 'start',\n              w: '100%',\n              spacing: 5,\n              children: [/*#__PURE__*/_jsxDEV(VStack, {\n                w: '100%',\n                align: 'start',\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  children: \"Deadline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                  customInput: /*#__PURE__*/_jsxDEV(ExampleCustomInput, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 62\n                  }, this),\n                  selected: assignment.startDate,\n                  onChange: date => setAssignment(prev => ({ ...prev,\n                    startDate: date\n                  })),\n                  showTimeSelect: true,\n                  timeFormat: \"HH:mm\",\n                  dateFormat: \"HH:mm dd-MM-yyyy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                  customInput: /*#__PURE__*/_jsxDEV(ExampleCustomInput, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 62\n                  }, this),\n                  selected: assignment.finishDate,\n                  onChange: date => setAssignment(prev => ({ ...prev,\n                    finishDate: date\n                  })),\n                  showTimeSelect: true,\n                  timeFormat: \"HH:mm\",\n                  dateFormat: \"HH:mm dd-MM-yyyy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(VStack, {\n                children: [/*#__PURE__*/_jsxDEV(Wrap, {\n                  w: \"100%\",\n                  children: assignment.emails && assignment.emails.map(email => /*#__PURE__*/_jsxDEV(WrapItem, {\n                    children: /*#__PURE__*/_jsxDEV(Tag, {\n                      size: \"sm\",\n                      borderRadius: \"full\",\n                      variant: \"solid\",\n                      colorScheme: \"green\",\n                      children: [/*#__PURE__*/_jsxDEV(TagLabel, {\n                        children: email\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 167,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(TagCloseButton, {\n                        onClick: () => {\n                          console.log(email);\n                          setAssignment(prev => ({ ...prev,\n                            emails: prev.emails.filter(e => e !== email)\n                          }));\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 168,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 57\n                    }, this)\n                  }, email, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 53\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(HStack, {\n                  w: \"100%\",\n                  children: [/*#__PURE__*/_jsxDEV(Input, {\n                    size: \"sm\",\n                    value: email,\n                    onChange: e => setEmail(e.target.value),\n                    placeholder: \"Email to share. Ex: test@gmail.com\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: () => {\n                      if (!assignment.emails.includes(email)) {\n                        setAssignment(prev => ({ ...prev,\n                          emails: [...prev.emails, email]\n                        }));\n                      }\n\n                      setEmail(\"\");\n                    },\n                    isDisabled: email.length === 0,\n                    size: \"sm\",\n                    colorScheme: \"purple\",\n                    children: \"Add\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: 'sm',\n                onClick: assignToUsers,\n                alignSelf: 'end',\n                colorScheme: 'blue',\n                children: \"Giao B\\xE0i\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditAssignment, \"Ry+j1MQb5mjfkR4B7Pa5mWuh98I=\", false, function () {\n  return [useParams, useHistory, useToast];\n});\n\n_c = EditAssignment;\nexport default EditAssignment;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditAssignment\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/quiz maker client/src/pages/admin/assigment/EditAssignment.js"],"names":["React","useContext","useEffect","useState","useHistory","useParams","QuizEditContext","AdminContext","UserService","Box","Button","Flex","FormControl","FormLabel","forwardRef","HStack","Input","Tag","TagCloseButton","TagLabel","Text","Textarea","useToast","VStack","Wrap","WrapItem","DatePicker","EditAssignment","getQuizDetail","quiz","isLoading","setLoading","id","email","setEmail","err","setErr","assignment","setAssignment","quizId","emails","startDate","Date","history","data","location","state","toast","ExampleCustomInput","value","onClick","ref","getReport","resp","getAssignmentReport","console","log","e","assignToUsers","finishDate","title","i","users","length","userInfo","prev","target","description","date","map","filter","includes"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AdminContext} from \"../../../providers/AdminSettingProvider\";\r\nimport UserService from \"../../../service/UserService\";\r\nimport {\r\n    Box, Button,\r\n    Flex,\r\n    FormControl,\r\n    FormLabel,\r\n    forwardRef,\r\n    HStack,\r\n    Input, Tag, TagCloseButton, TagLabel,\r\n    Text,\r\n    Textarea,\r\n    useToast,\r\n    VStack, Wrap, WrapItem\r\n} from \"@chakra-ui/react\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nconst EditAssignment = () => {\r\n    const {getQuizDetail, quiz} = useContext(QuizEditContext);\r\n    const {isLoading, setLoading} = useContext(AdminContext);\r\n    const {id} = useParams();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [err, setErr] = useState('');\r\n    const [assignment, setAssignment] = useState({\r\n        quizId: id,\r\n        emails: [],\r\n        startDate: new Date(),\r\n\r\n    })\r\n    const history = useHistory();\r\n    useEffect(async () => {\r\n        const data = history.location.state?.data\r\n        await getQuizDetail(data.id);\r\n        // const resp = await UserService.getAssignmentReport(id);\r\n    }, []);\r\n    const toast = useToast();\r\n    const ExampleCustomInput = forwardRef(({value, onClick}, ref) => (\r\n        <button className=\"example-custom-input\" onClick={onClick} ref={ref}>\r\n            {value}\r\n        </button>\r\n    ));\r\n    const getReport = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const resp = await UserService.getAssignmentReport(id);\r\n            // setReport(resp.data)\r\n            console.log(resp.data);\r\n            const data = resp.data;\r\n\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const assignToUsers = async () => {\r\n        if (assignment.startDate != null && assignment.finishDate != null && assignment.title != null) {\r\n            setLoading(true);\r\n            console.log('assigning....')\r\n            try {\r\n                const data = await UserService.assignToUsers(assignment);\r\n                for (let i = 0; i < data.users.length; i++) {\r\n                    const email = data.users[i].userInfo.email;\r\n                    setAssignment((prev) => ({\r\n                        ...prev,\r\n                        emails: [...prev.email, email]\r\n                    }))\r\n                }\r\n                console.log(\"assign success\")\r\n            } catch (e) {\r\n                console.log(\"Could not assign quiz to users! \", e)\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            toast(\"Please select finish date!\")\r\n        }\r\n        console.log(assignment)\r\n    }\r\n    return (\r\n        <>\r\n            <Box w={'100%'} minH={'100vh'}>\r\n                {\r\n                    !isLoading && (\r\n                        <VStack w={'100%'}>\r\n                            <Box p={5} bg={'white'} w={'100%'}>\r\n                                <HStack>\r\n                                    <Text>{quiz && quiz.title}</Text>\r\n                                </HStack>\r\n                            </Box>\r\n                            <Flex w={'100%'}>\r\n                                <VStack flex={8} w={'100%'} spacing={2}>\r\n                                    {/*TITLE*/}\r\n                                    <HStack w={'100%'}>\r\n                                        <FormControl id=\"title\" isRequired>\r\n                                            <FormLabel>Title</FormLabel>\r\n                                            <Input\r\n                                                onChange={(e) =>\r\n                                                    setAssignment(prev => (\r\n                                                        {\r\n                                                            ...prev,\r\n                                                            title: e.target.value\r\n                                                        }\r\n                                                    ))}\r\n                                                value={assignment.title || ''}\r\n                                                bg={'white'} placeholder=\"Title\"/>\r\n                                        </FormControl>\r\n                                    </HStack>\r\n                                    {/*    DESCRIPTION*/}\r\n                                    <FormControl id=\"Description\" isRequired>\r\n                                        <FormLabel>Description</FormLabel>\r\n                                        <Textarea\r\n                                            onChange={(e) =>\r\n                                                setAssignment(prev => (\r\n                                                    {\r\n                                                        ...prev,\r\n                                                        description: e.target.value\r\n                                                    }\r\n                                                ))}\r\n                                            value={assignment.description || ''}\r\n                                            bg={'white'} placeholder=\"Description\"/>\r\n                                    </FormControl>\r\n                                </VStack>\r\n                                <Box flex={3} bg={'white'} p={2} mx={2} minH={'100vh'}>\r\n                                    <VStack align={'start'} w={'100%'} spacing={5}>\r\n\r\n                                        <VStack w={'100%'} align={'start'}>\r\n                                            <Text>Deadline</Text>\r\n\r\n                                            <DatePicker\r\n                                                customInput={<ExampleCustomInput/>}\r\n                                                selected={assignment.startDate}\r\n                                                onChange={(date) => setAssignment((prev) => ({\r\n                                                    ...prev,\r\n                                                    startDate: (date)\r\n                                                }))}\r\n                                                showTimeSelect\r\n                                                timeFormat=\"HH:mm\"\r\n                                                dateFormat=\"HH:mm dd-MM-yyyy\"\r\n                                            />\r\n                                            <DatePicker\r\n                                                customInput={<ExampleCustomInput/>}\r\n                                                selected={assignment.finishDate}\r\n\r\n                                                onChange={(date) => setAssignment((prev) => ({\r\n                                                    ...prev,\r\n                                                    finishDate: (date)\r\n                                                }))}\r\n                                                showTimeSelect\r\n                                                timeFormat=\"HH:mm\"\r\n                                                dateFormat=\"HH:mm dd-MM-yyyy\"\r\n                                            />\r\n                                        </VStack>\r\n                                        <VStack>\r\n                                            <Wrap w={\"100%\"}>\r\n                                                {assignment.emails && assignment.emails.map((email) => (\r\n                                                    <WrapItem key={email}>\r\n                                                        <Tag\r\n                                                            size={\"sm\"}\r\n                                                            borderRadius=\"full\"\r\n                                                            variant=\"solid\"\r\n                                                            colorScheme=\"green\"\r\n                                                        >\r\n                                                            <TagLabel>{email}</TagLabel>\r\n                                                            <TagCloseButton\r\n                                                                onClick={() => {\r\n                                                                    console.log(email)\r\n                                                                    setAssignment(prev => ({\r\n                                                                        ...prev,\r\n                                                                        emails: prev.emails.filter(e => e !== email)\r\n                                                                    }))\r\n                                                                }}\r\n                                                            />\r\n                                                        </Tag>\r\n                                                    </WrapItem>\r\n                                                ))}\r\n                                            </Wrap>\r\n                                            {/*INPUT & ADD BUTTOn*/}\r\n                                            <HStack w={\"100%\"}>\r\n                                                <Input\r\n                                                    size={\"sm\"}\r\n                                                    value={email}\r\n                                                    onChange={(e) => setEmail(e.target.value)}\r\n                                                    placeholder={\r\n                                                        \"Email to share. Ex: test@gmail.com\"\r\n                                                    }\r\n                                                />\r\n                                                <Button\r\n                                                    onClick={() => {\r\n                                                        if (!assignment.emails.includes(email)) {\r\n                                                            setAssignment(prev => ({\r\n                                                                ...prev,\r\n                                                                emails: [...prev.emails, email]\r\n                                                            }))\r\n                                                        }\r\n                                                        setEmail(\"\");\r\n\r\n                                                    }}\r\n                                                    isDisabled={email.length === 0}\r\n                                                    size={\"sm\"}\r\n                                                    colorScheme={\"purple\"}\r\n                                                >\r\n                                                    Add\r\n                                                </Button>\r\n                                            </HStack>\r\n                                        </VStack>\r\n                                        <Button\r\n                                            size={'sm'}\r\n                                            onClick={assignToUsers}\r\n                                            alignSelf={'end'} colorScheme={'blue'}>Giao Bài</Button>\r\n                                    </VStack>\r\n                                </Box>\r\n                            </Flex>\r\n                        </VStack>\r\n                    )\r\n                }\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditAssignment;"]},"metadata":{},"sourceType":"module"}