{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\QuizEditor.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Checkbox, Container, Heading, HStack, IconButton, Select, SimpleGrid, Spacer, Stack, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { useAdmin } from \"../../../hooks/useAuth\";\nimport { AddIcon, CopyIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AiOutlineTag, BsPen, MdArrowDropDown } from \"react-icons/all\";\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizEditor = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    quiz,\n    setQuiz\n  } = useContext(QuizEditContext);\n  const [sort, setSort] = useState('newest');\n  const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\n  useEffect(() => {\n    //fetch quiz details\n    const fetchQuizDetails = async () => {\n      const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/${id}`;\n\n      try {\n        const resp = await axios.get(url, {\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        resp.status === 200 && setQuiz(resp.data);\n        console.log(resp.data);\n      } catch (e) {\n        console.log(\"Failed to get quiz details with id \" + id);\n      }\n    };\n\n    fetchQuizDetails();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(VStack, {\n      align: 'start',\n      w: '100%',\n      minH: '100vh',\n      children: [/*#__PURE__*/_jsxDEV(HStack, {\n        spacing: 4,\n        color: 'white',\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          px: 4,\n          colorScheme: 'teal',\n          leftIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 67\n          }, this),\n          children: quiz && quiz.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowNewQuestionDialog(true),\n          px: 4,\n          colorScheme: 'linkedin',\n          leftIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 39\n          }, this),\n          children: \"New Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          px: 4,\n          colorScheme: 'purple',\n          leftIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 69\n          }, this),\n          children: \"Quiz title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          px: 4,\n          colorScheme: 'messenger',\n          leftIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 72\n          }, this),\n          children: \"Quiz title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          bg: \"tomato\",\n          onChange: e => {\n            setSort(e.target.value);\n            const reversed = quiz.questions.reverse();\n            setQuiz(prevState => ({ ...prevState,\n              questions: reversed\n            }));\n          },\n          borderColor: \"tomato\",\n          maxW: 20,\n          colorScheme: 'teal',\n          icon: /*#__PURE__*/_jsxDEV(MdArrowDropDown, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 66\n          }, this),\n          variant: \"filled\",\n          placeholder: \"Sort by\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 'newest',\n            children: \"Newest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 'oldest',\n            children: \"Oldest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), quiz && quiz.questions.map((question, index) => /*#__PURE__*/_jsxDEV(Box, {\n        boxShadow: \"sm\",\n        my: 5,\n        borderRadius: \"md\",\n        align: \"start\",\n        textAlign: \"start\",\n        h: \"100%\",\n        bg: \"white\",\n        maxW: \"600px\",\n        minW: \"600px\",\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          p: 2,\n          bg: \"gray.200\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: [\"Question \", sort === \"newest\" ? question.options.length - index : index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"edit\",\n            color: \"teal.200\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              icon: /*#__PURE__*/_jsxDEV(BsPen, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 55\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            color: \"red.500\",\n            label: \"remove\",\n            children: /*#__PURE__*/_jsxDEV(IconButton // onClick={onDeleteQuestion}\n            , {\n              icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            label: \"duplicate\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              icon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 55\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          align: \"start\",\n          p: 2,\n          spacing: 5,\n          children: [/*#__PURE__*/_jsxDEV(Container, {\n            maxW: \"3xl\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              maxW: \"3xl\",\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                fontWeight: \"medium\",\n                children: question.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n            w: \"100%\",\n            align: \"start\",\n            columns: 2,\n            spacing: 2,\n            children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(Container, {\n              maxW: \"xl\",\n              centerContent: true,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                py: 4,\n                w: \"100%\",\n                maxW: \"3xl\",\n                align: \"start\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  w: \"100%\",\n                  size: \"md\",\n                  disabled: true // isChecked={option.isChecked}\n                  ,\n                  children: option.content\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          bg: \"gray.200\",\n          p: 1,\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            size: \"sm\",\n            maxW: \"100\",\n            bg: \"white\",\n            name: \"queston seconds\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"option1\",\n              children: \"30 secs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"option2\",\n              children: \"15 secs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"option3\",\n              children: \"45 secs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            colorScheme: \"white\",\n            variant: \"ghost\",\n            leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineTag, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 47\n            }, this),\n            children: \"Tag topics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), showNewQuestionDialog && /*#__PURE__*/_jsxDEV(NewQuestionDialog, {\n      visible: showNewQuestionDialog,\n      setVisible: setShowNewQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuizEditor, \"WAGGhb9YZaCr/V6WFmpf5962neI=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizEditor;\nexport default QuizEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEditor\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/QuizEditor.js"],"names":["Box","Button","Checkbox","Container","Heading","HStack","IconButton","Select","SimpleGrid","Spacer","Stack","Text","Tooltip","VStack","React","useContext","useEffect","useState","axios","useParams","useAdmin","AddIcon","CopyIcon","DeleteIcon","EditIcon","QuizEditContext","AiOutlineTag","BsPen","MdArrowDropDown","NewQuestionDialog","QuizEditor","id","quiz","setQuiz","sort","setSort","showNewQuestionDialog","setShowNewQuestionDialog","fetchQuizDetails","url","resp","get","headers","localStorage","getItem","status","data","console","log","e","title","target","value","reversed","questions","reverse","prevState","map","question","index","options","length","option","content"],"mappings":"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","sourcesContent":["import {\r\n    Box,\r\n    Button, Checkbox,\r\n    Container,\r\n    Heading,\r\n    HStack,\r\n    IconButton, Select,\r\n    SimpleGrid,\r\n    Spacer, Stack,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useAdmin} from \"../../../hooks/useAuth\";\r\nimport {AddIcon, CopyIcon, DeleteIcon, EditIcon} from \"@chakra-ui/icons\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AiOutlineTag, BsPen, MdArrowDropDown} from \"react-icons/all\";\r\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\r\n\r\nconst QuizEditor = () => {\r\n    const {id} = useParams();\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const [sort, setSort] = useState('newest');\r\n    const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\r\n    useEffect(() => {\r\n        //fetch quiz details\r\n        const fetchQuizDetails = async () => {\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/${id}`;\r\n            try {\r\n                const resp = await axios.get(url, {\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\r\n                    }\r\n                })\r\n                resp.status === 200 && setQuiz(resp.data);\r\n                console.log(resp.data)\r\n            } catch (e) {\r\n                console.log(\"Failed to get quiz details with id \" + id);\r\n            }\r\n        }\r\n        fetchQuizDetails();\r\n    }, [])\r\n    return (\r\n        <>\r\n            <VStack align={'start'} w={'100%'} minH={'100vh'}>\r\n\r\n                <HStack spacing={4} color={'white'}>\r\n                    <Button px={4} colorScheme={'teal'} leftIcon={<EditIcon/>}>\r\n                        {quiz && quiz.title}\r\n                    </Button>\r\n                    <Button onClick={() => setShowNewQuestionDialog(true)} px={4} colorScheme={'linkedin'}\r\n                            leftIcon={<AddIcon/>}>\r\n                        New Question\r\n                    </Button>\r\n                    <Button px={4} colorScheme={'purple'} leftIcon={<EditIcon/>}>\r\n                        Quiz title\r\n                    </Button>\r\n                    <Button px={4} colorScheme={'messenger'} leftIcon={<EditIcon/>}>\r\n                        Quiz title\r\n                    </Button>\r\n                    <Select bg=\"tomato\"\r\n                            onChange={(e) => {\r\n                                setSort(e.target.value);\r\n                                const reversed = quiz.questions.reverse();\r\n                                setQuiz((prevState) => ({\r\n                                    ...prevState,\r\n                                    questions: reversed,\r\n                                }))\r\n                                ;\r\n                            }}\r\n                            borderColor=\"tomato\"\r\n                            maxW={20} colorScheme={'teal'} icon={<MdArrowDropDown/>}\r\n                            variant=\"filled\"\r\n                            placeholder=\"Sort by\">\r\n                        <option value={'newest'}>Newest</option>\r\n                        <option value={'oldest'}>Oldest</option>\r\n                    </Select>\r\n                </HStack>\r\n\r\n                {/*    QUESTION*/}\r\n                {\r\n                    quiz && quiz.questions.map((question, index) => (\r\n                        <Box\r\n                            key={index}\r\n                            boxShadow={\"sm\"}\r\n                            my={5}\r\n                            borderRadius={\"md\"}\r\n                            align={\"start\"}\r\n                            textAlign={\"start\"}\r\n                            h={\"100%\"}\r\n                            bg={\"white\"}\r\n                            maxW={\"600px\"}\r\n                            minW={\"600px\"}\r\n                        >\r\n                            <HStack p={2} bg={\"gray.200\"}>\r\n                                {/*QUESTION INDEX*/}\r\n                                <Text>Question {sort === \"newest\" ? (question.options.length - index) : index + 1}</Text>\r\n                                <Spacer/>\r\n                                <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                                    <IconButton icon={<BsPen/>}/>\r\n                                </Tooltip>\r\n                                <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                                    <IconButton\r\n                                        // onClick={onDeleteQuestion}\r\n                                        icon={<DeleteIcon/>}\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip label={\"duplicate\"}>\r\n                                    <IconButton icon={<CopyIcon/>}/>\r\n                                </Tooltip>\r\n                            </HStack>\r\n                            <VStack align={\"start\"} p={2} spacing={5}>\r\n                                {/*QUESTION TITLE*/}\r\n                                <Container maxW=\"3xl\">\r\n                                    <Box maxW=\"3xl\">\r\n                                        <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                                    </Box>\r\n                                </Container>\r\n                                <SimpleGrid\r\n                                    w={\"100%\"}\r\n                                    align={\"start\"}\r\n                                    columns={2}\r\n                                    spacing={2}\r\n                                >\r\n                                    {\r\n                                        question.options.map((option, index) => (\r\n                                            <Container maxW=\"xl\" centerContent>\r\n                                                <Box\r\n                                                    py={4}\r\n                                                    w={\"100%\"}\r\n                                                    maxW=\"3xl\"\r\n                                                    align={\"start\"}\r\n                                                >\r\n\r\n                                                    <Checkbox\r\n                                                        key={index}\r\n                                                        w={\"100%\"}\r\n                                                        size={\"md\"}\r\n                                                        disabled={true}\r\n                                                        // isChecked={option.isChecked}\r\n                                                    >\r\n                                                        {option.content}\r\n                                                    </Checkbox>\r\n\r\n\r\n                                                </Box>\r\n                                            </Container>\r\n                                        ))\r\n                                    }\r\n                                </SimpleGrid>\r\n                            </VStack>\r\n                            <HStack bg={\"gray.200\"} p={1}>\r\n                                <Select\r\n                                    size={\"sm\"}\r\n                                    maxW={\"100\"}\r\n                                    bg={\"white\"}\r\n                                    name={\"queston seconds\"}\r\n                                >\r\n                                    <option value=\"option1\">30 secs</option>\r\n                                    <option value=\"option2\">15 secs</option>\r\n                                    <option value=\"option3\">45 secs</option>\r\n                                </Select>\r\n                                <Button\r\n                                    size={\"sm\"}\r\n                                    colorScheme={\"white\"}\r\n                                    variant={\"ghost\"}\r\n                                    leftIcon={<AiOutlineTag/>}\r\n                                >\r\n                                    Tag topics\r\n                                </Button>\r\n                            </HStack>\r\n                        </Box>\r\n\r\n                    ))\r\n                }\r\n            </VStack>\r\n\r\n            {showNewQuestionDialog &&\r\n            <NewQuestionDialog visible={showNewQuestionDialog} setVisible={setShowNewQuestionDialog}/>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuizEditor;"]},"metadata":{},"sourceType":"module"}