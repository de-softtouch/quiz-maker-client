{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\providers\\\\AuthProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [isLoading, setLoading] = useState(true); //login\n\n  const login = async (email, password, remember) => {\n    let url = \"http://localhost:8080/api/v1/auth/login\";\n    let data = {\n      \"email\": email,\n      \"password\": password\n    };\n\n    try {\n      const resp = await axios.post(url, data, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (resp.status === 200) {\n        localStorage.setItem(\"accessToken\", resp.data.access_token);\n        localStorage.setItem(\"refreshToken\", resp.data.refresh_token);\n        return true;\n      }\n    } catch (e) {\n      return false;\n    }\n  }; //logout\n\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  };\n\n  const getUserDetails = async () => {\n    let accessToken = localStorage.getItem('accessToken');\n\n    if (accessToken != null) {\n      setLoading(true);\n      let url = \"http://localhost:8080/api/v1/member/users/user-details\";\n\n      try {\n        const resp = await axios.get(url, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${accessToken}`\n          }\n        });\n\n        if (resp.status === 200) {\n          return resp.data;\n        }\n      } catch (e) {\n        return null;\n      }\n    }\n  }; //create value\n\n\n  const value = {\n    user,\n    setUser,\n    login,\n    logout,\n    isAuthenticated,\n    setAuthenticated,\n    getUserDetails\n  };\n  useEffect(() => {\n    setLoading(true);\n    getUserDetails().then(data => setUser(data));\n    setLoading(false); // setLoading(true);\n    // const accessToken = localStorage.getItem(\"accessToken\");\n    // if (accessToken != null) {\n    //     setLoading(true);\n    //     let url = \"http://localhost:8080/api/v1/member/users/user-details\";\n    //     axios.get(url, {\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             \"Authorization\": `Bearer ${accessToken}`\n    //         }\n    //     })\n    //         .then(resp => {\n    //             if (resp.status === 200) {\n    //                 setUser(resp.data);\n    //                 console.log(resp.data);\n    //                 localStorage.setItem(\"user\", JSON.stringify(resp.data));\n    //                 return;\n    //             } else if (resp.status === 401) {\n    //                 //refresh token\n    //             } else {\n    //                 logout();\n    //             }\n    //         }).catch(\n    //         () => {\n    //             logout();\n    //             setLoading(false);\n    //         }\n    //     ).finally(() => {\n    //         setLoading(false);\n    //     })\n    //\n    // } else {\n    //     setLoading(false)\n    // }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isLoading && /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 31\n    }, this)\n  }, void 0, false);\n};\n\n_s(AuthProvider, \"mG/s7ak7DGhM5YnK01dXLhLFAeA=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/providers/AuthProvider.js"],"names":["React","createContext","useEffect","useState","Axios","axios","AuthContext","AuthProvider","children","user","setUser","isAuthenticated","setAuthenticated","isLoading","setLoading","login","email","password","remember","url","data","resp","post","headers","status","localStorage","setItem","access_token","refresh_token","e","logout","removeItem","getUserDetails","accessToken","getItem","get","value","then"],"mappings":"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","sourcesContent":["import React, {createContext, useEffect, useState} from \"react\";\r\nimport Axios from \"axios\";\r\nimport axios from \"axios\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({children}) => {\r\n\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setAuthenticated] = useState(false);\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    //login\r\n    const login = async (email, password, remember) => {\r\n        let url = \"http://localhost:8080/api/v1/auth/login\";\r\n        let data = {\r\n            \"email\": email,\r\n            \"password\": password\r\n        };\r\n\r\n        try {\r\n            const resp = await axios.post(url, data, {\r\n                headers: {\"Content-Type\": \"application/json\"}\r\n            })\r\n            if (resp.status === 200) {\r\n                localStorage.setItem(\"accessToken\", resp.data.access_token);\r\n                localStorage.setItem(\"refreshToken\", resp.data.refresh_token);\r\n                return true;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    };\r\n\r\n    //logout\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user')\r\n        localStorage.removeItem('accessToken')\r\n        localStorage.removeItem('refreshToken')\r\n    }\r\n    const getUserDetails = async () => {\r\n        let accessToken = localStorage.getItem('accessToken');\r\n        if (accessToken != null) {\r\n            setLoading(true);\r\n            let url = \"http://localhost:8080/api/v1/member/users/user-details\";\r\n            try {\r\n                const resp = await axios.get(url, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${accessToken}`\r\n                    }\r\n                })\r\n                if (resp.status === 200) {\r\n                    return resp.data;\r\n                }\r\n            } catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //create value\r\n    const value = {\r\n        user,\r\n        setUser,\r\n        login,\r\n        logout,\r\n        isAuthenticated,\r\n        setAuthenticated,\r\n        getUserDetails,\r\n    };\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getUserDetails().then(data => setUser(data));\r\n        setLoading(false);\r\n        // setLoading(true);\r\n        // const accessToken = localStorage.getItem(\"accessToken\");\r\n        // if (accessToken != null) {\r\n        //     setLoading(true);\r\n        //     let url = \"http://localhost:8080/api/v1/member/users/user-details\";\r\n        //     axios.get(url, {\r\n        //         headers: {\r\n        //             \"Content-Type\": \"application/json\",\r\n        //             \"Authorization\": `Bearer ${accessToken}`\r\n        //         }\r\n        //     })\r\n        //         .then(resp => {\r\n        //             if (resp.status === 200) {\r\n        //                 setUser(resp.data);\r\n        //                 console.log(resp.data);\r\n        //                 localStorage.setItem(\"user\", JSON.stringify(resp.data));\r\n        //                 return;\r\n        //             } else if (resp.status === 401) {\r\n        //                 //refresh token\r\n        //             } else {\r\n        //                 logout();\r\n        //             }\r\n        //         }).catch(\r\n        //         () => {\r\n        //             logout();\r\n        //             setLoading(false);\r\n        //         }\r\n        //     ).finally(() => {\r\n        //         setLoading(false);\r\n        //     })\r\n        //\r\n        // } else {\r\n        //     setLoading(false)\r\n        // }\r\n    }, []);\r\n    return (\r\n        <>\r\n            {\r\n                !isLoading && <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n            }\r\n        </>\r\n    )\r\n        ;\r\n};"]},"metadata":{},"sourceType":"module"}