{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\QuizEditor.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Checkbox, CircularProgress, Code, Container, Divider, Flex, HStack, IconButton, Input, InputGroup, InputRightAddon, Select, SimpleGrid, Spacer, Stack, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AiOutlineTag, BiSave, BsPen, HiDocumentDuplicate, MdArrowDropDown, MdEdit } from \"react-icons/all\";\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\nimport QuizEditDialog from \"./components/QuizEditDialog\";\nimport { AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay } from \"@chakra-ui/react\";\nimport EditQuestionDialog from \"./components/EditQuestionDialog\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport QuizService from \"../../../service/QuizService\";\nimport UserService from \"../../../service/UserService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizEditor = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    quiz,\n    setQuiz,\n    isLoading,\n    setLoading\n  } = useContext(QuizEditContext);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [sort, setSort] = useState('column'); //\n\n  const [isOpen, setOpen] = useState(false);\n  const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\n  const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\n  const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false); //\n\n  const [size, setSize] = useState('full');\n  const cancelRef = useRef(); //fetch quiz details\n\n  const fetchQuizDetails = async () => {\n    try {\n      const data = await UserService.getUserQuiz(id);\n      setQuiz(data.data);\n    } catch (e) {\n      console.log(\"Failed to get quiz details with id \" + id);\n    }\n  };\n\n  useEffect(() => {\n    console.log('quiz editor render');\n    fetchQuizDetails();\n  }, []);\n\n  const handleSaveQuiz = async () => {\n    try {\n      setLoading(true);\n      const resp = await QuizService.saveQuiz(quiz);\n      await fetchQuizDetails();\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onRemoveQuestion = async () => {\n    const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/questions/${selectedQuestion.id}`;\n\n    try {\n      const resp = await axios.delete(url, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (resp.status === 200) {\n        setQuiz(prev => ({ ...prev,\n          questions: prev.questions.filter(question => question.id !== selectedQuestion.id)\n        }));\n      }\n    } catch (e) {} finally {\n      setSelectedQuestion(null);\n      setOpen(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: 'center',\n      justifyItems: 'center',\n      alignContent: 'center',\n      direction: 'row',\n      children: [/*#__PURE__*/_jsxDEV(VStack, {\n        align: 'center',\n        w: '100%',\n        minH: '100vh',\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          mb: 4,\n          align: 'start',\n          alignSelf: 'start',\n          spacing: 4,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: 'sm',\n            onClick: () => setShowNewQuestionDialog(true),\n            px: 4,\n            colorScheme: 'linkedin',\n            leftIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 43\n            }, this),\n            children: \"New Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            size: 'sm',\n            onChange: e => {\n              setSort(e.target.value);\n              const reversed = quiz.questions.reverse();\n              setQuiz(prevState => ({ ...prevState,\n                questions: reversed\n              }));\n            },\n            bg: \"tomato\",\n            borderColor: \"tomato\",\n            maxW: 100,\n            icon: /*#__PURE__*/_jsxDEV(MdArrowDropDown, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 35\n            }, this) // variant=\"filled\"\n            ,\n            defaultValue: sort,\n            placeholder: \"Sort by\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: 'column',\n              children: \"Position\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 'column-reverse',\n              children: \"Reverse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: sort,\n          children: quiz && quiz.questions.map((question, index) => /*#__PURE__*/_jsxDEV(Box, {\n            boxShadow: \"sm\",\n            my: 5,\n            borderRadius: \"md\",\n            align: \"start\",\n            textAlign: \"start\",\n            h: \"100%\",\n            bg: 'white',\n            maxW: \"600px\",\n            minW: \"600px\",\n            children: [/*#__PURE__*/_jsxDEV(HStack, {\n              p: 2,\n              bg: \"gray.700\",\n              color: 'white',\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: [\"Question \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                label: \"edit\",\n                color: \"teal.200\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  bg: 'transparent',\n                  onClick: () => {\n                    setSelectedQuestion(question);\n                    setShowEditQuestionDialog(true);\n                  },\n                  icon: /*#__PURE__*/_jsxDEV(BsPen, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 55\n                  }, this),\n                  \"aria-label\": 'edit'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                color: \"red.500\",\n                label: \"remove\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  \"aria-label\": 'remove',\n                  onClick: () => {\n                    setOpen(true);\n                    setSelectedQuestion(question);\n                  },\n                  bg: 'transparent',\n                  icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 55\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                label: \"duplicate\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => {\n                    let q = quiz.questions[index];\n                    q = {\n                      title: q.title,\n                      options: q.options.map(option => ({\n                        content: option.content,\n                        score: option.score\n                      }))\n                    };\n                    setQuiz(prev => ({ ...quiz,\n                      questions: [...prev.questions, q]\n                    }));\n                    console.log(q);\n                  },\n                  \"aria-label\": 'duplicate',\n                  bg: 'transparent',\n                  icon: /*#__PURE__*/_jsxDEV(HiDocumentDuplicate, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 55\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(VStack, {\n              align: \"start\",\n              p: 2,\n              spacing: 5,\n              children: [/*#__PURE__*/_jsxDEV(Container, {\n                maxW: \"3xl\",\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  maxW: \"3xl\",\n                  children: /*#__PURE__*/_jsxDEV(Text, {\n                    fontWeight: \"medium\",\n                    children: question.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n                w: \"100%\",\n                align: \"start\",\n                columns: 2,\n                spacing: 2,\n                children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(Container, {\n                  maxW: \"xl\",\n                  centerContent: true,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    py: 4,\n                    w: \"100%\",\n                    maxW: \"3xl\",\n                    align: \"start\",\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      color: option.score > 0 && 'green',\n                      isChecked: option.score > 0 && true,\n                      colorScheme: option.score > 0 && 'green',\n                      w: \"100%\",\n                      size: \"md\" // disabled={true}\n                      // isChecked={option.isChecked}\n                      ,\n                      children: option.content\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 226,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 57\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(HStack, {\n              bg: \"gray.200\",\n              p: 1,\n              children: [/*#__PURE__*/_jsxDEV(Select, {\n                size: \"sm\",\n                maxW: \"100\",\n                bg: \"white\",\n                name: \"queston seconds\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option1\",\n                  children: \"30 secs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option2\",\n                  children: \"15 secs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option3\",\n                  children: \"45 secs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"sm\",\n                colorScheme: \"white\",\n                variant: \"ghost\",\n                leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineTag, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 55\n                }, this),\n                children: \"Tag topics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        minW: '300px',\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          w: '100%',\n          p: 4,\n          bg: 'white',\n          h: '300px',\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select // placeholder={quiz && !quiz.visibility ? 'Visibility' : ''}\n            , {\n              defaultValue: quiz && quiz.status ? quiz.status : 0,\n              onChange: e => setQuiz(prevState => ({ ...prevState,\n                status: e.target.value\n              })),\n              size: 'sm',\n              maxW: 40,\n              bg: 'blue.200',\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 0 && 'selected',\n                value: \"0\",\n                children: \"Draft\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 1 && 'selected',\n                value: \"1\",\n                children: \"Private\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 2 && 'selected',\n                value: \"2\",\n                children: \"Public\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            w: '100%',\n            size: 'sm',\n            onClick: () => {\n              setShowQuickEditQuiz(true);\n            },\n            colorScheme: 'gray',\n            leftIcon: /*#__PURE__*/_jsxDEV(MdEdit, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 60\n            }, this),\n            children: quiz && quiz.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              width: '50%',\n              fontWeight: 'medium',\n              children: \"Limit Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n              size: \"sm\",\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                type: 'number',\n                value: quiz && quiz.limitTime ? quiz.limitTime : 'No Limit Time',\n                onChange: e => setQuiz(prev => ({ ...prev,\n                  limitTime: e.target.value\n                })),\n                placeholder: \"default no limit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(InputRightAddon, {\n                children: \"mins\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            justifyContent: 'space-between',\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: 'medium',\n              children: \"Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Code, {\n              children: quiz && quiz.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleSaveQuiz(),\n            alignSelf: 'end',\n            leftIcon: /*#__PURE__*/_jsxDEV(BiSave, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 57\n            }, this),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NewQuestionDialog, {\n      size: size,\n      setSize: setSize,\n      visible: showNewQuestionDialog,\n      setVisible: setShowNewQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), showEditQuestionDialog && /*#__PURE__*/_jsxDEV(EditQuestionDialog, {\n      size: size,\n      setSize: setSize,\n      selectedQuestion: selectedQuestion,\n      visible: showEditQuestionDialog,\n      setVisible: setShowEditQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 43\n    }, this), showQuickEditQuiz && /*#__PURE__*/_jsxDEV(QuizEditDialog, {\n      isOpen: showQuickEditQuiz,\n      setOpen: setShowQuickEditQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n      position: 'fixed',\n      bottom: 10,\n      right: '10',\n      zIndex: 800,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        bg: 'teal',\n        color: 'white',\n        icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        bg: 'teal',\n        color: 'white',\n        icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        left: 0,\n        position: 'fixed',\n        top: 0,\n        minW: '100vw',\n        minH: '100vh',\n        zIndex: 100000,\n        bg: 'gray.100',\n        opacity: .5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n        transform: 'translate(50%,-50%)',\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        isIndeterminate: true,\n        color: \"green.300\",\n        zIndex: 100001,\n        align: 'center'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(AlertDialog, {\n      isOpen: isOpen,\n      leastDestructiveRef: cancelRef,\n      onClose: () => {\n        setOpen(false);\n        setSelectedQuestion(null);\n      },\n      children: /*#__PURE__*/_jsxDEV(AlertDialogOverlay, {\n        children: /*#__PURE__*/_jsxDEV(AlertDialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(AlertDialogHeader, {\n            fontSize: \"lg\",\n            fontWeight: \"bold\",\n            children: \"Remove Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogBody, {\n            children: \"Are you sure? You can't undo this action afterwards.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              ref: cancelRef,\n              onClick: () => {\n                setOpen(false);\n                setSelectedQuestion(null);\n              },\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"red\",\n              onClick: onRemoveQuestion,\n              ml: 3,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuizEditor, \"OI8I8X/zqxCYog/UsqA1LIWEwN8=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizEditor;\nexport default QuizEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEditor\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/QuizEditor.js"],"names":["Box","Button","Checkbox","CircularProgress","Code","Container","Divider","Flex","HStack","IconButton","Input","InputGroup","InputRightAddon","Select","SimpleGrid","Spacer","Stack","Text","Tooltip","VStack","React","useContext","useEffect","useRef","useState","axios","useParams","AddIcon","ArrowDownIcon","ArrowUpIcon","CopyIcon","DeleteIcon","EditIcon","QuizEditContext","AiOutlineTag","BiSave","BsPen","HiDocumentDuplicate","MdArrowDropDown","MdEdit","NewQuestionDialog","QuizEditDialog","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","EditQuestionDialog","DragDropContext","Draggable","Droppable","QuizService","UserService","QuizEditor","id","quiz","setQuiz","isLoading","setLoading","selectedQuestion","setSelectedQuestion","sort","setSort","isOpen","setOpen","showNewQuestionDialog","setShowNewQuestionDialog","showEditQuestionDialog","setShowEditQuestionDialog","showQuickEditQuiz","setShowQuickEditQuiz","size","setSize","cancelRef","fetchQuizDetails","data","getUserQuiz","e","console","log","handleSaveQuiz","resp","saveQuiz","error","response","status","headers","onRemoveQuestion","url","delete","localStorage","getItem","prev","questions","filter","question","target","value","reversed","reverse","prevState","map","index","q","title","options","option","content","score","limitTime","code"],"mappings":";;;AAAA,SACIA,GADJ,EAEIC,MAFJ,EAEYC,QAFZ,EAEsBC,gBAFtB,EAEwCC,IAFxC,EAGIC,SAHJ,EAGeC,OAHf,EAGwBC,IAHxB,EAIIC,MAJJ,EAKIC,UALJ,EAKgBC,KALhB,EAKuBC,UALvB,EAKmCC,eALnC,EAKoDC,MALpD,EAMIC,UANJ,EAOIC,MAPJ,EAOYC,KAPZ,EAQIC,IARJ,EASIC,OATJ,EAUIC,MAVJ,QAWO,kBAXP;AAYA,OAAOC,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8CC,QAA9C,QAA6D,OAA7D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,EAAiBC,aAAjB,EAAgCC,WAAhC,EAA6CC,QAA7C,EAAuDC,UAAvD,EAAmEC,QAAnE,QAAkF,kBAAlF;AACA,SAAQC,eAAR,QAA8B,qCAA9B;AACA,SAAQC,YAAR,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,mBAArC,EAA0DC,eAA1D,EAA2EC,MAA3E,QAAwF,iBAAxF;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SACIC,WADJ,EAEIC,eAFJ,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,kBALJ,EAMIC,kBANJ,QAOO,kBAPP;AAQA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAAQC,eAAR,EAAyBC,SAAzB,EAAoCC,SAApC,QAAoD,qBAApD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM;AAACC,IAAAA;AAAD,MAAO7B,SAAS,EAAtB;AACA,QAAM;AAAC8B,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,MAAyCtC,UAAU,CAACY,eAAD,CAAzD;AACA,QAAM,CAAC2B,gBAAD,EAAmBC,mBAAnB,IAA0CrC,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACsC,IAAD,EAAOC,OAAP,IAAkBvC,QAAQ,CAAC,QAAD,CAAhC,CAJqB,CAKrB;;AACA,QAAM,CAACwC,MAAD,EAASC,OAAT,IAAoBzC,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC0C,qBAAD,EAAwBC,wBAAxB,IAAoD3C,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAAC4C,sBAAD,EAAyBC,yBAAzB,IAAsD7C,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAAC8C,iBAAD,EAAoBC,oBAApB,IAA4C/C,QAAQ,CAAC,KAAD,CAA1D,CATqB,CAUrB;;AACA,QAAM,CAACgD,IAAD,EAAOC,OAAP,IAAkBjD,QAAQ,CAAC,MAAD,CAAhC;AACA,QAAMkD,SAAS,GAAGnD,MAAM,EAAxB,CAZqB,CAarB;;AACA,QAAMoD,gBAAgB,GAAG,YAAY;AAEjC,QAAI;AACA,YAAMC,IAAI,GAAG,MAAMvB,WAAW,CAACwB,WAAZ,CAAwBtB,EAAxB,CAAnB;AACAE,MAAAA,OAAO,CAACmB,IAAI,CAACA,IAAN,CAAP;AAEH,KAJD,CAIE,OAAOE,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCzB,EAApD;AACH;AACJ,GATD;;AAUAjC,EAAAA,SAAS,CAAC,MAAM;AACZyD,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAL,IAAAA,gBAAgB;AACnB,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMM,cAAc,GAAG,YAAY;AAC/B,QAAI;AACAtB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMuB,IAAI,GAAG,MAAM9B,WAAW,CAAC+B,QAAZ,CAAqB3B,IAArB,CAAnB;AACA,YAAMmB,gBAAgB,EAAtB;AAEH,KALD,CAKE,OAAOS,KAAP,EAAc;AACZ,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAChBN,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,QAAN,CAAeT,IAA3B;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,QAAN,CAAeC,MAA3B;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,QAAN,CAAeE,OAA3B;AACH;AACJ,KAXD,SAWU;AACN5B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAfD;;AAgBA,QAAM6B,gBAAgB,GAAG,YAAY;AACjC,UAAMC,GAAG,GAAI,gFAA+E7B,gBAAgB,CAACL,EAAG,EAAhH;;AACA,QAAI;AACA,YAAM2B,IAAI,GAAG,MAAMzD,KAAK,CAACiE,MAAN,CAAaD,GAAb,EAAkB;AACjCF,QAAAA,OAAO,EAAE;AACL,2BAAkB,UAASI,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC,EAD1D;AAEL,0BAAgB;AAFX;AADwB,OAAlB,CAAnB;;AAMA,UAAIV,IAAI,CAACI,MAAL,KAAgB,GAApB,EAAyB;AACrB7B,QAAAA,OAAO,CAAEoC,IAAD,KAAW,EACf,GAAGA,IADY;AAEfC,UAAAA,SAAS,EAAED,IAAI,CAACC,SAAL,CAAeC,MAAf,CAAuBC,QAAD,IAAcA,QAAQ,CAACzC,EAAT,KAAgBK,gBAAgB,CAACL,EAArE;AAFI,SAAX,CAAD,CAAP;AAIH;AACJ,KAbD,CAaE,OAAOuB,CAAP,EAAU,CAEX,CAfD,SAeU;AACNjB,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAI,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AACJ,GArBD;;AAsBA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,cAAc,EAAE,QAAtB;AAAgC,MAAA,YAAY,EAAE,QAA9C;AAAwD,MAAA,YAAY,EAAE,QAAtE;AAAgF,MAAA,SAAS,EAAE,KAA3F;AAAA,8BAEI,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,QAAf;AAAyB,QAAA,CAAC,EAAE,MAA5B;AAAoC,QAAA,IAAI,EAAE,OAA1C;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,EAAE,EAAE,CAAZ;AAAe,UAAA,KAAK,EAAE,OAAtB;AAA+B,UAAA,SAAS,EAAE,OAA1C;AAAmD,UAAA,OAAO,EAAE,CAA5D;AAAA,kCAEI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAE,IAAd;AAAoB,YAAA,OAAO,EAAE,MAAME,wBAAwB,CAAC,IAAD,CAA3D;AAAmE,YAAA,EAAE,EAAE,CAAvE;AACQ,YAAA,WAAW,EAAE,UADrB;AAEQ,YAAA,QAAQ,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAQI,QAAC,MAAD;AACI,YAAA,IAAI,EAAE,IADV;AAEI,YAAA,QAAQ,EAAGW,CAAD,IAAO;AACbf,cAAAA,OAAO,CAACe,CAAC,CAACmB,MAAF,CAASC,KAAV,CAAP;AACA,oBAAMC,QAAQ,GAAG3C,IAAI,CAACsC,SAAL,CAAeM,OAAf,EAAjB;AACA3C,cAAAA,OAAO,CAAE4C,SAAD,KAAgB,EACpB,GAAGA,SADiB;AAEpBP,gBAAAA,SAAS,EAAEK;AAFS,eAAhB,CAAD,CAAP;AAKH,aAVL;AAWI,YAAA,EAAE,EAAC,QAXP;AAYI,YAAA,WAAW,EAAC,QAZhB;AAaI,YAAA,IAAI,EAAE,GAbV;AAcI,YAAA,IAAI,eAAE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,oBAdV,CAeI;AAfJ;AAgBI,YAAA,YAAY,EAAErC,IAhBlB;AAiBI,YAAA,WAAW,EAAC,SAjBhB;AAAA,oCAmBI;AAAQ,cAAA,KAAK,EAAE,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnBJ,eAoBI;AAAQ,cAAA,KAAK,EAAE,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAkCI,QAAC,KAAD;AAAO,UAAA,SAAS,EAAEA,IAAlB;AAAA,oBAEQN,IAAI,IAAIA,IAAI,CAACsC,SAAL,CAAeQ,GAAf,CAAmB,CAACN,QAAD,EAAWO,KAAX,kBACvB,QAAC,GAAD;AAEI,YAAA,SAAS,EAAE,IAFf;AAGI,YAAA,EAAE,EAAE,CAHR;AAII,YAAA,YAAY,EAAE,IAJlB;AAKI,YAAA,KAAK,EAAE,OALX;AAMI,YAAA,SAAS,EAAE,OANf;AAOI,YAAA,CAAC,EAAE,MAPP;AAQI,YAAA,EAAE,EAAE,OARR;AASI,YAAA,IAAI,EAAE,OATV;AAUI,YAAA,IAAI,EAAE,OAVV;AAAA,oCAaI,QAAC,MAAD;AAAQ,cAAA,CAAC,EAAE,CAAX;AAAc,cAAA,EAAE,EAAE,UAAlB;AAA8B,cAAA,KAAK,EAAE,OAArC;AAAA,sCAEI,QAAC,IAAD;AAAA,wCAAgBA,KAAK,GAAG,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAII,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAE,MAAhB;AAAwB,gBAAA,KAAK,EAAE,UAA/B;AAAA,uCACI,QAAC,UAAD;AACI,kBAAA,EAAE,EAAE,aADR;AAEI,kBAAA,OAAO,EAAE,MAAM;AACX1C,oBAAAA,mBAAmB,CAACmC,QAAD,CAAnB;AACA3B,oBAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACH,mBALL;AAMI,kBAAA,IAAI,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,0BANV;AAMoB,gCAAY;AANhC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAJJ,eAaI,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAE,SAAhB;AAA2B,gBAAA,KAAK,EAAE,QAAlC;AAAA,uCACI,QAAC,UAAD;AACI,gCAAY,QADhB;AAEI,kBAAA,OAAO,EAAE,MAAM;AACXJ,oBAAAA,OAAO,CAAC,IAAD,CAAP;AACAJ,oBAAAA,mBAAmB,CAACmC,QAAD,CAAnB;AAEH,mBANL;AAOI,kBAAA,EAAE,EAAE,aAPR;AAQI,kBAAA,IAAI,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AARV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAbJ,eAyBI,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAE,WAAhB;AAAA,uCACI,QAAC,UAAD;AACI,kBAAA,OAAO,EAAE,MAAM;AACX,wBAAIQ,CAAC,GAAGhD,IAAI,CAACsC,SAAL,CAAeS,KAAf,CAAR;AACAC,oBAAAA,CAAC,GAAG;AACAC,sBAAAA,KAAK,EAAED,CAAC,CAACC,KADT;AAEAC,sBAAAA,OAAO,EAAEF,CAAC,CAACE,OAAF,CAAUJ,GAAV,CAAeK,MAAD,KAAa;AAChCC,wBAAAA,OAAO,EAAED,MAAM,CAACC,OADgB;AAEhCC,wBAAAA,KAAK,EAAEF,MAAM,CAACE;AAFkB,uBAAb,CAAd;AAFT,qBAAJ;AAOApD,oBAAAA,OAAO,CAAEoC,IAAD,KAAW,EACf,GAAGrC,IADY;AAEfsC,sBAAAA,SAAS,EAAE,CAAC,GAAGD,IAAI,CAACC,SAAT,EAAoBU,CAApB;AAFI,qBAAX,CAAD,CAAP;AAIAzB,oBAAAA,OAAO,CAACC,GAAR,CAAYwB,CAAZ;AACH,mBAfL;AAgBI,gCAAY,WAhBhB;AAiBI,kBAAA,EAAE,EAAE,aAjBR;AAkBI,kBAAA,IAAI,eAAE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAlBV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbJ,eA6DI,QAAC,MAAD;AAAQ,cAAA,KAAK,EAAE,OAAf;AAAwB,cAAA,CAAC,EAAE,CAA3B;AAA8B,cAAA,OAAO,EAAE,CAAvC;AAAA,sCAEI,QAAC,SAAD;AAAW,gBAAA,IAAI,EAAC,KAAhB;AAAA,uCACI,QAAC,GAAD;AAAK,kBAAA,IAAI,EAAC,KAAV;AAAA,yCACI,QAAC,IAAD;AAAM,oBAAA,UAAU,EAAE,QAAlB;AAAA,8BAA6BR,QAAQ,CAACS;AAAtC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAOI,QAAC,UAAD;AACI,gBAAA,CAAC,EAAE,MADP;AAEI,gBAAA,KAAK,EAAE,OAFX;AAGI,gBAAA,OAAO,EAAE,CAHb;AAII,gBAAA,OAAO,EAAE,CAJb;AAAA,0BAOQT,QAAQ,CAACU,OAAT,CAAiBJ,GAAjB,CAAqB,CAACK,MAAD,EAASJ,KAAT,kBACjB,QAAC,SAAD;AAAuB,kBAAA,IAAI,EAAC,IAA5B;AAAiC,kBAAA,aAAa,MAA9C;AAAA,yCACI,QAAC,GAAD;AACI,oBAAA,EAAE,EAAE,CADR;AAEI,oBAAA,CAAC,EAAE,MAFP;AAGI,oBAAA,IAAI,EAAC,KAHT;AAII,oBAAA,KAAK,EAAE,OAJX;AAAA,2CAOI,QAAC,QAAD;AACI,sBAAA,KAAK,EAAEI,MAAM,CAACE,KAAP,GAAe,CAAf,IAAoB,OAD/B;AAEI,sBAAA,SAAS,EAAEF,MAAM,CAACE,KAAP,GAAe,CAAf,IAAoB,IAFnC;AAGI,sBAAA,WAAW,EAAEF,MAAM,CAACE,KAAP,GAAe,CAAf,IAAoB,OAHrC;AAKI,sBAAA,CAAC,EAAE,MALP;AAMI,sBAAA,IAAI,EAAE,IANV,CAOI;AACA;AARJ;AAAA,gCAUKF,MAAM,CAACC;AAVZ,uBAISL,KAJT;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA,wBADJ;AAPR;AAAA;AAAA;AAAA;AAAA,sBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7DJ,eAsGI,QAAC,MAAD;AAAQ,cAAA,EAAE,EAAE,UAAZ;AAAwB,cAAA,CAAC,EAAE,CAA3B;AAAA,sCACI,QAAC,MAAD;AACI,gBAAA,IAAI,EAAE,IADV;AAEI,gBAAA,IAAI,EAAE,KAFV;AAGI,gBAAA,EAAE,EAAE,OAHR;AAII,gBAAA,IAAI,EAAE,iBAJV;AAAA,wCAMI;AAAQ,kBAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,eAOI;AAAQ,kBAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPJ,eAQI;AAAQ,kBAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAWI,QAAC,MAAD;AACI,gBAAA,IAAI,EAAE,IADV;AAEI,gBAAA,WAAW,EAAE,OAFjB;AAGI,gBAAA,OAAO,EAAE,OAHb;AAII,gBAAA,QAAQ,eAAE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,wBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAtGJ;AAAA,aACSA,KADT;AAAA;AAAA;AAAA;AAAA,kBADI;AAFhB;AAAA;AAAA;AAAA;AAAA,gBAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAyKI,QAAC,GAAD;AAAK,QAAA,IAAI,EAAE,OAAX;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,CAAC,EAAE,MAAX;AAAmB,UAAA,CAAC,EAAE,CAAtB;AAAyB,UAAA,EAAE,EAAE,OAA7B;AAAsC,UAAA,CAAC,EAAE,OAAzC;AAAA,kCAEI,QAAC,MAAD;AAAQ,YAAA,CAAC,EAAE,MAAX;AAAA,oCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,MAAD,CACI;AADJ;AAEI,cAAA,YAAY,EAAE/C,IAAI,IAAIA,IAAI,CAAC8B,MAAb,GAAsB9B,IAAI,CAAC8B,MAA3B,GAAoC,CAFtD;AAGI,cAAA,QAAQ,EAAGR,CAAD,IAAOrB,OAAO,CAAC4C,SAAS,KAAK,EACnC,GAAGA,SADgC;AAEnCf,gBAAAA,MAAM,EAAER,CAAC,CAACmB,MAAF,CAASC;AAFkB,eAAL,CAAV,CAH5B;AAOI,cAAA,IAAI,EAAE,IAPV;AAOgB,cAAA,IAAI,EAAE,EAPtB;AAQI,cAAA,EAAE,EAAE,UARR;AAAA,sCASI;AAAQ,gBAAA,QAAQ,EAAE1C,IAAI,IAAIA,IAAI,CAAC8B,MAAL,KAAgB,CAAxB,IAA6B,UAA/C;AAA2D,gBAAA,KAAK,EAAC,GAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATJ,eAUI;AAAQ,gBAAA,QAAQ,EAAE9B,IAAI,IAAIA,IAAI,CAAC8B,MAAL,KAAgB,CAAxB,IAA6B,UAA/C;AAA2D,gBAAA,KAAK,EAAC,GAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVJ,eAYI;AAAQ,gBAAA,QAAQ,EAAE9B,IAAI,IAAIA,IAAI,CAAC8B,MAAL,KAAgB,CAAxB,IAA6B,UAA/C;AAA2D,gBAAA,KAAK,EAAC,GAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAoBI,QAAC,MAAD;AACI,YAAA,CAAC,EAAE,MADP;AAEI,YAAA,IAAI,EAAE,IAFV;AAGI,YAAA,OAAO,EAAE,MAAM;AACXf,cAAAA,oBAAoB,CAAC,IAAD,CAApB;AACH,aALL;AAMI,YAAA,WAAW,EAAE,MANjB;AAMyB,YAAA,QAAQ,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,oBANnC;AAAA,sBAOKf,IAAI,IAAIA,IAAI,CAACiD;AAPlB;AAAA;AAAA;AAAA;AAAA,kBApBJ,eA6BI,QAAC,MAAD;AAAA,oCACI,QAAC,IAAD;AAAM,cAAA,KAAK,EAAE,KAAb;AAAoB,cAAA,UAAU,EAAE,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,UAAD;AAAY,cAAA,IAAI,EAAC,IAAjB;AAAA,sCACI,QAAC,KAAD;AACI,gBAAA,IAAI,EAAE,QADV;AAEI,gBAAA,KAAK,EAAEjD,IAAI,IAAIA,IAAI,CAACsD,SAAb,GAAyBtD,IAAI,CAACsD,SAA9B,GAA0C,eAFrD;AAGI,gBAAA,QAAQ,EAAGhC,CAAD,IAAOrB,OAAO,CAAEoC,IAAD,KAAW,EAChC,GAAGA,IAD6B;AAEhCiB,kBAAAA,SAAS,EAAEhC,CAAC,CAACmB,MAAF,CAASC;AAFY,iBAAX,CAAD,CAH5B;AAOI,gBAAA,WAAW,EAAC;AAPhB;AAAA;AAAA;AAAA;AAAA,sBADJ,eASI,QAAC,eAAD;AAAiB,gBAAA,QAAQ,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,sBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBA7BJ,eA2CI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBA3CJ,eA4CI,QAAC,MAAD;AAAQ,YAAA,cAAc,EAAE,eAAxB;AAAyC,YAAA,CAAC,EAAE,MAA5C;AAAA,oCACI,QAAC,IAAD;AAAM,cAAA,UAAU,EAAE,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,IAAD;AAAA,wBAAO1C,IAAI,IAAIA,IAAI,CAACuD;AAApB;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBA5CJ,eAgDI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBAhDJ,eAiDI,QAAC,MAAD;AACI,YAAA,OAAO,EAAE,MAAM9B,cAAc,EADjC;AAEI,YAAA,SAAS,EAAE,KAFf;AAEsB,YAAA,QAAQ,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,oBAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAzKJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAqOI,QAAC,iBAAD;AAAmB,MAAA,IAAI,EAAET,IAAzB;AAA+B,MAAA,OAAO,EAAEC,OAAxC;AACmB,MAAA,OAAO,EAAEP,qBAD5B;AAEmB,MAAA,UAAU,EAAEC;AAF/B;AAAA;AAAA;AAAA;AAAA,YArOJ,EAyOQC,sBAAsB,iBAAI,QAAC,kBAAD;AAAoB,MAAA,IAAI,EAAEI,IAA1B;AAAgC,MAAA,OAAO,EAAEC,OAAzC;AACoB,MAAA,gBAAgB,EAAEb,gBADtC;AAEoB,MAAA,OAAO,EAAEQ,sBAF7B;AAGoB,MAAA,UAAU,EAAEC;AAHhC;AAAA;AAAA;AAAA;AAAA,YAzOlC,EA+OQC,iBAAiB,iBAAI,QAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,iBAAxB;AAA2C,MAAA,OAAO,EAAEC;AAApD;AAAA;AAAA;AAAA;AAAA,YA/O7B,eAmPI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,OAAlB;AAA2B,MAAA,MAAM,EAAE,EAAnC;AAAuC,MAAA,KAAK,EAAE,IAA9C;AAAoD,MAAA,MAAM,EAAE,GAA5D;AAAA,8BACI,QAAC,UAAD;AAAY,QAAA,EAAE,EAAE,MAAhB;AAAwB,QAAA,KAAK,EAAE,OAA/B;AAAwC,QAAA,IAAI,eAAE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAA9C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAY,QAAA,EAAE,EAAE,MAAhB;AAAwB,QAAA,KAAK,EAAE,OAA/B;AAAwC,QAAA,IAAI,eAAE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAnPJ,EAyPQb,SAAS,iBAAI;AAAA,8BACT,QAAC,GAAD;AACI,QAAA,IAAI,EAAE,CADV;AAEI,QAAA,QAAQ,EAAE,OAFd;AAEuB,QAAA,GAAG,EAAE,CAF5B;AAE+B,QAAA,IAAI,EAAE,OAFrC;AAE8C,QAAA,IAAI,EAAE,OAFpD;AAE6D,QAAA,MAAM,EAAE,MAFrE;AAE6E,QAAA,EAAE,EAAE,UAFjF;AAGI,QAAA,OAAO,EAAE;AAHb;AAAA;AAAA;AAAA;AAAA,cADS,eAOT,QAAC,gBAAD;AACI,QAAA,SAAS,EACL,qBAFR;AAII,QAAA,QAAQ,EAAE,OAJd;AAIuB,QAAA,GAAG,EAAE,KAJ5B;AAKI,QAAA,IAAI,EAAE,KALV;AAMI,QAAA,eAAe,MANnB;AAMoB,QAAA,KAAK,EAAC,WAN1B;AAMsC,QAAA,MAAM,EAAE,MAN9C;AAMsD,QAAA,KAAK,EAAE;AAN7D;AAAA;AAAA;AAAA;AAAA,cAPS;AAAA,oBAzPrB,eA0QI,QAAC,WAAD;AACI,MAAA,MAAM,EAAEM,MADZ;AAEI,MAAA,mBAAmB,EAAEU,SAFzB;AAGI,MAAA,OAAO,EAAE,MAAM;AACXT,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAJ,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,OANL;AAAA,6BAQI,QAAC,kBAAD;AAAA,+BACI,QAAC,kBAAD;AAAA,kCACI,QAAC,iBAAD;AAAmB,YAAA,QAAQ,EAAC,IAA5B;AAAiC,YAAA,UAAU,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eASI,QAAC,iBAAD;AAAA,oCACI,QAAC,MAAD;AACI,cAAA,GAAG,EAAEa,SADT;AAEI,cAAA,OAAO,EAAE,MAAM;AACXT,gBAAAA,OAAO,CAAC,KAAD,CAAP;AACAJ,gBAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,eALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eASI,QAAC,MAAD;AAAQ,cAAA,WAAW,EAAC,KAApB;AACQ,cAAA,OAAO,EAAE2B,gBADjB;AAEQ,cAAA,EAAE,EAAE,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YA1QJ;AAAA,kBADJ;AAiTH,CApXD;;GAAMlC,U;UACW5B,S;;;KADX4B,U;AAsXN,eAAeA,UAAf","sourcesContent":["import {\r\n    Box,\r\n    Button, Checkbox, CircularProgress, Code,\r\n    Container, Divider, Flex,\r\n    HStack,\r\n    IconButton, Input, InputGroup, InputRightAddon, Select,\r\n    SimpleGrid,\r\n    Spacer, Stack,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport React, {useContext, useEffect, useRef, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon} from \"@chakra-ui/icons\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AiOutlineTag, BiSave, BsPen, HiDocumentDuplicate, MdArrowDropDown, MdEdit} from \"react-icons/all\";\r\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\r\nimport QuizEditDialog from \"./components/QuizEditDialog\";\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogContent,\r\n    AlertDialogOverlay,\r\n} from \"@chakra-ui/react\"\r\nimport EditQuestionDialog from \"./components/EditQuestionDialog\";\r\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\r\nimport QuizService from \"../../../service/QuizService\";\r\nimport UserService from \"../../../service/UserService\";\r\n\r\nconst QuizEditor = () => {\r\n    const {id} = useParams();\r\n    const {quiz, setQuiz, isLoading, setLoading} = useContext(QuizEditContext);\r\n    const [selectedQuestion, setSelectedQuestion] = useState(null);\r\n    const [sort, setSort] = useState('column');\r\n    //\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\r\n    const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\r\n    const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false);\r\n    //\r\n    const [size, setSize] = useState('full');\r\n    const cancelRef = useRef();\r\n    //fetch quiz details\r\n    const fetchQuizDetails = async () => {\r\n\r\n        try {\r\n            const data = await UserService.getUserQuiz(id);\r\n            setQuiz(data.data);\r\n\r\n        } catch (e) {\r\n            console.log(\"Failed to get quiz details with id \" + id);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        console.log('quiz editor render')\r\n        fetchQuizDetails();\r\n    }, [])\r\n\r\n    const handleSaveQuiz = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const resp = await QuizService.saveQuiz(quiz);\r\n            await fetchQuizDetails();\r\n\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const onRemoveQuestion = async () => {\r\n        const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/questions/${selectedQuestion.id}`\r\n        try {\r\n            const resp = await axios.delete(url, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if (resp.status === 200) {\r\n                setQuiz((prev) => ({\r\n                    ...prev,\r\n                    questions: prev.questions.filter((question) => question.id !== selectedQuestion.id)\r\n                }))\r\n            }\r\n        } catch (e) {\r\n\r\n        } finally {\r\n            setSelectedQuestion(null);\r\n            setOpen(false);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Flex justifyContent={'center'} justifyItems={'center'} alignContent={'center'} direction={'row'}>\r\n                {/*QUESTIONS EDITOR*/}\r\n                <VStack align={'center'} w={'100%'} minH={'100vh'}>\r\n                    <HStack mb={4} align={'start'} alignSelf={'start'} spacing={4}>\r\n\r\n                        <Button size={'sm'} onClick={() => setShowNewQuestionDialog(true)} px={4}\r\n                                colorScheme={'linkedin'}\r\n                                leftIcon={<AddIcon/>}>\r\n                            New Question\r\n                        </Button>\r\n\r\n                        <Select\r\n                            size={'sm'}\r\n                            onChange={(e) => {\r\n                                setSort(e.target.value);\r\n                                const reversed = quiz.questions.reverse();\r\n                                setQuiz((prevState) => ({\r\n                                    ...prevState,\r\n                                    questions: reversed,\r\n                                }))\r\n\r\n                            }}\r\n                            bg=\"tomato\"\r\n                            borderColor=\"tomato\"\r\n                            maxW={100}\r\n                            icon={<MdArrowDropDown/>}\r\n                            // variant=\"filled\"\r\n                            defaultValue={sort}\r\n                            placeholder=\"Sort by\"\r\n                        >\r\n                            <option value={'column'}>Position</option>\r\n                            <option value={'column-reverse'}>Reverse</option>\r\n                        </Select>\r\n                    </HStack>\r\n                    {/*    QUESTIONS*/}\r\n\r\n                    <Stack direction={sort}>\r\n                        {\r\n                            quiz && quiz.questions.map((question, index) => (\r\n                                <Box\r\n                                    key={index}\r\n                                    boxShadow={\"sm\"}\r\n                                    my={5}\r\n                                    borderRadius={\"md\"}\r\n                                    align={\"start\"}\r\n                                    textAlign={\"start\"}\r\n                                    h={\"100%\"}\r\n                                    bg={'white'}\r\n                                    maxW={\"600px\"}\r\n                                    minW={\"600px\"}\r\n                                >\r\n\r\n                                    <HStack p={2} bg={\"gray.700\"} color={'white'}>\r\n                                        {/*QUESTION INDEX*/}\r\n                                        <Text>Question {index + 1}</Text>\r\n                                        <Spacer/>\r\n                                        <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                                            <IconButton\r\n                                                bg={'transparent'}\r\n                                                onClick={() => {\r\n                                                    setSelectedQuestion(question)\r\n                                                    setShowEditQuestionDialog(true)\r\n                                                }}\r\n                                                icon={<BsPen/>} aria-label={'edit'}/>\r\n                                        </Tooltip>\r\n                                        <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                                            <IconButton\r\n                                                aria-label={'remove'}\r\n                                                onClick={() => {\r\n                                                    setOpen(true)\r\n                                                    setSelectedQuestion(question)\r\n\r\n                                                }}\r\n                                                bg={'transparent'}\r\n                                                icon={<DeleteIcon/>}\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip label={\"duplicate\"}>\r\n                                            <IconButton\r\n                                                onClick={() => {\r\n                                                    let q = quiz.questions[index];\r\n                                                    q = {\r\n                                                        title: q.title,\r\n                                                        options: q.options.map((option) => ({\r\n                                                            content: option.content,\r\n                                                            score: option.score,\r\n                                                        }))\r\n                                                    }\r\n                                                    setQuiz((prev) => ({\r\n                                                        ...quiz,\r\n                                                        questions: [...prev.questions, q]\r\n                                                    }))\r\n                                                    console.log(q);\r\n                                                }}\r\n                                                aria-label={'duplicate'}\r\n                                                bg={'transparent'}\r\n                                                icon={<HiDocumentDuplicate/>}/>\r\n                                        </Tooltip>\r\n                                    </HStack>\r\n                                    {/*QUESTION*/}\r\n                                    <VStack align={\"start\"} p={2} spacing={5}>\r\n                                        {/*QUESTION TITLE*/}\r\n                                        <Container maxW=\"3xl\">\r\n                                            <Box maxW=\"3xl\">\r\n                                                <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        <SimpleGrid\r\n                                            w={\"100%\"}\r\n                                            align={\"start\"}\r\n                                            columns={2}\r\n                                            spacing={2}\r\n                                        >\r\n                                            {\r\n                                                question.options.map((option, index) => (\r\n                                                    <Container key={index} maxW=\"xl\" centerContent>\r\n                                                        <Box\r\n                                                            py={4}\r\n                                                            w={\"100%\"}\r\n                                                            maxW=\"3xl\"\r\n                                                            align={\"start\"}\r\n                                                        >\r\n\r\n                                                            <Checkbox\r\n                                                                color={option.score > 0 && 'green'}\r\n                                                                isChecked={option.score > 0 && true}\r\n                                                                colorScheme={option.score > 0 && 'green'}\r\n                                                                key={index}\r\n                                                                w={\"100%\"}\r\n                                                                size={\"md\"}\r\n                                                                // disabled={true}\r\n                                                                // isChecked={option.isChecked}\r\n                                                            >\r\n                                                                {option.content}\r\n                                                            </Checkbox>\r\n                                                        </Box>\r\n                                                    </Container>\r\n                                                ))\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                    </VStack>\r\n                                    <HStack bg={\"gray.200\"} p={1}>\r\n                                        <Select\r\n                                            size={\"sm\"}\r\n                                            maxW={\"100\"}\r\n                                            bg={\"white\"}\r\n                                            name={\"queston seconds\"}\r\n                                        >\r\n                                            <option value=\"option1\">30 secs</option>\r\n                                            <option value=\"option2\">15 secs</option>\r\n                                            <option value=\"option3\">45 secs</option>\r\n                                        </Select>\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            colorScheme={\"white\"}\r\n                                            variant={\"ghost\"}\r\n                                            leftIcon={<AiOutlineTag/>}\r\n                                        >\r\n                                            Tag topics\r\n                                        </Button>\r\n                                    </HStack>\r\n                                </Box>\r\n                            ))\r\n                        }\r\n                    </Stack>\r\n\r\n                </VStack>\r\n\r\n                {/*ACTION SIDEBAR*/}\r\n                <Box minW={'300px'}>\r\n                    <VStack w={'100%'} p={4} bg={'white'} h={'300px'}>\r\n                        {/*PUBLIC*/}\r\n                        <HStack w={'100%'}>\r\n                            <Spacer/>\r\n                            <Select\r\n                                // placeholder={quiz && !quiz.visibility ? 'Visibility' : ''}\r\n                                defaultValue={quiz && quiz.status ? quiz.status : 0}\r\n                                onChange={(e) => setQuiz(prevState => ({\r\n                                    ...prevState,\r\n                                    status: e.target.value\r\n                                }))}\r\n                                size={'sm'} maxW={40}\r\n                                bg={'blue.200'}>\r\n                                <option selected={quiz && quiz.status === 0 && 'selected'} value=\"0\">Draft</option>\r\n                                <option selected={quiz && quiz.status === 1 && 'selected'} value=\"1\">Private\r\n                                </option>\r\n                                <option selected={quiz && quiz.status === 2 && 'selected'} value=\"2\">Public</option>\r\n                            </Select>\r\n                        </HStack>\r\n                        {/*    */}\r\n                        <Button\r\n                            w={'100%'}\r\n                            size={'sm'}\r\n                            onClick={() => {\r\n                                setShowQuickEditQuiz(true)\r\n                            }}\r\n                            colorScheme={'gray'} leftIcon={<MdEdit/>}>\r\n                            {quiz && quiz.title}\r\n                        </Button>\r\n                        <HStack>\r\n                            <Text width={'50%'} fontWeight={'medium'}>Limit Time</Text>\r\n                            <InputGroup size=\"sm\">\r\n                                <Input\r\n                                    type={'number'}\r\n                                    value={quiz && quiz.limitTime ? quiz.limitTime : 'No Limit Time'}\r\n                                    onChange={(e) => setQuiz((prev) => ({\r\n                                        ...prev,\r\n                                        limitTime: e.target.value\r\n                                    }))}\r\n                                    placeholder=\"default no limit\"/>\r\n                                <InputRightAddon children=\"mins\"/>\r\n                            </InputGroup>\r\n                        </HStack>\r\n                        <Divider/>\r\n                        <HStack justifyContent={'space-between'} w={'100%'}>\r\n                            <Text fontWeight={'medium'}>Code</Text>\r\n                            <Code>{quiz && quiz.code}</Code>\r\n                        </HStack>\r\n                        <Spacer/>\r\n                        <Button\r\n                            onClick={() => handleSaveQuiz()}\r\n                            alignSelf={'end'} leftIcon={<BiSave/>}>Save</Button>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/*DIAlOGS*/\r\n            }\r\n            <NewQuestionDialog size={size} setSize={setSize}\r\n                               visible={showNewQuestionDialog}\r\n                               setVisible={setShowNewQuestionDialog}/>\r\n            {\r\n                showEditQuestionDialog && <EditQuestionDialog size={size} setSize={setSize}\r\n                                                              selectedQuestion={selectedQuestion}\r\n                                                              visible={showEditQuestionDialog}\r\n                                                              setVisible={setShowEditQuestionDialog}/>\r\n            }\r\n            {\r\n                showQuickEditQuiz && <QuizEditDialog isOpen={showQuickEditQuiz} setOpen={setShowQuickEditQuiz}/>\r\n\r\n            }\r\n\r\n            <HStack position={'fixed'} bottom={10} right={'10'} zIndex={800}>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowUpIcon/>}/>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowDownIcon/>}/>\r\n            </HStack>\r\n\r\n            {\r\n                isLoading && <>\r\n                    <Box\r\n                        left={0}\r\n                        position={'fixed'} top={0} minW={'100vw'} minH={'100vh'} zIndex={100000} bg={'gray.100'}\r\n                        opacity={.5}>\r\n\r\n                    </Box>\r\n                    <CircularProgress\r\n                        transform={\r\n                            'translate(50%,-50%)'\r\n                        }\r\n                        position={'fixed'} top={'50%'}\r\n                        left={'50%'}\r\n                        isIndeterminate color=\"green.300\" zIndex={100001} align={'center'}/>\r\n                </>\r\n            }\r\n\r\n            <AlertDialog\r\n                isOpen={isOpen}\r\n                leastDestructiveRef={cancelRef}\r\n                onClose={() => {\r\n                    setOpen(false)\r\n                    setSelectedQuestion(null)\r\n                }}\r\n            >\r\n                <AlertDialogOverlay>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                            Remove Question\r\n                        </AlertDialogHeader>\r\n\r\n                        <AlertDialogBody>\r\n                            Are you sure? You can't undo this action afterwards.\r\n                        </AlertDialogBody>\r\n\r\n                        <AlertDialogFooter>\r\n                            <Button\r\n                                ref={cancelRef}\r\n                                onClick={() => {\r\n                                    setOpen(false)\r\n                                    setSelectedQuestion(null)\r\n                                }}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button colorScheme=\"red\"\r\n                                    onClick={onRemoveQuestion}\r\n                                    ml={3}>\r\n                                Delete\r\n                            </Button>\r\n                        </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                </AlertDialogOverlay>\r\n            </AlertDialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuizEditor;"]},"metadata":{},"sourceType":"module"}