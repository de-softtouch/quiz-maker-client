{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\components\\\\NewQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, Button, Container, Heading, HStack, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Spacer, Text, Textarea, useDisclosure, VStack } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NewQuestionDialog = ({\n  visible,\n  setVisible\n}) => {\n  _s();\n\n  const option = {\n    content: \"option contnt\"\n  };\n  const [question, setQuestion] = useState(null);\n  const [options, setOptions] = useState([option, option]);\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [size, setSize] = useState('full');\n\n  const onOptionChange = (e, index) => {\n    //push new option if it is the last index option\n    if (index === options.length - 1) {\n      options.push({});\n    }\n\n    setOptions(prevState => prevState.map((option, i) => i === index ? { ...option,\n      content: e.target.value\n    } : option));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setVisible(false),\n      size: size,\n      isOpen: visible,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: \"New Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            children: \"sdsdsdsdsdsd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setVisible(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NewQuestionDialog, \"fW19SaYfoDv8fQs4tAUHBCqWddw=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = NewQuestionDialog;\nexport default NewQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/components/NewQuestionDialog.js"],"names":["React","useState","Box","Button","Container","Heading","HStack","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Spacer","Text","Textarea","useDisclosure","VStack","NewQuestionDialog","visible","setVisible","option","content","question","setQuestion","options","setOptions","isOpen","onOpen","onClose","size","setSize","onOptionChange","e","index","length","push","prevState","map","i","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SACIC,GADJ,EAEIC,MAFJ,EAGIC,SAHJ,EAIIC,OAJJ,EAKIC,MALJ,EAMIC,KANJ,EAMWC,KANX,EAMkBC,SANlB,EAM6BC,gBAN7B,EAM+CC,YAN/C,EAM6DC,WAN7D,EAM0EC,WAN1E,EAOIC,YAPJ,EAQIC,MARJ,EASIC,IATJ,EAUIC,QAVJ,EAUcC,aAVd,EAWIC,MAXJ,QAYO,kBAZP;;;;AAcA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAA2B;AAAA;;AAEjD,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AADE,GAAf;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC0B,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAC,CAACsB,MAAD,EAASA,MAAT,CAAD,CAAtC;AACA,QAAM;AAACM,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA4Bb,aAAa,EAA/C;AACA,QAAM,CAACc,IAAD,EAAMC,OAAN,IAAiBhC,QAAQ,CAAC,MAAD,CAA/B;;AAEA,QAAMiC,cAAc,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjC;AACA,QAAIA,KAAK,KAAKT,OAAO,CAACU,MAAR,GAAiB,CAA/B,EAAkC;AAC9BV,MAAAA,OAAO,CAACW,IAAR,CAAa,EAAb;AACH;;AACDV,IAAAA,UAAU,CAAEW,SAAD,IACPA,SAAS,CAACC,GAAV,CAAc,CAACjB,MAAD,EAASkB,CAAT,KAAeA,CAAC,KAAKL,KAAN,GACvB,EACE,GAAGb,MADL;AAEEC,MAAAA,OAAO,EAAEW,CAAC,CAACO,MAAF,CAASC;AAFpB,KADuB,GAKvBpB,MALN,CADM,CAAV;AAQH,GAbD;;AAcA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,MAAMD,UAAU,CAAC,KAAD,CAAhC;AAAyC,MAAA,IAAI,EAAEU,IAA/C;AAAqD,MAAA,MAAM,EAAEX,OAA7D;AAAA,8BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AAAA,gCACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,SAAD;AAAA,iCACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAMI,QAAC,WAAD;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAIC,UAAU,CAAC,KAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AA8DH,CAtFD;;GAAMF,iB;UAOgCF,a;;;KAPhCE,iB;AAwFN,eAAeA,iBAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    Heading,\r\n    HStack,\r\n    Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay,\r\n    Spacer,\r\n    Text,\r\n    Textarea, useDisclosure,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\n\r\nconst NewQuestionDialog = ({visible, setVisible}) => {\r\n\r\n    const option = {\r\n        content: \"option contnt\"\r\n    }\r\n    const [question, setQuestion] = useState(null);\r\n    const [options, setOptions] = useState([option, option]);\r\n    const {isOpen, onOpen, onClose} = useDisclosure()\r\n    const [size,setSize] = useState('full');\r\n\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === options.length - 1) {\r\n            options.push({});\r\n        }\r\n        setOptions((prevState) => (\r\n            prevState.map((option, i) => i === index\r\n                ? {\r\n                    ...option,\r\n                    content: e.target.value\r\n                }\r\n                : option)\r\n        ));\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => setVisible(false)} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>New Question</ModalHeader>\r\n                    <ModalCloseButton/> \r\n                    <ModalBody>\r\n                        <Heading>sdsdsdsdsdsd</Heading>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={()=>setVisible(false)}>Close</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n            {/*<Box*/}\r\n            {/*    onClick={() => {*/}\r\n            {/*        setVisible(false)*/}\r\n\r\n            {/*    }}*/}\r\n            {/*    zIndex={1000}*/}\r\n            {/*    bg={'gray.600'}*/}\r\n            {/*    opacity={.5}*/}\r\n            {/*    position={'fixed'}*/}\r\n            {/*    right={0}*/}\r\n            {/*    top={0}*/}\r\n            {/*    minW={'100vw'}*/}\r\n            {/*    minH={'100vh'}/>*/}\r\n            {/*<Box zIndex={1001}*/}\r\n            {/*     borderRadius={'md'}*/}\r\n            {/*     boxShadow={'md'}*/}\r\n            {/*     position={'fixed'}*/}\r\n            {/*     right={'50%'}*/}\r\n            {/*     top={'50%'}*/}\r\n            {/*     bg={'gray.100'}*/}\r\n            {/*     transform={\"translate(50%,-50%)\"}*/}\r\n            {/*>*/}\r\n            {/*    <VStack minW={800} p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>*/}\r\n            {/*        <Text fontSize={'20'} fontWeight={'medium'} textAlign={'start'} w={'100%'}>Add questionss</Text>*/}\r\n            {/*        <Box w={'100%'}>*/}\r\n            {/*            <Textarea borderColor={'black'} placeholder=\"Here is a sample placeholder\"/>*/}\r\n            {/*        </Box>*/}\r\n            {/*        <VStack w={'100%'}>*/}\r\n            {/*            {*/}\r\n            {/*                options.map((option, index) => (*/}\r\n            {/*                    <Input*/}\r\n            {/*                        onChange={(e) => onOptionChange(e, index)}*/}\r\n            {/*                        key={index}*/}\r\n            {/*                        isFullWidth={true} placeholder={\"option\"}/>*/}\r\n            {/*                ))*/}\r\n            {/*            }*/}\r\n            {/*        </VStack>*/}\r\n            {/*        <HStack w={'100%'}>*/}\r\n            {/*            <Spacer/>*/}\r\n            {/*            <Button variant={'outline'} colorScheme={'gray'}*/}\r\n            {/*                    onClick={() => setVisible(false)}>Cancel</Button>*/}\r\n            {/*            <Button variant={'solid'} colorScheme={'blue'}>Save</Button>*/}\r\n            {/*        </HStack>*/}\r\n            {/*    </VStack>*/}\r\n            {/*</Box>*/}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewQuestionDialog;"]},"metadata":{},"sourceType":"module"}