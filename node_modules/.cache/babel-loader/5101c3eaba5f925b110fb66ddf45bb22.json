{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\components\\\\NewQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { Box, Button, Container, Heading, HStack, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Spacer, Text, Textarea, useDisclosure, VStack } from \"@chakra-ui/react\";\nimport { BiFullscreen } from \"react-icons/all\";\nimport { QuizEditContext } from \"../../../../providers/QuizEditProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NewQuestionDialog = ({\n  visible,\n  setVisible,\n  size,\n  setSize\n}) => {\n  _s();\n\n  const {\n    quiz,\n    setQuiz\n  } = useContext(QuizEditContext);\n  const [question, setQuestion] = useState(null);\n  const [options, setOptions] = useState([{}, {}]);\n\n  const onOptionChange = (e, index) => {\n    //push new option if it is the last index option\n    if (index === options.length - 1) {\n      options.push({});\n    }\n\n    setOptions(prevState => prevState.map((option, i) => i === index ? { ...option,\n      content: e.target.value\n    } : option));\n    setQuestion(prevState => ({ ...prevState,\n      options: options.filter(option => option.content && option.content.length > 0)\n    }));\n  };\n\n  const onSaveOption = () => {\n    setQuestion(prevState => ({ ...prevState,\n      options: options\n    })); // let tmpQuestion = quiz.questions;\n    // tmpQuestion.push(question);\n\n    setQuiz(prevState => ({ ...prevState,\n      questions: [...prevState.questions, question]\n    }));\n    setVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setVisible(false),\n      size: size,\n      isOpen: visible,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \" New Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(BiFullscreen, {\n              onClick: () => size === 'full' ? setSize('xl') : setSize('full')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          p: 5,\n          spacing: 5,\n          overflowY: 'scroll',\n          children: [/*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textAlign: 'start',\n              w: '100%',\n              fontWeight: 'medium',\n              children: \"Question title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Container, {\n              maxW: 'xl',\n              children: /*#__PURE__*/_jsxDEV(CKEditor, {\n                editor: ClassicEditor,\n                data: \"<p>Hello from CKEditor 5!</p>\",\n                onReady: editor => {\n                  // You can store the \"editor\" and use when it is needed.\n                  console.log('Editor is ready to use!', editor);\n                },\n                onChange: (event, editor) => {\n                  const data = editor.getData();\n                  console.log({\n                    event,\n                    editor,\n                    data\n                  });\n                },\n                onBlur: (event, editor) => {\n                  console.log('Blur.', editor);\n                },\n                onFocus: (event, editor) => {\n                  console.log('Focus.', editor);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: options.map((option, index) => /*#__PURE__*/_jsxDEV(Input, {\n              onChange: e => onOptionChange(e, index),\n              placeholder: \"option\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setVisible(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            ml: 4,\n            colorScheme: 'blue',\n            onClick: onSaveOption,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NewQuestionDialog, \"ZzJfg+nCy67WA8VC2S7twl+sh64=\");\n\n_c = NewQuestionDialog;\nexport default NewQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/components/NewQuestionDialog.js"],"names":["React","useContext","useState","CKEditor","ClassicEditor","Box","Button","Container","Heading","HStack","Input","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Spacer","Text","Textarea","useDisclosure","VStack","BiFullscreen","QuizEditContext","NewQuestionDialog","visible","setVisible","size","setSize","quiz","setQuiz","question","setQuestion","options","setOptions","onOptionChange","e","index","length","push","prevState","map","option","i","content","target","value","filter","onSaveOption","questions","editor","console","log","event","data","getData"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    Heading,\r\n    HStack,\r\n    Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay,\r\n    Spacer,\r\n    Text,\r\n    Textarea, useDisclosure,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\n\r\nconst NewQuestionDialog = ({visible, setVisible,size,setSize}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n\r\n    const [question, setQuestion] = useState(null);\r\n    const [options, setOptions] = useState([{}, {}]);\r\n\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === options.length - 1) {\r\n            options.push({});\r\n        }\r\n        setOptions((prevState) => (\r\n            prevState.map((option, i) => i === index\r\n                ? {\r\n                    ...option,\r\n                    content: e.target.value\r\n                }\r\n                : option)\r\n        ));\r\n        setQuestion((prevState) => ({\r\n                ...prevState,\r\n                options: options.filter(option => (option.content && option.content.length > 0))\r\n            }\r\n        ));\r\n    }\r\n    const onSaveOption = () => {\r\n\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: options\r\n        }))\r\n\r\n        // let tmpQuestion = quiz.questions;\r\n        // tmpQuestion.push(question);\r\n        setQuiz((prevState) => ({\r\n            ...prevState,\r\n            questions: [...prevState.questions, question]\r\n        }))\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => setVisible(false)} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text> New Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5}  overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n\r\n                            {/*<Textarea*/}\r\n                            {/*    onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}*/}\r\n                            {/*    borderColor={'black.800'} placeholder=\"Type your question title here\"/>*/}\r\n                      <Container maxW={'xl'}>\r\n                          <CKEditor\r\n                              editor={ ClassicEditor }\r\n                              data=\"<p>Hello from CKEditor 5!</p>\"\r\n                              onReady={ editor => {\r\n                                  // You can store the \"editor\" and use when it is needed.\r\n                                  console.log( 'Editor is ready to use!', editor );\r\n                              } }\r\n                              onChange={ ( event, editor ) => {\r\n                                  const data = editor.getData();\r\n                                  console.log( { event, editor, data } );\r\n                              } }\r\n                              onBlur={ ( event, editor ) => {\r\n                                  console.log( 'Blur.', editor );\r\n                              } }\r\n                              onFocus={ ( event, editor ) => {\r\n                                  console.log( 'Focus.', editor );\r\n                              } }\r\n                          />\r\n                      </Container>\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                options.map((option, index) => (\r\n                                    <Input\r\n                                        onChange={(e) => onOptionChange(e, index)}\r\n                                        key={index}\r\n                                        placeholder={\"option\"}/>\r\n                                ))\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => setVisible(false)}>Close</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n            {/*<Box*/}\r\n            {/*    onClick={() => {*/}\r\n            {/*        setVisible(false)*/}\r\n\r\n            {/*    }}*/}\r\n            {/*    zIndex={1000}*/}\r\n            {/*    bg={'gray.600'}*/}\r\n            {/*    opacity={.5}*/}\r\n            {/*    position={'fixed'}*/}\r\n            {/*    right={0}*/}\r\n            {/*    top={0}*/}\r\n            {/*    minW={'100vw'}*/}\r\n            {/*    minH={'100vh'}/>*/}\r\n            {/*<Box zIndex={1001}*/}\r\n            {/*     borderRadius={'md'}*/}\r\n            {/*     boxShadow={'md'}*/}\r\n            {/*     position={'fixed'}*/}\r\n            {/*     right={'50%'}*/}\r\n            {/*     top={'50%'}*/}\r\n            {/*     bg={'gray.100'}*/}\r\n            {/*     transform={\"translate(50%,-50%)\"}*/}\r\n            {/*>*/}\r\n            {/*    <VStack minW={800} p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>*/}\r\n            {/*        <Text fontSize={'20'} fontWeight={'medium'} textAlign={'start'} w={'100%'}>Add questionss</Text>*/}\r\n            {/*        <Box w={'100%'}>*/}\r\n            {/*            <Textarea borderColor={'black'} placeholder=\"Here is a sample placeholder\"/>*/}\r\n            {/*        </Box>*/}\r\n            {/*        <VStack w={'100%'}>*/}\r\n            {/*            {*/}\r\n            {/*                options.map((option, index) => (*/}\r\n            {/*                    <Input*/}\r\n            {/*                        onChange={(e) => onOptionChange(e, index)}*/}\r\n            {/*                        key={index}*/}\r\n            {/*                        isFullWidth={true} placeholder={\"option\"}/>*/}\r\n            {/*                ))*/}\r\n            {/*            }*/}\r\n            {/*        </VStack>*/}\r\n            {/*        <HStack w={'100%'}>*/}\r\n            {/*            <Spacer/>*/}\r\n            {/*            <Button variant={'outline'} colorScheme={'gray'}*/}\r\n            {/*                    onClick={() => setVisible(false)}>Cancel</Button>*/}\r\n            {/*            <Button variant={'solid'} colorScheme={'blue'}>Save</Button>*/}\r\n            {/*        </HStack>*/}\r\n            {/*    </VStack>*/}\r\n            {/*</Box>*/}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewQuestionDialog;"]},"metadata":{},"sourceType":"module"}