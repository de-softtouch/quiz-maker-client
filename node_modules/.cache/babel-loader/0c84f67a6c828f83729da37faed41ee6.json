{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\components\\\\NewQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Button, HStack, Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Text, Textarea, useToast, VStack } from \"@chakra-ui/react\";\nimport { BiFullscreen } from \"react-icons/all\";\nimport { QuizEditContext } from \"../../../../providers/QuizEditProvider\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NewQuestionDialog = ({\n  visible,\n  setVisible,\n  size,\n  setSize\n}) => {\n  _s();\n\n  const {\n    quiz,\n    setQuiz\n  } = useContext(QuizEditContext);\n  const toast = useToast();\n  const [question, setQuestion] = useState(null);\n  const [options, setOptions] = useState([{}, {}]);\n\n  const onOptionChange = (e, index) => {\n    //push new option if it is the last index option\n    if (index === options.length - 1) {\n      options.push({});\n    }\n\n    setOptions(prevState => prevState.map((option, i) => i === index ? { ...option,\n      content: e.target.value,\n      score: 0\n    } : option));\n    setQuestion(prevState => ({ ...prevState,\n      options: options.filter(option => option.content && option.content.length > 0)\n    }));\n  };\n\n  const onSaveOption = async () => {\n    //check question have title\n    if (!question || !question.title) {\n      toast({\n        title: `Your question does not have title!`,\n        position: \"bottom-left\",\n        isClosable: true,\n        status: \"error\",\n        variant: \"solid\",\n        duration: 1500\n      });\n      return;\n    } //check at least 1 option\n\n\n    if (!options[0] || !options[0].content || !options[0].content.length === 0) {\n      toast({\n        title: `Your question must have at least 1 option!`,\n        position: \"bottom-left\",\n        isClosable: true,\n        status: \"error\",\n        variant: \"solid\",\n        duration: 1500\n      });\n      return;\n    }\n\n    let totalScore = 0;\n\n    for (let i = 0; i < options; i++) {\n      totalScore += options[i].score;\n    }\n\n    if (totalScore <= 0) {\n      toast({\n        title: `Your question must have at least 1 true option!`,\n        position: \"bottom-left\",\n        isClosable: true,\n        status: \"error\",\n        variant: \"solid\",\n        duration: 1500\n      });\n      return;\n    } //update question\n\n\n    setQuestion(prevState => ({ ...prevState,\n      options: options\n    })); //add question to quiz\n\n    setQuiz(prevState => ({ ...prevState,\n      questions: [...prevState.questions, question]\n    })); //save\n\n    setVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => {\n        setVisible(false);\n        setOptions([{}, {}]);\n        setQuestion(null);\n      },\n      size: size,\n      isOpen: visible,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \" New Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(BiFullscreen, {\n              onClick: () => size === 'full' ? setSize('xl') : setSize('full')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          p: 5,\n          spacing: 5,\n          maxH: '900px',\n          overflowY: 'scroll',\n          children: [/*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textAlign: 'start',\n              w: '100%',\n              fontWeight: 'medium',\n              children: \"Question title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              onChange: e => setQuestion(prevState => ({ ...prevState,\n                title: e.target.value\n              })),\n              borderColor: 'black.800',\n              placeholder: \"Type your question title here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            children: options.map((option, index) => /*#__PURE__*/_jsxDEV(HStack, {\n              w: '100%',\n              children: [/*#__PURE__*/_jsxDEV(Select, {\n                onChange: e => {\n                  setOptions(prevState => options.map((item, i) => i === index ? { ...item,\n                    score: e.target.value\n                  } : item));\n                },\n                bg: 'gray.200' // defaultValue={0}\n                ,\n                placeholder: \"score\",\n                maxW: '100px',\n                children: [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: item,\n                  children: item\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                borderWidth: option.score && option.score > 0 && 1.5,\n                borderColor: option.score && option.score > 0 && 'green',\n                color: option.score && option.score > 0 && 'green',\n                focusBorderColor: option.score && option.score > 0 && 'green',\n                colorScheme: 'blue',\n                onChange: e => onOptionChange(e, index),\n                placeholder: \"option\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setVisible(false);\n              setOptions([{}, {}]);\n              setQuestion(null);\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            ml: 4,\n            colorScheme: 'blue',\n            onClick: onSaveOption,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NewQuestionDialog, \"WaA6oOzXLUN+xiqs+pHOa95S7hI=\", false, function () {\n  return [useToast];\n});\n\n_c = NewQuestionDialog;\nexport default NewQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/components/NewQuestionDialog.js"],"names":["React","useContext","useState","Button","HStack","Input","Modal","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Select","Text","Textarea","useToast","VStack","BiFullscreen","QuizEditContext","axios","NewQuestionDialog","visible","setVisible","size","setSize","quiz","setQuiz","toast","question","setQuestion","options","setOptions","onOptionChange","e","index","length","push","prevState","map","option","i","content","target","value","score","filter","onSaveOption","title","position","isClosable","status","variant","duration","totalScore","questions","item"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport {\r\n    Button,\r\n    HStack,\r\n    Input, Modal, ModalCloseButton, ModalContent, ModalFooter, ModalHeader,\r\n    ModalOverlay, Select,\r\n    Text,\r\n    Textarea, useToast,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {BiFullscreen} from \"react-icons/all\";\r\nimport {QuizEditContext} from \"../../../../providers/QuizEditProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst NewQuestionDialog = ({visible, setVisible, size, setSize}) => {\r\n\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const toast = useToast();\r\n    const [question, setQuestion] = useState(null);\r\n    const [options, setOptions] = useState([{}, {}]);\r\n\r\n    const onOptionChange = (e, index) => {\r\n        //push new option if it is the last index option\r\n        if (index === options.length - 1) {\r\n            options.push({});\r\n        }\r\n        setOptions((prevState) => (\r\n            prevState.map((option, i) => i === index\r\n                ? {\r\n                    ...option,\r\n                    content: e.target.value,\r\n                    score: 0,\r\n                }\r\n                : option)\r\n        ));\r\n        setQuestion((prevState) => ({\r\n                ...prevState,\r\n                options: options.filter(option => (option.content && option.content.length > 0))\r\n            }\r\n        ));\r\n    }\r\n    const onSaveOption = async () => {\r\n        //check question have title\r\n        if (!question || !question.title) {\r\n            toast({\r\n                title: `Your question does not have title!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n        //check at least 1 option\r\n        if (!options[0] || !options[0].content || !options[0].content.length === 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n        let totalScore = 0;\r\n        for (let i = 0; i < options; i++) {\r\n            totalScore += options[i].score\r\n        }\r\n        if (totalScore <= 0) {\r\n            toast({\r\n                title: `Your question must have at least 1 true option!`,\r\n                position: \"bottom-left\",\r\n                isClosable: true,\r\n                status: \"error\",\r\n                variant: \"solid\",\r\n                duration: 1500\r\n            })\r\n            return;\r\n        }\r\n\r\n        //update question\r\n        setQuestion((prevState) => ({\r\n            ...prevState,\r\n            options: options\r\n        }))\r\n\r\n        //add question to quiz\r\n        setQuiz((prevState) => ({\r\n            ...prevState,\r\n            questions: [...prevState.questions, question]\r\n        }))\r\n        //save\r\n\r\n        setVisible(false);\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <Modal onClose={() => {\r\n                setVisible(false)\r\n                setOptions([{}, {}])\r\n                setQuestion(null)\r\n            }} size={size} isOpen={visible}>\r\n                <ModalOverlay/>\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <HStack>\r\n                            <Text> New Question</Text>\r\n                            <BiFullscreen onClick={() => size === 'full' ? setSize('xl') : setSize('full')}/>\r\n                        </HStack>\r\n                    </ModalHeader>\r\n                    <ModalCloseButton/>\r\n                    <VStack p={5} spacing={5} maxH={'900px'} overflowY={'scroll'}>\r\n\r\n                        <VStack w={'100%'}>\r\n                            <Text textAlign={'start'} w={'100%'} fontWeight={'medium'}>Question title</Text>\r\n\r\n                            <Textarea\r\n                                onChange={(e) => setQuestion((prevState) => ({...prevState, title: e.target.value}))}\r\n                                borderColor={'black.800'} placeholder=\"Type your question title here\"/>\r\n\r\n                        </VStack>\r\n                        <VStack w={'100%'}>\r\n                            {\r\n                                options.map((option, index) => (\r\n                                    <HStack w={'100%'}>\r\n                                        <Select\r\n                                            onChange={(e) => {\r\n                                                setOptions((prevState) => (\r\n                                                    options.map((item, i) => i === index ? {\r\n                                                        ...item,\r\n                                                        score: e.target.value\r\n                                                    } : item)\r\n                                                ))\r\n                                            }}\r\n                                            bg={'gray.200'}\r\n                                            // defaultValue={0}\r\n                                            placeholder='score'\r\n                                            maxW={'100px'}>\r\n                                            {\r\n                                                [0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2].map((item, i) => (\r\n                                                    <option key={i} value={item}>{item}</option>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                        <Input\r\n                                            borderWidth={option.score && option.score > 0 && 1.5}\r\n                                            borderColor={option.score && option.score > 0 && 'green'}\r\n                                            color={option.score && option.score > 0 && 'green'}\r\n                                            focusBorderColor={option.score && option.score > 0 && 'green'}\r\n                                            colorScheme={'blue'}\r\n                                            onChange={(e) => onOptionChange(e, index)}\r\n                                            key={index}\r\n                                            placeholder={\"option\"}/>\r\n                                    </HStack>\r\n                                ))\r\n                            }\r\n                        </VStack>\r\n\r\n                    </VStack>\r\n\r\n                    <ModalFooter>\r\n                        <Button onClick={() => {\r\n                            setVisible(false)\r\n                            setOptions([{}, {}])\r\n                            setQuestion(null)\r\n                        }}>Close</Button>\r\n                        <Button ml={4} colorScheme={'blue'} onClick={onSaveOption}>Save</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewQuestionDialog;"]},"metadata":{},"sourceType":"module"}