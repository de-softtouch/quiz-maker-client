{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\pages\\\\admin\\\\quiz_edit\\\\QuizEditor.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Checkbox, Container, Flex, Heading, HStack, IconButton, Select, SimpleGrid, Spacer, Stack, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport { AiOutlineTag, BiSave, BsPen, MdArrowDropDown } from \"react-icons/all\";\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\nimport QuizEditDialog from \"./components/QuizEditDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuizEditor = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const {\n    quiz,\n    setQuiz\n  } = useContext(QuizEditContext);\n  const [sort, setSort] = useState('column-reverse');\n  const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\n  const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\n  const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false);\n  const [size, setSize] = useState('full');\n  useEffect(() => {\n    //fetch quiz details\n    const fetchQuizDetails = async () => {\n      const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/${id}`;\n\n      try {\n        const resp = await axios.get(url, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        resp.status === 200 && setQuiz(resp.data);\n        console.log(resp.data);\n      } catch (e) {\n        console.log(\"Failed to get quiz details with id \" + id);\n      }\n    };\n\n    fetchQuizDetails();\n  }, [setQuiz]);\n\n  const onSaveQuiz = async () => {\n    try {\n      const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes`;\n      const resp = await axios.post(url, quiz, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }); // setQuiz(resp.data);\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: 'center',\n      justifyItems: 'center',\n      alignContent: 'center',\n      direction: 'row',\n      children: [/*#__PURE__*/_jsxDEV(VStack, {\n        align: 'center',\n        w: '100%',\n        minH: '100vh',\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          mb: 4,\n          align: 'start',\n          alignSelf: 'start',\n          spacing: 4,\n          color: 'white',\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: 'sm',\n            onClick: () => setShowNewQuestionDialog(true),\n            px: 4,\n            colorScheme: 'linkedin',\n            leftIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 43\n            }, this),\n            children: \"New Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            size: 'sm',\n            onChange: e => {\n              setSort(e.target.value);\n              const reversed = quiz.questions.reverse();\n              setQuiz(prevState => ({ ...prevState,\n                questions: reversed\n              }));\n            },\n            bg: \"tomato\",\n            borderColor: \"tomato\",\n            color: \"white\",\n            maxW: 100,\n            icon: /*#__PURE__*/_jsxDEV(MdArrowDropDown, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 35\n            }, this) // variant=\"filled\"\n            ,\n            defaultValue: sort,\n            placeholder: \"Sort by\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: 'column',\n              children: \"Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 'column-reverse',\n              children: \"Reverse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: sort,\n          children: quiz && quiz.questions.map((question, index) => /*#__PURE__*/_jsxDEV(Box, {\n            boxShadow: \"sm\",\n            my: 5,\n            borderRadius: \"md\",\n            align: \"start\",\n            textAlign: \"start\",\n            h: \"100%\",\n            bg: 'white',\n            maxW: \"600px\",\n            minW: \"600px\",\n            children: [/*#__PURE__*/_jsxDEV(HStack, {\n              p: 2,\n              bg: \"gray.200\",\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: [\"Question \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                label: \"edit\",\n                color: \"teal.200\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  icon: /*#__PURE__*/_jsxDEV(BsPen, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 63\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                color: \"red.500\",\n                label: \"remove\",\n                children: /*#__PURE__*/_jsxDEV(IconButton // onClick={onDeleteQuestion}\n                , {\n                  icon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 55\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                label: \"duplicate\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  icon: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 63\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(VStack, {\n              align: \"start\",\n              p: 2,\n              spacing: 5,\n              children: [/*#__PURE__*/_jsxDEV(Container, {\n                maxW: \"3xl\",\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  maxW: \"3xl\",\n                  children: /*#__PURE__*/_jsxDEV(Text, {\n                    fontWeight: \"medium\",\n                    children: question.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n                w: \"100%\",\n                align: \"start\",\n                columns: 2,\n                spacing: 2,\n                children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(Container, {\n                  maxW: \"xl\",\n                  centerContent: true,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    py: 4,\n                    w: \"100%\",\n                    maxW: \"3xl\",\n                    align: \"start\",\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      w: \"100%\",\n                      size: \"md\",\n                      disabled: true // isChecked={option.isChecked}\n                      ,\n                      children: option.content\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 57\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(HStack, {\n              bg: \"gray.200\",\n              p: 1,\n              children: [/*#__PURE__*/_jsxDEV(Select, {\n                size: \"sm\",\n                maxW: \"100\",\n                bg: \"white\",\n                name: \"queston seconds\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option1\",\n                  children: \"30 secs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option2\",\n                  children: \"15 secs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"option3\",\n                  children: \"45 secs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"sm\",\n                colorScheme: \"white\",\n                variant: \"ghost\",\n                leftIcon: /*#__PURE__*/_jsxDEV(AiOutlineTag, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 55\n                }, this),\n                children: \"Tag topics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        minW: '300px',\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          w: '100%',\n          p: 4,\n          bg: 'white',\n          h: '300px',\n          children: [/*#__PURE__*/_jsxDEV(HStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              defaultValue: quiz && quiz.status ? quiz.status : 0,\n              onChange: e => setQuiz(prevState => ({ ...prevState,\n                status: e.target.value\n              })),\n              size: 'sm',\n              maxW: 20,\n              bg: 'blue.200',\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 0 && 'selected',\n                value: \"0\",\n                children: \"Draft\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 1 && 'selected',\n                value: \"1\",\n                children: \"Private\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: quiz && quiz.status === 2 && 'selected',\n                value: \"2\",\n                children: \"Public\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            w: '100%',\n            size: 'sm',\n            onClick: () => setShowQuickEditQuiz(true),\n            colorScheme: 'teal',\n            leftIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 60\n            }, this),\n            children: quiz && quiz.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => onSaveQuiz(),\n            alignSelf: 'end',\n            leftIcon: /*#__PURE__*/_jsxDEV(BiSave, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 57\n            }, this),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NewQuestionDialog, {\n      size: size,\n      setSize: setSize,\n      visible: showNewQuestionDialog,\n      setVisible: setShowNewQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NewQuestionDialog, {\n      size: size,\n      setSize: setSize,\n      visible: showEditQuestionDialog,\n      setVisible: setShowEditQuestionDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuizEditDialog, {\n      isOpen: showQuickEditQuiz,\n      setOpen: setShowQuickEditQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n      position: 'fixed',\n      bottom: 10,\n      right: '10',\n      zIndex: 800,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        bg: 'teal',\n        color: 'white',\n        icon: /*#__PURE__*/_jsxDEV(ArrowUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        bg: 'teal',\n        color: 'white',\n        icon: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuizEditor, \"HFSAnEJwdhq0MIa094pXnZezBd4=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizEditor;\nexport default QuizEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEditor\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/pages/admin/quiz_edit/QuizEditor.js"],"names":["Box","Button","Checkbox","Container","Flex","Heading","HStack","IconButton","Select","SimpleGrid","Spacer","Stack","Text","Tooltip","VStack","React","useContext","useEffect","useState","axios","useParams","AddIcon","ArrowDownIcon","ArrowUpIcon","CopyIcon","DeleteIcon","EditIcon","QuizEditContext","AiOutlineTag","BiSave","BsPen","MdArrowDropDown","NewQuestionDialog","QuizEditDialog","QuizEditor","id","quiz","setQuiz","sort","setSort","showNewQuestionDialog","setShowNewQuestionDialog","showEditQuestionDialog","setShowEditQuestionDialog","showQuickEditQuiz","setShowQuickEditQuiz","size","setSize","fetchQuizDetails","url","resp","get","headers","localStorage","getItem","status","data","console","log","e","onSaveQuiz","post","error","response","target","value","reversed","questions","reverse","prevState","map","question","index","title","options","option","content"],"mappings":"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","sourcesContent":["import {\r\n    Box,\r\n    Button, Checkbox,\r\n    Container, Flex,\r\n    Heading,\r\n    HStack,\r\n    IconButton, Select,\r\n    SimpleGrid,\r\n    Spacer, Stack,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AddIcon, ArrowDownIcon, ArrowUpIcon, CopyIcon, DeleteIcon, EditIcon} from \"@chakra-ui/icons\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport {AiOutlineTag, BiSave, BsPen, MdArrowDropDown} from \"react-icons/all\";\r\nimport NewQuestionDialog from \"./components/NewQuestionDialog\";\r\nimport QuizEditDialog from \"./components/QuizEditDialog\";\r\n\r\nconst QuizEditor = () => {\r\n    const {id} = useParams();\r\n    const {quiz, setQuiz} = useContext(QuizEditContext);\r\n    const [sort, setSort] = useState('column-reverse');\r\n    const [showNewQuestionDialog, setShowNewQuestionDialog] = useState(false);\r\n    const [showEditQuestionDialog, setShowEditQuestionDialog] = useState(false);\r\n    const [showQuickEditQuiz, setShowQuickEditQuiz] = useState(false);\r\n    const [size, setSize] = useState('full');\r\n    useEffect(() => {\r\n        //fetch quiz details\r\n        const fetchQuizDetails = async () => {\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes/${id}`;\r\n            try {\r\n                const resp = await axios.get(url, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n\r\n                    }\r\n                })\r\n                resp.status === 200 && setQuiz(resp.data);\r\n                console.log(resp.data)\r\n            } catch (e) {\r\n                console.log(\"Failed to get quiz details with id \" + id);\r\n            }\r\n        }\r\n        fetchQuizDetails();\r\n    }, [setQuiz])\r\n\r\n    const onSaveQuiz = async () => {\r\n        try {\r\n            const url = `http://localhost:8080/api/v1/admin/quiz-management/managed-quizzes`\r\n            const resp = await axios.post(url, quiz, {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            // setQuiz(resp.data);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Flex justifyContent={'center'} justifyItems={'center'} alignContent={'center'} direction={'row'}>\r\n                {/*QUESTIONS EDITOR*/}\r\n                <VStack align={'center'} w={'100%'} minH={'100vh'}>\r\n                    <HStack mb={4} align={'start'} alignSelf={'start'} spacing={4} color={'white'}>\r\n\r\n                        <Button size={'sm'} onClick={() => setShowNewQuestionDialog(true)} px={4}\r\n                                colorScheme={'linkedin'}\r\n                                leftIcon={<AddIcon/>}>\r\n                            New Question\r\n                        </Button>\r\n\r\n                        <Select\r\n                            size={'sm'}\r\n                            onChange={(e) => {\r\n                                setSort(e.target.value);\r\n                                const reversed = quiz.questions.reverse();\r\n                                setQuiz((prevState) => ({\r\n                                    ...prevState,\r\n                                    questions: reversed,\r\n                                }))\r\n                                ;\r\n                            }}\r\n                            bg=\"tomato\"\r\n                            borderColor=\"tomato\"\r\n                            color=\"white\"\r\n                            maxW={100}\r\n                            icon={<MdArrowDropDown/>}\r\n                            // variant=\"filled\"\r\n                            defaultValue={sort}\r\n                            placeholder=\"Sort by\">\r\n                            <option value={'column'}>Default</option>\r\n                            <option value={'column-reverse'}>Reverse</option>\r\n                        </Select>\r\n                    </HStack>\r\n                    {/*    QUESTIONS*/}\r\n                    <Stack direction={sort}>\r\n                        {\r\n                            quiz && quiz.questions.map((question, index) => (\r\n                                <Box\r\n                                    key={index}\r\n                                    boxShadow={\"sm\"}\r\n                                    my={5}\r\n                                    borderRadius={\"md\"}\r\n                                    align={\"start\"}\r\n                                    textAlign={\"start\"}\r\n                                    h={\"100%\"}\r\n                                    bg={'white'}\r\n                                    maxW={\"600px\"}\r\n                                    minW={\"600px\"}\r\n                                >\r\n\r\n                                    <HStack p={2} bg={\"gray.200\"}>\r\n                                        {/*QUESTION INDEX*/}\r\n                                        <Text>Question {index + 1}</Text>\r\n                                        <Spacer/>\r\n                                        <Tooltip label={\"edit\"} color={\"teal.200\"}>\r\n                                            <IconButton icon={<BsPen/>}/>\r\n                                        </Tooltip>\r\n                                        <Tooltip color={\"red.500\"} label={\"remove\"}>\r\n                                            <IconButton\r\n                                                // onClick={onDeleteQuestion}\r\n                                                icon={<DeleteIcon/>}\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip label={\"duplicate\"}>\r\n                                            <IconButton icon={<CopyIcon/>}/>\r\n                                        </Tooltip>\r\n                                    </HStack>\r\n                                    {/*QUESTION*/}\r\n                                    <VStack align={\"start\"} p={2} spacing={5}>\r\n                                        {/*QUESTION TITLE*/}\r\n                                        <Container maxW=\"3xl\">\r\n                                            <Box maxW=\"3xl\">\r\n                                                <Text fontWeight={\"medium\"}>{question.title}</Text>\r\n                                            </Box>\r\n                                        </Container>\r\n                                        <SimpleGrid\r\n                                            w={\"100%\"}\r\n                                            align={\"start\"}\r\n                                            columns={2}\r\n                                            spacing={2}\r\n                                        >\r\n                                            {\r\n                                                question.options.map((option, index) => (\r\n                                                    <Container key={index} maxW=\"xl\" centerContent>\r\n                                                        <Box\r\n                                                            py={4}\r\n                                                            w={\"100%\"}\r\n                                                            maxW=\"3xl\"\r\n                                                            align={\"start\"}\r\n                                                        >\r\n\r\n                                                            <Checkbox\r\n                                                                key={index}\r\n                                                                w={\"100%\"}\r\n                                                                size={\"md\"}\r\n                                                                disabled={true}\r\n                                                                // isChecked={option.isChecked}\r\n                                                            >\r\n                                                                {option.content}\r\n                                                            </Checkbox>\r\n\r\n\r\n                                                        </Box>\r\n                                                    </Container>\r\n                                                ))\r\n                                            }\r\n                                        </SimpleGrid>\r\n                                    </VStack>\r\n                                    <HStack bg={\"gray.200\"} p={1}>\r\n                                        <Select\r\n                                            size={\"sm\"}\r\n                                            maxW={\"100\"}\r\n                                            bg={\"white\"}\r\n                                            name={\"queston seconds\"}\r\n                                        >\r\n                                            <option value=\"option1\">30 secs</option>\r\n                                            <option value=\"option2\">15 secs</option>\r\n                                            <option value=\"option3\">45 secs</option>\r\n                                        </Select>\r\n                                        <Button\r\n                                            size={\"sm\"}\r\n                                            colorScheme={\"white\"}\r\n                                            variant={\"ghost\"}\r\n                                            leftIcon={<AiOutlineTag/>}\r\n                                        >\r\n                                            Tag topics\r\n                                        </Button>\r\n                                    </HStack>\r\n                                </Box>\r\n\r\n                            ))\r\n                        }\r\n                    </Stack>\r\n                </VStack>\r\n\r\n                {/*ACTION SIDEBAR*/}\r\n                <Box minW={'300px'}>\r\n                    <VStack w={'100%'} p={4} bg={'white'} h={'300px'}>\r\n                        {/*PUBLIC*/}\r\n                        <HStack w={'100%'}>\r\n                            <Spacer/>\r\n                            <Select\r\n                                defaultValue={quiz && quiz.status ? quiz.status : 0}\r\n                                onChange={(e) => setQuiz(prevState => ({\r\n                                    ...prevState,\r\n                                    status: e.target.value\r\n                                }))}\r\n                                size={'sm'} maxW={20} bg={'blue.200'}>\r\n                                <option selected={quiz && quiz.status === 0 && 'selected'} value=\"0\">Draft</option>\r\n                                <option selected={quiz && quiz.status === 1 && 'selected'} value=\"1\">Private</option>\r\n                                <option selected={quiz && quiz.status === 2 && 'selected'} value=\"2\">Public</option>\r\n                            </Select>\r\n                        </HStack>\r\n                        {/*    */}\r\n                        <Button\r\n                            w={'100%'}\r\n                            size={'sm'}\r\n                            onClick={() => setShowQuickEditQuiz(true)}\r\n                            colorScheme={'teal'} leftIcon={<EditIcon/>}>\r\n                            {quiz && quiz.title}\r\n                        </Button>\r\n                        <Spacer/>\r\n                        <Button\r\n                            onClick={() => onSaveQuiz()}\r\n                            alignSelf={'end'} leftIcon={<BiSave/>}>Save</Button>\r\n                    </VStack>\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/*DIAlOGS*/}\r\n            <NewQuestionDialog size={size} setSize={setSize} visible={showNewQuestionDialog}\r\n                               setVisible={setShowNewQuestionDialog}/>\r\n            <NewQuestionDialog size={size} setSize={setSize} visible={showEditQuestionDialog}\r\n                               setVisible={setShowEditQuestionDialog}/>\r\n            <QuizEditDialog isOpen={showQuickEditQuiz} setOpen={setShowQuickEditQuiz}/>\r\n\r\n            <HStack position={'fixed'} bottom={10} right={'10'} zIndex={800}>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowUpIcon/>}/>\r\n                <IconButton bg={'teal'} color={'white'} icon={<ArrowDownIcon/>}/>\r\n            </HStack>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuizEditor;"]},"metadata":{},"sourceType":"module"}