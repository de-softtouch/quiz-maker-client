{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\edit_quiz\\\\EditQuestionDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, Button, Center, Checkbox, Container, HStack, Input, Text, Textarea, VStack } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditQuestionDialog = ({\n  setVisible\n}) => {\n  _s();\n\n  const [numOfQuestions, setNumOfQuestion] = useState([0, 1, 2, 3]);\n  const [questions, setQuestions] = useState(['', '', '', '']);\n  const [questions2, setQuestions2] = useState({\n    title: \"This is title\",\n    options: ['Default 1', '', '', '']\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      onClick: () => {\n        console.log(\"HAHHAHA\");\n      },\n      position: 'fixed',\n      zIndex: 9000,\n      top: 0,\n      bg: 'gray.300',\n      align: 'center',\n      alignItems: 'center',\n      opacity: .4,\n      justifyContent: 'center',\n      width: '100vw',\n      height: '100vh'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      boxShadow: 'md',\n      position: 'fixed',\n      zIndex: 9001,\n      top: '50%',\n      right: '50%',\n      transform: 'translate(50%,-50%)',\n      minW: '500px',\n      bg: 'white',\n      maxW: '500px',\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          bg: 'gray.700',\n          p: 2,\n          w: '100%',\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            color: 'white',\n            fontWeight: 'medium',\n            children: \"Question 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          p: 2,\n          w: '100%',\n          children: /*#__PURE__*/_jsxDEV(Textarea, {\n            onChange: e => {\n              setQuestions2(prevState => ({ ...prevState,\n                title: e.target.value\n              }));\n            },\n            value: questions2.title,\n            css: {\n              '&::-webkit-scrollbar': {\n                width: '0px',\n                background: 'transparent'\n              }\n            },\n            resize: 'none',\n            overflow: 'hidden',\n            placeholder: 'Type your question here'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          p: 4,\n          spacing: 4,\n          w: '100%',\n          children: questions2.options.map((item, i) => /*#__PURE__*/_jsxDEV(HStack, {\n            w: '100%',\n            children: [/*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              value: questions2.options[i],\n              onChange: e => {\n                // let updateState = questions\n                //     .map((savedQuestion, index) => {\n                //         if (i === index) {\n                //             return savedQuestion = e.target.value;\n                //         }\n                //         return savedQuestion;\n                //     })\n                // setQuestions(updateState);\n                setQuestions2(prevState => ({ ...prevState,\n                  options: prevState.options.map((savedOption, index) => {\n                    if (i === index) {\n                      return e.target.value;\n                    }\n\n                    return savedOption;\n                  })\n                }));\n              },\n              wordBreak: 'break-all',\n              wordwrap: 'break-word',\n              isFullWidth: true,\n              size: 'sm'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          align: 'start',\n          p: 2,\n          w: '100%',\n          children: /*#__PURE__*/_jsxDEV(Button // onClick={() => {\n          //     setQuestions(prev => [...prev, '']);\n          // }}\n          , {\n            onClick: () => {\n              setQuestions2(prevState => ({ ...prevState,\n                title: prevState.title,\n                options: [...prevState.options, '']\n              }));\n            },\n            size: 'sm',\n            variant: 'outline',\n            alignSelf: 'start',\n            colorScheme: 'teal',\n            children: \"Add answer option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          w: '100%',\n          children: /*#__PURE__*/_jsxDEV(HStack, {\n            p: 2,\n            bg: 'gray.700',\n            justifyContent: 'end',\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setVisible(false);\n              },\n              size: 'sm',\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setVisible(false);\n              },\n              size: 'sm',\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditQuestionDialog, \"r9vwpDolrrJlwoYwfM6s1EtoWfQ=\");\n\n_c = EditQuestionDialog;\nexport default EditQuestionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditQuestionDialog\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/edit_quiz/EditQuestionDialog.js"],"names":["React","useState","Box","Button","Center","Checkbox","Container","HStack","Input","Text","Textarea","VStack","EditQuestionDialog","setVisible","numOfQuestions","setNumOfQuestion","questions","setQuestions","questions2","setQuestions2","title","options","console","log","e","prevState","target","value","width","background","map","item","i","savedOption","index"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {Box, Button, Center, Checkbox, Container, HStack, Input, Text, Textarea, VStack} from \"@chakra-ui/react\";\r\n\r\nconst EditQuestionDialog = ({setVisible}) => {\r\n\r\n\r\n    const [numOfQuestions, setNumOfQuestion] = useState([0, 1, 2, 3]);\r\n\r\n    const [questions, setQuestions] = useState(['', '', '', '']);\r\n\r\n    const [questions2, setQuestions2] = useState({\r\n        title: \"This is title\",\r\n        options: ['Default 1', '', '', '']\r\n    })\r\n    return (\r\n        <>\r\n            <Box\r\n                onClick={() => {\r\n                    console.log(\"HAHHAHA\")\r\n                }}\r\n                position={'fixed'}\r\n                zIndex={9000}\r\n                top={0}\r\n                bg={'gray.300'}\r\n                align={'center'}\r\n                alignItems={'center'}\r\n                opacity={.4}\r\n                justifyContent={'center'}\r\n                width={'100vw'}\r\n                height={'100vh'}>\r\n            </Box>\r\n\r\n            <Box boxShadow={'md'}\r\n                 position={'fixed'}\r\n                 zIndex={9001}\r\n                 top={'50%'}\r\n                 right={'50%'}\r\n                 transform={\r\n                     'translate(50%,-50%)'\r\n                 }\r\n\r\n                 minW={'500px'}\r\n                 bg={'white'}\r\n                 maxW={'500px'}\r\n            >\r\n                <VStack>\r\n                    <HStack bg={'gray.700'} p={2} w={'100%'}>\r\n                        <Text color={'white'} fontWeight={'medium'}>Question 2</Text>\r\n                    </HStack>\r\n                    {/*Question input title*/}\r\n                    <Box p={2} w={'100%'}>\r\n                        <Textarea\r\n                            onChange={(e) => {\r\n                                setQuestions2(prevState => ({\r\n                                    ...prevState,\r\n                                    title: e.target.value,\r\n                                }))\r\n                            }}\r\n                            value={questions2.title}\r\n                            css={\r\n                                {\r\n                                    '&::-webkit-scrollbar': {\r\n                                        width: '0px',\r\n                                        background: 'transparent'\r\n                                    }\r\n                                }\r\n                            }\r\n                            resize={'none'}\r\n                            overflow={'hidden'}\r\n                            placeholder={'Type your question here'}/>\r\n                    </Box>\r\n                    <VStack p={4} spacing={4} w={'100%'}>\r\n                        {/*{*/}\r\n                        {/*    questions.map((item, i) => (*/}\r\n                        {/*        <HStack key={i} w={'100%'}>*/}\r\n                        {/*            <Checkbox/>*/}\r\n                        {/*            <Input*/}\r\n                        {/*                onChange={(e) => {*/}\r\n                        {/*                    let updateState = questions*/}\r\n                        {/*                        .map((savedQuestion, index) => {*/}\r\n                        {/*                            if (i === index) {*/}\r\n                        {/*                                return savedQuestion = e.target.value;*/}\r\n                        {/*                            }*/}\r\n                        {/*                            return savedQuestion;*/}\r\n                        {/*                        })*/}\r\n                        {/*                    setQuestions(updateState);*/}\r\n                        {/*                }}*/}\r\n                        {/*                wordBreak={'break-all'}*/}\r\n                        {/*                wordwrap={'break-word'}*/}\r\n                        {/*                isFullWidth={true}*/}\r\n                        {/*                size={'sm'}/>*/}\r\n                        {/*        </HStack>*/}\r\n                        {/*    ))*/}\r\n                        {/*}*/}\r\n                        {\r\n                            questions2.options.map((item, i) => (\r\n                                <HStack key={i} w={'100%'}>\r\n                                    <Checkbox/>\r\n                                    <Input\r\n                                        value={questions2.options[i]}\r\n                                        onChange={(e) => {\r\n                                            // let updateState = questions\r\n                                            //     .map((savedQuestion, index) => {\r\n                                            //         if (i === index) {\r\n                                            //             return savedQuestion = e.target.value;\r\n                                            //         }\r\n                                            //         return savedQuestion;\r\n                                            //     })\r\n                                            // setQuestions(updateState);\r\n                                            setQuestions2(prevState => ({\r\n                                                ...prevState,\r\n                                                options: prevState.options.map((savedOption, index) => {\r\n                                                    if (i === index) {\r\n                                                        return e.target.value;\r\n                                                    }\r\n                                                    return savedOption;\r\n                                                })\r\n                                            }))\r\n                                        }}\r\n                                        wordBreak={'break-all'}\r\n                                        wordwrap={'break-word'}\r\n                                        isFullWidth={true}\r\n                                        size={'sm'}/>\r\n                                </HStack>\r\n                            ))\r\n                        }\r\n\r\n                    </VStack>\r\n                    {/*BUTTON ADD ANSWER*/}\r\n                    <Box align={'start'} p={2} w={'100%'}>\r\n                        <Button\r\n                            // onClick={() => {\r\n                            //     setQuestions(prev => [...prev, '']);\r\n                            // }}\r\n\r\n                            onClick={() => {\r\n                                setQuestions2(prevState => ({\r\n                                    ...prevState,\r\n                                    title: prevState.title,\r\n                                    options: [...prevState.options, '']\r\n                                }))\r\n                            }}\r\n                            size={'sm'}\r\n                            variant={'outline'}\r\n                            alignSelf={'start'}\r\n                            colorScheme={'teal'}>\r\n                            Add answer option\r\n                        </Button>\r\n                    </Box>\r\n                    {/*BUTTON SAVE*/}\r\n                    <Box w={'100%'}>\r\n                        <HStack p={2} bg={'gray.700'} justifyContent={'end'}>\r\n                            <Button onClick={() => {\r\n                                setVisible(false)\r\n                            }} size={'sm'}>Cancel</Button>\r\n                            <Button onClick={() => {\r\n                                setVisible(false)\r\n                            }} size={'sm'}>Save</Button>\r\n                        </HStack>\r\n                    </Box>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default EditQuestionDialog;"]},"metadata":{},"sourceType":"module"}