{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\quiz maker client\\\\src\\\\pages\\\\admin\\\\create_quiz\\\\CreateNewQuizPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Box, Button, ButtonGroup, FormControl, FormHelperText, FormLabel, HStack, Input, Radio, RadioGroup, Select, Text, useRadio, useRadioGroup, VStack, Wrap, Center, WrapItem, Spinner } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useQuiz } from \"../../../providers/QuizProvider\";\nimport { MdArrowDropDown } from \"react-icons/all\";\nimport axios from \"axios\";\nimport { useCreateQuiz } from \"../../../context/CreateQuizProvider\";\nimport { QuizEditContext } from \"../../../providers/QuizEditProvider\";\nimport SubjectService from \"../../../service/SubjectService\";\nimport QuizService from \"../../../service/QuizService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateNewQuizPage = () => {\n  _s();\n\n  const {\n    setQuiz\n  } = useContext(QuizEditContext);\n  const [savedSubjects, setSubjects] = useState([]);\n  const [quizName, setQuizName] = useState(\"\");\n  const [selectedSubject, setSelectedSubject] = useState(\"\");\n  const [quizNameError, setQuizNameError] = useState(null);\n  const [subjectError, setSubjectError] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const history = useHistory();\n  const {\n    createdQuiz,\n    setCreatedQuiz\n  } = useCreateQuiz();\n  /*\r\n  handle create quiz\r\n  */\n\n  const onNextButtonClicked = async () => {\n    if (quizName == null || quizName.length === 0) {\n      setQuizNameError(\"Please enter a quiz name\");\n      return;\n    }\n\n    if (selectedSubject == null || !selectedSubject.title) {\n      setSubjectError(\"Please select a selectedSubject\");\n      return;\n    }\n\n    try {\n      const resp = await QuizService.saveQuiz({\n        title: quizName,\n        subject: {\n          id: selectedSubject.id || null,\n          title: selectedSubject.title\n        }\n      });\n      const data = resp.data;\n      console.log(data);\n      setQuiz(data);\n      history.replace(`/admin/quiz/${data.id}/edit`);\n    } catch (e) {\n      console.log('Failed to create quiz ', e);\n    }\n  };\n\n  useEffect(() => {\n    //\n    if (createdQuiz != null) {\n      setQuizName(createdQuiz.title == null ? \"\" : createdQuiz.title);\n      setSelectedSubject(createdQuiz.subject == null ? \"\" : createdQuiz.subject);\n    }\n\n    getSubjects().then(r => setSubjects(r));\n  }, []);\n\n  const getSubjects = async () => {\n    setLoading(true);\n\n    try {\n      const data = await SubjectService.getSubjects();\n      console.log(data.data);\n      return data.data;\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      zIndex: 101,\n      position: \"fixed\",\n      top: \"50%\",\n      right: \"50%\",\n      transform: \"translate(50%,-50%)\",\n      zIndex: \"100\",\n      minH: \"100vh\",\n      minW: \"100vw\",\n      position: \"fixed\",\n      bg: \"gray.200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Spinner, {\n      top: \"50%\",\n      right: \"50%\",\n      position: \"fixed\",\n      zIndex: \"1000\",\n      color: \"red.500\",\n      transform: \"translate(50%,-50%)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      bg: \"gray.100\" // bg={'teal.500'}\n      ,\n      zIndex: 101,\n      position: \"fixed\",\n      top: \"50%\",\n      right: \"50%\",\n      transform: \"translate(50%,-50%)\",\n      boxShadow: \"xl\",\n      align: \"start\",\n      borderRadius: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        align: \"start\",\n        p: 4,\n        width: \"500px\",\n        maxW: [\"360px\", \"500px\"],\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          align: \"start\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"20px\",\n            fontWeight: \"medium\",\n            children: \"Create a Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          color: \"gray.600\",\n          align: \"start\",\n          w: \"100%\",\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontWeight: \"normal\",\n              children: \"1. Name this quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              onChange: e => {\n                setQuizName(e.target.value);\n                setQuizNameError(null);\n              },\n              value: quizName,\n              isInvalid: quizNameError != null,\n              borderColor: \"grey.600\",\n              width: \"100%\",\n              variant: \"outline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this), quizNameError && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              color: \"crimson\",\n              children: quizNameError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: \"100%\",\n            align: \"start\",\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontWeight: \"normal\",\n              children: \"2. Choose revelant subjects\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Wrap, {\n              spacing: 2,\n              children: !isLoading && savedSubjects.map((item, i) => /*#__PURE__*/_jsxDEV(WrapItem, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  value: item.title,\n                  onClick: e => {\n                    setSelectedSubject(prev => ({ ...prev,\n                      title: item.title\n                    }));\n                    setSubjectError(\"\");\n                  },\n                  bg: item.title === selectedSubject.title ? \"teal\" : \"white\",\n                  color: item.title === selectedSubject.title ? \"white\" : \"gray\",\n                  colorScheme: \"gray\",\n                  role: \"checkbox\" // defaultChecked={true}\n                  ,\n                  size: \"xs\",\n                  variant: \"outline\",\n                  maxH: \"60\",\n                  maxW: \"60\",\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 41\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            color: \"red\",\n            fontStyle: \"italic\",\n            children: subjectError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            pt: 5,\n            w: \"100%\",\n            justify: \"end\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                history.goBack();\n              },\n              colorScheme: \"gray\",\n              fontWeight: \"normal\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              fontWeight: \"normal\",\n              onClick: onNextButtonClicked,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CreateNewQuizPage, \"eqhJ2YPkr2hZsQSYHoLK2xt9Ubw=\", false, function () {\n  return [useHistory, useCreateQuiz];\n});\n\n_c = CreateNewQuizPage;\nexport default CreateNewQuizPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateNewQuizPage\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/quiz maker client/src/pages/admin/create_quiz/CreateNewQuizPage.js"],"names":["React","useContext","useEffect","useState","Box","Button","ButtonGroup","FormControl","FormHelperText","FormLabel","HStack","Input","Radio","RadioGroup","Select","Text","useRadio","useRadioGroup","VStack","Wrap","Center","WrapItem","Spinner","useHistory","useQuiz","MdArrowDropDown","axios","useCreateQuiz","QuizEditContext","SubjectService","QuizService","CreateNewQuizPage","setQuiz","savedSubjects","setSubjects","quizName","setQuizName","selectedSubject","setSelectedSubject","quizNameError","setQuizNameError","subjectError","setSubjectError","isLoading","setLoading","history","createdQuiz","setCreatedQuiz","onNextButtonClicked","length","title","resp","saveQuiz","subject","id","data","console","log","replace","e","getSubjects","then","r","error","target","value","map","item","i","prev","goBack"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    ButtonGroup,\r\n    FormControl,\r\n    FormHelperText,\r\n    FormLabel,\r\n    HStack,\r\n    Input,\r\n    Radio,\r\n    RadioGroup,\r\n    Select,\r\n    Text,\r\n    useRadio,\r\n    useRadioGroup,\r\n    VStack,\r\n    Wrap,\r\n    Center,\r\n    WrapItem,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useQuiz} from \"../../../providers/QuizProvider\";\r\nimport {MdArrowDropDown} from \"react-icons/all\";\r\nimport axios from \"axios\";\r\nimport {useCreateQuiz} from \"../../../context/CreateQuizProvider\";\r\nimport {QuizEditContext} from \"../../../providers/QuizEditProvider\";\r\nimport SubjectService from \"../../../service/SubjectService\";\r\nimport QuizService from \"../../../service/QuizService\";\r\n\r\nconst CreateNewQuizPage = () => {\r\n\r\n    const {setQuiz} = useContext(QuizEditContext);\r\n    const [savedSubjects, setSubjects] = useState([]);\r\n\r\n    const [quizName, setQuizName] = useState(\"\");\r\n    const [selectedSubject, setSelectedSubject] = useState(\"\");\r\n\r\n    const [quizNameError, setQuizNameError] = useState(null);\r\n    const [subjectError, setSubjectError] = useState(null);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const history = useHistory();\r\n    const {createdQuiz, setCreatedQuiz} = useCreateQuiz();\r\n\r\n    /*\r\n    handle create quiz\r\n    */\r\n    const onNextButtonClicked = async () => {\r\n        if (quizName == null || quizName.length === 0) {\r\n            setQuizNameError(\"Please enter a quiz name\");\r\n            return;\r\n        }\r\n        if (selectedSubject == null || !selectedSubject.title) {\r\n            setSubjectError(\"Please select a selectedSubject\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const resp = await QuizService.saveQuiz({\r\n                title: quizName,\r\n                subject: {\r\n                    id: selectedSubject.id || null,\r\n                    title: selectedSubject.title\r\n                },\r\n            });\r\n            const data = resp.data;\r\n            console.log(data);\r\n            setQuiz(data)\r\n            history.replace(`/admin/quiz/${data.id}/edit`);\r\n        } catch (e) {\r\n            console.log('Failed to create quiz ', e);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        //\r\n        if (createdQuiz != null) {\r\n            setQuizName(createdQuiz.title == null ? \"\" : createdQuiz.title);\r\n            setSelectedSubject(\r\n                createdQuiz.subject == null ? \"\" : createdQuiz.subject\r\n            );\r\n        }\r\n        getSubjects().then((r) => setSubjects(r));\r\n    }, []);\r\n\r\n    const getSubjects = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await SubjectService.getSubjects();\r\n            console.log(data.data);\r\n            return data.data;\r\n        } catch (e) {\r\n            console.error(e);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {/* Overlay */}\r\n            <Box\r\n                zIndex={101}\r\n                position={\"fixed\"}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                zIndex=\"100\"\r\n                minH=\"100vh\"\r\n                minW=\"100vw\"\r\n                position=\"fixed\"\r\n                bg=\"gray.200\"\r\n            />\r\n\r\n            {isLoading && (\r\n                <Spinner\r\n                    top=\"50%\"\r\n                    right=\"50%\"\r\n                    position=\"fixed\"\r\n                    zIndex=\"1000\"\r\n                    color=\"red.500\"\r\n                    transform={\"translate(50%,-50%)\"}\r\n                />\r\n            )}\r\n            <Box\r\n                bg={\"gray.100\"}\r\n                // bg={'teal.500'}\r\n                zIndex={101}\r\n                position={\"fixed\"}\r\n                top={\"50%\"}\r\n                right={\"50%\"}\r\n                transform={\"translate(50%,-50%)\"}\r\n                boxShadow={\"xl\"}\r\n                align={\"start\"}\r\n                borderRadius={\"xl\"}\r\n\r\n            >\r\n                <VStack\r\n                    align={\"start\"}\r\n                    p={4}\r\n                    width={\"500px\"}\r\n                    maxW={[\"360px\", \"500px\"]}\r\n                >\r\n                    <HStack align={\"start\"}>\r\n                        <Text fontSize={\"20px\"} fontWeight={\"medium\"}>\r\n                            Create a Quiz\r\n                        </Text>\r\n                    </HStack>\r\n                    <VStack color={\"gray.600\"} align={\"start\"} w={\"100%\"}>\r\n                        <FormControl>\r\n                            <FormLabel fontWeight={\"normal\"}>\r\n                                1. Name this quiz\r\n                            </FormLabel>\r\n                            {/*1. quiz name*/}\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setQuizName(e.target.value);\r\n                                    setQuizNameError(null);\r\n                                }}\r\n                                value={quizName}\r\n                                isInvalid={quizNameError != null}\r\n                                borderColor={\"grey.600\"}\r\n                                width={\"100%\"}\r\n                                variant=\"outline\"\r\n                            />\r\n                            {quizNameError && (\r\n                                <FormHelperText color={\"crimson\"}>\r\n                                    {quizNameError}\r\n                                </FormHelperText>\r\n                            )}\r\n                        </FormControl>\r\n                        {/*2. CHOICE A SUBJECT*/}\r\n                        <VStack w={\"100%\"} align={\"start\"}>\r\n                            <FormLabel fontWeight={\"normal\"}>\r\n                                2. Choose revelant subjects\r\n                            </FormLabel>\r\n                            <Wrap spacing={2}>\r\n                                {!isLoading && savedSubjects.map((item, i) => (\r\n                                    <WrapItem key={i}>\r\n                                        <Button\r\n                                            value={item.title}\r\n                                            onClick={(e) => {\r\n                                                setSelectedSubject(prev => ({\r\n                                                    ...prev,\r\n                                                    title: item.title\r\n                                                }));\r\n                                                setSubjectError(\"\");\r\n                                            }}\r\n                                            bg={\r\n                                                item.title === selectedSubject.title\r\n                                                    ? \"teal\"\r\n                                                    : \"white\"\r\n                                            }\r\n                                            color={\r\n                                                item.title === selectedSubject.title\r\n                                                    ? \"white\"\r\n                                                    : \"gray\"\r\n                                            }\r\n                                            colorScheme={\"gray\"}\r\n                                            role={\"checkbox\"}\r\n                                            // defaultChecked={true}\r\n                                            size={\"xs\"}\r\n                                            variant={\"outline\"}\r\n                                            maxH={\"60\"}\r\n                                            maxW={\"60\"}\r\n                                        >\r\n                                            {item.title}\r\n                                        </Button>\r\n                                    </WrapItem>\r\n                                ))}\r\n                            </Wrap>\r\n                        </VStack>\r\n\r\n                        <Text color=\"red\" fontStyle=\"italic\">\r\n                            {subjectError}\r\n                        </Text>\r\n                        <HStack pt={5} w={\"100%\"} justify={\"end\"}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    history.goBack()\r\n                                }}\r\n                                colorScheme=\"gray\"\r\n                                fontWeight={\"normal\"}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                colorScheme=\"teal\"\r\n                                fontWeight={\"normal\"}\r\n                                onClick={onNextButtonClicked}\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CreateNewQuizPage;\r\n"]},"metadata":{},"sourceType":"module"}