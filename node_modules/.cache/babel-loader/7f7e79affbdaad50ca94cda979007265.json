{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\home\\\\CreateQuizDialog.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, Button, FormControl, FormHelperText, FormLabel, HStack, Input, Tag, Text, useRadio, useRadioGroup, VStack, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateQuizDialog = ({\n  setCreateQuiz\n}) => {\n  _s();\n\n  const [quizName, setQuizName] = useState('');\n  const [subject, setSubject] = useState('');\n  const [quizNameError, setQuizNameError] = useState(null);\n  const [subjectError, setSubjectError] = useState(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: 'gray.100' // bg={'teal.500'}\n      ,\n      zIndex: 1000,\n      position: 'fixed',\n      top: '50%',\n      boxShadow: 'xl',\n      right: '50%',\n      align: 'start',\n      borderRadius: 'xl',\n      transform: 'translate(50%,-50%)',\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        align: 'start',\n        p: 4,\n        width: '500px',\n        maxW: ['360px', '500px'],\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          align: 'start',\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: '20px',\n            fontWeight: 'medium',\n            children: \"Create a Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          color: 'gray.600',\n          align: 'start',\n          w: '100%',\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontWeight: 'normal',\n              children: \"1. Name this quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              onChange: e => {\n                setQuizName(e.target.value);\n                setQuizNameError(null);\n              },\n              value: quizName,\n              isInvalid: quizNameError != null,\n              borderColor: 'grey.600',\n              isFullWidth: true,\n              width: '100%',\n              variant: \"outline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this), quizNameError && /*#__PURE__*/_jsxDEV(FormHelperText, {\n              color: 'crimson',\n              children: quizNameError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            w: '100%',\n            align: 'start',\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontWeight: 'normal',\n              children: \"2. Choose revelant subjects\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n              setSubject: setSubject,\n              setSubjectError: setSubjectError()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), subjectError != null && subjectError.length > 0 && /*#__PURE__*/_jsxDEV(Text, {\n              color: 'red',\n              fontSize: 12,\n              fontStyle: 'italic',\n              children: \"Please select one subject\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            pt: 5,\n            w: '100%',\n            justify: 'end',\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setCreateQuiz(false);\n              },\n              colorScheme: \"gray\",\n              fontWeight: 'normal',\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              fontWeight: 'normal',\n              onClick: () => {\n                if (quizName == null || quizName.length == 0) {\n                  setQuizNameError(\"Please enter a quiz name\");\n                }\n\n                if (subject == null || subject.length == 0) {\n                  setSubjectError('Please select a subject');\n                }\n              },\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}; // 1. Create a component that consumes the `useRadio` hook\n\n\n_s(CreateQuizDialog, \"yKn+AT2zzh5U6hf105UCThNUxis=\");\n\n_c = CreateQuizDialog;\n\nfunction CustomRadioCard(props) {\n  _s2();\n\n  const {\n    getInputProps,\n    getCheckboxProps\n  } = useRadio(props);\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"label\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      fontSize: 12,\n      ...checkbox,\n      cursor: \"pointer\",\n      borderWidth: \"1px\",\n      borderRadius: \"xl\" // boxShadow=\"md\"\n      ,\n      _checked: {\n        bg: \"teal.600\",\n        color: \"white\",\n        borderColor: \"teal.600\"\n      },\n      _focus: {\n        boxShadow: \"outline\"\n      } // px={5}\n      // py={3}\n      ,\n      p: .5,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n} // Step 2: Use the `useRadioGroup` hook to control a group of custom radios.\n\n\n_s2(CustomRadioCard, \"gen7hu+mcPHaCS2zuUrnEuwfIMc=\", false, function () {\n  return [useRadio];\n});\n\n_c2 = CustomRadioCard;\n\nfunction RadioGroup({\n  setSubject,\n  setSubjectError\n}) {\n  _s3();\n\n  const options = [\"react\", \"vue\", \"svelte\", 'asdsad', 'rere', 'sf34', '3434', 'sdfsf'];\n  const {\n    getRootProps,\n    getRadioProps\n  } = useRadioGroup({\n    name: \"subject\",\n    defaultValue: \"default\",\n    onChange: e => {\n      setSubject(e);\n      setSubjectError(null);\n    }\n  });\n  const group = getRootProps();\n  return /*#__PURE__*/_jsxDEV(Wrap, { ...group,\n    children: options.map((value, i) => {\n      const radio = getRadioProps({\n        value\n      });\n      return /*#__PURE__*/_jsxDEV(WrapItem, {\n        children: /*#__PURE__*/_jsxDEV(CustomRadioCard, { ...radio,\n          children: value\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n}\n\n_s3(RadioGroup, \"+EnqeV2mLMw6l+1ol7KVAd+sDqU=\", false, function () {\n  return [useRadioGroup];\n});\n\n_c3 = RadioGroup;\nexport default CreateQuizDialog;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CreateQuizDialog\");\n$RefreshReg$(_c2, \"CustomRadioCard\");\n$RefreshReg$(_c3, \"RadioGroup\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/home/CreateQuizDialog.js"],"names":["React","useState","Box","Button","FormControl","FormHelperText","FormLabel","HStack","Input","Tag","Text","useRadio","useRadioGroup","VStack","Wrap","WrapItem","CreateQuizDialog","setCreateQuiz","quizName","setQuizName","subject","setSubject","quizNameError","setQuizNameError","subjectError","setSubjectError","e","target","value","length","CustomRadioCard","props","getInputProps","getCheckboxProps","input","checkbox","bg","color","borderColor","boxShadow","children","RadioGroup","options","getRootProps","getRadioProps","name","defaultValue","onChange","group","map","i","radio"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl, FormHelperText,\r\n    FormLabel,\r\n    HStack,\r\n    Input,\r\n    Tag,\r\n    Text,\r\n    useRadio, useRadioGroup,\r\n    VStack,\r\n    Wrap,\r\n    WrapItem\r\n} from \"@chakra-ui/react\";\r\n\r\nconst CreateQuizDialog = ({setCreateQuiz}) => {\r\n\r\n    const [quizName, setQuizName] = useState('');\r\n    const [subject, setSubject] = useState('');\r\n    const [quizNameError, setQuizNameError] = useState(null);\r\n    const [subjectError, setSubjectError] = useState(null);\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                bg={'gray.100'}\r\n                // bg={'teal.500'}\r\n                zIndex={1000}\r\n                position={'fixed'}\r\n                top={'50%'}\r\n                boxShadow={'xl'}\r\n                right={'50%'}\r\n                align={'start'}\r\n                borderRadius={'xl'}\r\n                transform={\r\n                    'translate(50%,-50%)'\r\n                }\r\n            >\r\n                <VStack align={'start'} p={4} width={'500px'} maxW={['360px', '500px']}>\r\n                    <HStack align={'start'}>\r\n                        <Text fontSize={'20px'} fontWeight={'medium'}>Create a Quiz</Text>\r\n                    </HStack>\r\n\r\n                    <VStack color={'gray.600'} align={'start'} w={'100%'}>\r\n                        <FormControl>\r\n                            <FormLabel fontWeight={'normal'}>\r\n                                1. Name this quiz\r\n                            </FormLabel>\r\n                            <Input\r\n                                onChange={(e) => {\r\n                                    setQuizName(e.target.value);\r\n                                    setQuizNameError(null);\r\n                                }}\r\n                                value={quizName}\r\n                                isInvalid={quizNameError != null}\r\n                                borderColor={'grey.600'}\r\n                                isFullWidth={true}\r\n                                width={'100%'}\r\n                                variant=\"outline\"/>\r\n                            {\r\n                                quizNameError && <FormHelperText color={'crimson'}>{quizNameError}</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        {/*2. Choose a subject*/}\r\n                        <VStack w={'100%'} align={'start'}>\r\n                            <FormLabel fontWeight={'normal'}>\r\n                                2. Choose revelant subjects\r\n                            </FormLabel>\r\n                            <RadioGroup setSubject={setSubject} setSubjectError={setSubjectError()}/>\r\n                            {(subjectError != null\r\n                                && subjectError.length > 0\r\n                                &&<Text color={'red'} fontSize={12} fontStyle={'italic'}>Please select one subject</Text>\r\n                            )}\r\n                        </VStack>\r\n                        <HStack pt={5} w={'100%'} justify={'end'}>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setCreateQuiz(false);\r\n                                }}\r\n                                colorScheme=\"gray\" fontWeight={'normal'}>Cancel</Button>\r\n                            <Button\r\n                                colorScheme=\"teal\"\r\n                                fontWeight={'normal'}\r\n                                onClick={() => {\r\n                                    if (quizName == null || quizName.length == 0) {\r\n                                        setQuizNameError(\"Please enter a quiz name\");\r\n                                    }\r\n                                    if(subject==null||subject.length==0){\r\n                                        setSubjectError('Please select a subject');\r\n                                    }\r\n\r\n                                }}\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </HStack>\r\n                    </VStack>\r\n\r\n\r\n                </VStack>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\n// 1. Create a component that consumes the `useRadio` hook\r\nfunction CustomRadioCard(props) {\r\n    const {getInputProps, getCheckboxProps} = useRadio(props)\r\n\r\n    const input = getInputProps()\r\n    const checkbox = getCheckboxProps()\r\n\r\n    return (\r\n        <Box as=\"label\">\r\n            <input {...input} />\r\n            <Box\r\n                fontSize={12}\r\n                {...checkbox}\r\n                cursor=\"pointer\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"xl\"\r\n                // boxShadow=\"md\"\r\n                _checked={{\r\n                    bg: \"teal.600\",\r\n                    color: \"white\",\r\n                    borderColor: \"teal.600\",\r\n                }}\r\n                _focus={{\r\n                    boxShadow: \"outline\",\r\n                }}\r\n                // px={5}\r\n                // py={3}\r\n                p={.5}\r\n            >\r\n                {props.children}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n// Step 2: Use the `useRadioGroup` hook to control a group of custom radios.\r\nfunction RadioGroup({setSubject,setSubjectError}) {\r\n    const options = [\"react\", \"vue\", \"svelte\", 'asdsad', 'rere', 'sf34', '3434', 'sdfsf']\r\n\r\n    const {getRootProps, getRadioProps} = useRadioGroup({\r\n        name: \"subject\",\r\n        defaultValue: \"default\",\r\n        onChange: (e) => {\r\n            setSubject(e);\r\n            setSubjectError(null);\r\n\r\n        },\r\n    })\r\n\r\n    const group = getRootProps()\r\n\r\n    return (\r\n        <Wrap {...group}>\r\n            {options.map((value, i) => {\r\n                const radio = getRadioProps({value})\r\n                return (\r\n                    <WrapItem key={i}>\r\n                        <CustomRadioCard key={i} {...radio}>\r\n                            {value}\r\n                        </CustomRadioCard>\r\n                    </WrapItem>\r\n                )\r\n            })}\r\n        </Wrap>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateQuizDialog;"]},"metadata":{},"sourceType":"module"}