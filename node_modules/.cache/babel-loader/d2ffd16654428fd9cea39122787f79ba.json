{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\create_grade_quizzes\\\\src\\\\components\\\\public\\\\start_quiz\\\\StartQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Button, Checkbox, Container, Divider, Flex, Heading, HStack, IconButton, SimpleGrid, Text, Tooltip, VStack } from \"@chakra-ui/react\";\nimport { ArrowDownIcon, ArrowUpIcon, TimeIcon } from \"@chakra-ui/icons\";\nimport { useQuiz } from \"../../../context/QuizProvider\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StartQuiz = () => {\n  _s();\n\n  const {\n    foundedQuiz,\n    setFoundedQuiz\n  } = useQuiz();\n  const {\n    id\n  } = useParams();\n  const [isFetching, setFetching] = useState(false);\n  useEffect(() => {\n    console.log(\"use effext\");\n    fetchQuiz();\n  }, []);\n\n  const fetchQuiz = async () => {\n    const resp = await axios.get(\"http://localhost:8080/api/v1/public/quiz/code?=\" + id);\n\n    if (resp.status === 200) {\n      console.log(resp.data);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    minH: '100vh',\n    bg: 'blue.100',\n    p: 10,\n    align: 'center',\n    children: /*#__PURE__*/_jsxDEV(Heading, {\n      children: \"dsdsdsd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StartQuiz, \"pCZja5psAkq87OVTTEAi4wg2K6E=\", false, function () {\n  return [useQuiz, useParams];\n});\n\n_c = StartQuiz;\nexport default StartQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"sources":["C:/Users/Admin/create_grade_quizzes/src/components/public/start_quiz/StartQuiz.js"],"names":["React","useEffect","useState","Box","Button","Checkbox","Container","Divider","Flex","Heading","HStack","IconButton","SimpleGrid","Text","Tooltip","VStack","ArrowDownIcon","ArrowUpIcon","TimeIcon","useQuiz","axios","useParams","StartQuiz","foundedQuiz","setFoundedQuiz","id","isFetching","setFetching","console","log","fetchQuiz","resp","get","status","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SACIC,GADJ,EAEIC,MAFJ,EAGIC,QAHJ,EAIIC,SAJJ,EAKIC,OALJ,EAKaC,IALb,EAMIC,OANJ,EAOIC,MAPJ,EAOYC,UAPZ,EAQIC,UARJ,EASIC,IATJ,EAUIC,OAVJ,EAWIC,MAXJ,QAYO,kBAZP;AAaA,SAAQC,aAAR,EAAuBC,WAAvB,EAAoCC,QAApC,QAAmD,kBAAnD;AACA,SAAQC,OAAR,QAAsB,+BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAAgCL,OAAO,EAA7C;AACA,QAAM;AAACM,IAAAA;AAAD,MAAOJ,SAAS,EAAtB;AACA,QAAM,CAACK,UAAD,EAAaC,WAAb,IAA4BzB,QAAQ,CAAC,KAAD,CAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAC,IAAAA,SAAS;AACZ,GAHQ,EAGN,EAHM,CAAT;;AAIA,QAAMA,SAAS,GAAG,YAAY;AAC1B,UAAMC,IAAI,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,oDAAkDP,EAA5D,CAAnB;;AACA,QAAGM,IAAI,CAACE,MAAL,KAAc,GAAjB,EAAqB;AACjBL,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACG,IAAjB;AACH;AACJ,GALD;;AAQA,sBACI,QAAC,GAAD;AAAK,IAAA,IAAI,EAAE,OAAX;AAAoB,IAAA,EAAE,EAAE,UAAxB;AAAoC,IAAA,CAAC,EAAE,EAAvC;AACK,IAAA,KAAK,EAAE,QADZ;AAAA,2BAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA6HH,CA9ID;;GAAMZ,S;UAEoCH,O,EACzBE,S;;;KAHXC,S;AAgJN,eAAeA,SAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Divider, Flex,\r\n    Heading,\r\n    HStack, IconButton,\r\n    SimpleGrid,\r\n    Text,\r\n    Tooltip,\r\n    VStack\r\n} from \"@chakra-ui/react\";\r\nimport {ArrowDownIcon, ArrowUpIcon, TimeIcon} from \"@chakra-ui/icons\";\r\nimport {useQuiz} from \"../../../context/QuizProvider\";\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst StartQuiz = () => {\r\n\r\n    const {foundedQuiz, setFoundedQuiz} = useQuiz();\r\n    const {id} = useParams();\r\n    const [isFetching, setFetching] = useState(false);\r\n    useEffect(() => {\r\n        console.log(\"use effext\")\r\n        fetchQuiz();\r\n    }, []);\r\n    const fetchQuiz = async () => {\r\n        const resp = await axios.get(\"http://localhost:8080/api/v1/public/quiz/code?=\"+id);\r\n        if(resp.status===200){\r\n            console.log(resp.data);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Box minH={'100vh'} bg={'blue.100'} p={10}\r\n             align={'center'}>\r\n            <Heading>dsdsdsd</Heading>\r\n            {/*{*/}\r\n            {/*    !isFetching && <Box*/}\r\n            {/*        bg={'white'}*/}\r\n            {/*        borderRadius={'md'}*/}\r\n            {/*        boxShadow={'xl'}*/}\r\n            {/*        minH={'100vh'}*/}\r\n            {/*        maxW={'860px'}*/}\r\n            {/*        p={10}>*/}\r\n            {/*        <VStack position={'relative'}>*/}\r\n            {/*            /!**/}\r\n            {/*               QUIZ TITLE*/}\r\n            {/*               *!/*/}\r\n            {/*            <Heading*/}\r\n            {/*                pb={10}*/}\r\n            {/*                fontSize={25}>*/}\r\n            {/*                {foundedQuiz != null ? foundedQuiz.title : ''}*/}\r\n            {/*            </Heading>*/}\r\n            {/*            <Text*/}\r\n            {/*                fontWeight={'medium'}*/}\r\n            {/*                color={'teal'}*/}\r\n            {/*                letterSpacing={1}*/}\r\n            {/*                fontStyle={'italic'}*/}\r\n            {/*                position={'absolute'}*/}\r\n            {/*                top={0}*/}\r\n            {/*                right={0}*/}\r\n            {/*                m={5}>*/}\r\n            {/*                {foundedQuiz.questions.length} Questions*/}\r\n            {/*            </Text>*/}\r\n            {/*            /!*QUESTIONS*!/*/}\r\n            {/*            {*/}\r\n            {/*                foundedQuiz.questions.map((question, i) => (*/}\r\n            {/*                    <VStack*/}\r\n            {/*                        w={'100%'}*/}\r\n            {/*                        align={'start'}*/}\r\n            {/*                        textAlign={'start'*/}\r\n            {/*                        } key={i}*/}\r\n            {/*                        p={2}*/}\r\n            {/*                        spacing={5}>*/}\r\n            {/*                        /!**/}\r\n            {/*                        QUESTION TITLE*/}\r\n            {/*                        *!/*/}\r\n            {/*                        <Container w={'100%'} maxW=\"4xl\">*/}\r\n            {/*                            <Box maxW=\"4xl\">*/}\r\n            {/*                                <Text fontWeight={'medium'}>*/}\r\n            {/*                                    {i + 1}. {question.title} \\t QuestionID : {question.questionId}*/}\r\n            {/*                                </Text>*/}\r\n            {/*                            </Box>*/}\r\n            {/*                        </Container>*/}\r\n            {/*                        /!*OPTIONS*!/*/}\r\n            {/*                        <SimpleGrid*/}\r\n            {/*                            w={'100%'}*/}\r\n            {/*                            columns={2}*/}\r\n            {/*                            spacing={2}*/}\r\n            {/*                            align={'start'}*/}\r\n            {/*                            textAlign={'start'}>*/}\r\n            {/*                            {*/}\r\n            {/*                                question.options.map((option, i) => (*/}\r\n            {/*                                    <Container*/}\r\n            {/*                                        w={'100%'}*/}\r\n            {/*                                        minW={300}*/}\r\n            {/*                                        key={i}*/}\r\n            {/*                                        maxW=\"xl\"*/}\r\n            {/*                                        align={'start'}*/}\r\n            {/*                                        textAlign={'start'}*/}\r\n            {/*                                        alignItems={'start'}*/}\r\n            {/*                                    >*/}\r\n            {/*                                        <Box padding=\"1\" maxW=\"3xl\">*/}\r\n            {/*                                            <Checkbox*/}\r\n            {/*                                                // onChange={(e) => onSelectedOption(e, option.optionId, question.questionId)}*/}\r\n            {/*                                                value={option.optionId}*/}\r\n            {/*                                                colorScheme={'teal'}*/}\r\n            {/*                                                size={'md'}>*/}\r\n            {/*                                                {option.content} \\t OptionID : {option.optionId}*/}\r\n            {/*                                            </Checkbox>*/}\r\n            {/*                                        </Box>*/}\r\n            {/*                                    </Container>*/}\r\n            {/*                                ))*/}\r\n            {/*                            }*/}\r\n            {/*                        </SimpleGrid>*/}\r\n            {/*                        <Divider/>*/}\r\n            {/*                    </VStack>*/}\r\n            {/*                ))*/}\r\n            {/*            }*/}\r\n            {/*            /!* Submit button*!/*/}\r\n            {/*            <Box py={5} align={'end'} alignSelf={'end'}>*/}\r\n            {/*                <Button alignSelf={'end'} size={'lg'} colorScheme={'teal'}>Submit</Button>*/}\r\n            {/*            </Box>*/}\r\n            {/*        </VStack>*/}\r\n\r\n            {/*        /!* FIXED CONTENTS*!/*/}\r\n            {/*        <HStack zIndex={100} position={'fixed'} bottom={10} right={20}>*/}\r\n            {/*            <Tooltip label={\"Scroll to top\"}>*/}\r\n            {/*                <IconButton*/}\r\n            {/*                    onClick={() => window.scrollTo(0, 0)}*/}\r\n            {/*                    colorScheme={'teal'}*/}\r\n            {/*                    icon={<ArrowUpIcon/>}/>*/}\r\n            {/*            </Tooltip>*/}\r\n            {/*            <Tooltip label={\"Scroll to bottom\"}>*/}\r\n            {/*                <IconButton*/}\r\n            {/*                    // aria-label={\"\"}*/}\r\n            {/*                    onClick={() => {*/}\r\n            {/*                        // pageRef.current.scrollIntoView({*/}\r\n            {/*                        //     behavior: \"smooth\",*/}\r\n            {/*                        //     block: \"end\",*/}\r\n            {/*                        //     inline: \"nearest\"*/}\r\n            {/*                        // })*/}\r\n            {/*                    }}*/}\r\n            {/*                    colorScheme={'teal'}*/}\r\n            {/*                    icon={<ArrowDownIcon/>}/>*/}\r\n            {/*            </Tooltip>*/}\r\n            {/*        </HStack>*/}\r\n            {/*        <Flex p={1} position={'fixed'} left={0} top={0} m={10}>*/}\r\n            {/*            <Button size={'md'} colorScheme={'teal'} variant={'outline'} leftIcon={<TimeIcon/>}>23:00*/}\r\n            {/*                left</Button>*/}\r\n            {/*        </Flex>*/}\r\n            {/*    </Box>*/}\r\n            {/*}*/}\r\n\r\n\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;"]},"metadata":{},"sourceType":"module"}